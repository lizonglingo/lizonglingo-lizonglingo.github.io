<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Li Duo</title>
    <link>https://lizonglingo.github.io/post/</link>
    <description>Recent content in Posts on Li Duo</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Mon, 01 Aug 2022 18:10:59 +0800</lastBuildDate><atom:link href="https://lizonglingo.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>cri-dockerd，在kubernetes1.24后继续使用Docker作为容器运行时</title>
      <link>https://lizonglingo.github.io/p/cri-dockerd%E5%9C%A8kubernetes1.24%E5%90%8E%E7%BB%A7%E7%BB%AD%E4%BD%BF%E7%94%A8docker%E4%BD%9C%E4%B8%BA%E5%AE%B9%E5%99%A8%E8%BF%90%E8%A1%8C%E6%97%B6/</link>
      <pubDate>Mon, 01 Aug 2022 18:10:59 +0800</pubDate>
      
      <guid>https://lizonglingo.github.io/p/cri-dockerd%E5%9C%A8kubernetes1.24%E5%90%8E%E7%BB%A7%E7%BB%AD%E4%BD%BF%E7%94%A8docker%E4%BD%9C%E4%B8%BA%E5%AE%B9%E5%99%A8%E8%BF%90%E8%A1%8C%E6%97%B6/</guid>
      <description>为体验Kubernetes以及Cilium组合在一起产生的新特性，我计划将Kubernetes升级到1.24+，并使用最新的稳定版ciliu</description>
    </item>
    
    <item>
      <title>InfluxDB Go Client的使用说明</title>
      <link>https://lizonglingo.github.io/p/influxdb-go-client%E7%9A%84%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/</link>
      <pubDate>Wed, 20 Jul 2022 20:22:12 +0800</pubDate>
      
      <guid>https://lizonglingo.github.io/p/influxdb-go-client%E7%9A%84%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/</guid>
      <description>概念 作为目前最流行的时序数据库之一，InfluxDB常用于监控系统数据采集。在使用它之前，我们需要了解一些InfluxDB的概念。以下内容多</description>
    </item>
    
    <item>
      <title>记一次Kubernetes使用Cilium，coredns健康检查失败的排错</title>
      <link>https://lizonglingo.github.io/p/%E8%AE%B0%E4%B8%80%E6%AC%A1kubernetes%E4%BD%BF%E7%94%A8ciliumcoredns%E5%81%A5%E5%BA%B7%E6%A3%80%E6%9F%A5%E5%A4%B1%E8%B4%A5%E7%9A%84%E6%8E%92%E9%94%99/</link>
      <pubDate>Fri, 15 Jul 2022 14:35:19 +0800</pubDate>
      
      <guid>https://lizonglingo.github.io/p/%E8%AE%B0%E4%B8%80%E6%AC%A1kubernetes%E4%BD%BF%E7%94%A8ciliumcoredns%E5%81%A5%E5%BA%B7%E6%A3%80%E6%9F%A5%E5%A4%B1%E8%B4%A5%E7%9A%84%E6%8E%92%E9%94%99/</guid>
      <description>该问题最后在Github的Cilium项目中提了issue，被大佬解决了。 issue地址：https://github.com/cilium</description>
    </item>
    
    <item>
      <title>gorm的常见坑</title>
      <link>https://lizonglingo.github.io/p/gorm%E7%9A%84%E5%B8%B8%E8%A7%81%E5%9D%91/</link>
      <pubDate>Sun, 03 Jul 2022 18:46:20 +0800</pubDate>
      
      <guid>https://lizonglingo.github.io/p/gorm%E7%9A%84%E5%B8%B8%E8%A7%81%E5%9D%91/</guid>
      <description>详情请查阅gorm文档 模型定义 通常在定义一个gorm的数据库表模型时，会内嵌gorm.Model类型。 type User struct { gorm.Model // use gorm.Model Name string } // Model a basic GoLang struct which includes</description>
    </item>
    
    <item>
      <title>Sinan: ML-Based and QoS-Aware Resource Management for Cloud Microservices</title>
      <link>https://lizonglingo.github.io/p/sinan-ml-based-and-qos-aware-resource-management-for-cloud-microservices/</link>
      <pubDate>Sun, 26 Jun 2022 15:00:34 +0800</pubDate>
      
      <guid>https://lizonglingo.github.io/p/sinan-ml-based-and-qos-aware-resource-management-for-cloud-microservices/</guid>
      <description>来源：ASPLOS&#39;21 ccf-a 作者：Cornell University 正如题目所说，这篇文章主要就是使用机器学习的方法，针对微服务架构的应用进行资源配置，当然是保</description>
    </item>
    
    <item>
      <title>Cocktail: A Multidimensional Optimization for Model Serving in Cloud</title>
      <link>https://lizonglingo.github.io/p/cocktail-a-multidimensional-optimization-for-model-serving-in-cloud/</link>
      <pubDate>Sun, 15 May 2022 21:07:08 +0800</pubDate>
      
      <guid>https://lizonglingo.github.io/p/cocktail-a-multidimensional-optimization-for-model-serving-in-cloud/</guid>
      <description>来源：NSDI&#39;22 推荐阅读！ 摘要 背景 越来越多的ML模型运行在公有云环境下。为这些模型服务的框架能够以最小的延迟提供高度准确的预测，并降低部</description>
    </item>
    
    <item>
      <title>A Case for Task Sampling based Learning  for Cluster Job Scheduling</title>
      <link>https://lizonglingo.github.io/p/a-case-for-task-sampling-based-learning-for-cluster-job-scheduling/</link>
      <pubDate>Sat, 14 May 2022 20:09:49 +0800</pubDate>
      
      <guid>https://lizonglingo.github.io/p/a-case-for-task-sampling-based-learning-for-cluster-job-scheduling/</guid>
      <description>来源：NSDI &amp;lsquo;22 摘要 背景 精确定预估任务运行时间为有效的任务调度提供遍历。现有的任务调度基于历史数据学习，使用任务历史信息预估新任务。但是，由</description>
    </item>
    
    <item>
      <title>RunWild: Resource Management System with Generalized Modeling for Microservices on Cloud</title>
      <link>https://lizonglingo.github.io/p/runwild-resource-management-system-with-generalized-modeling-for-microservices-on-cloud/</link>
      <pubDate>Sun, 24 Apr 2022 15:17:07 +0800</pubDate>
      
      <guid>https://lizonglingo.github.io/p/runwild-resource-management-system-with-generalized-modeling-for-microservices-on-cloud/</guid>
      <description>来源：IEEE CLOUD&#39;21 作者：IBM :star:摘要 问题背景 微服务内部通信的复杂性，必须考虑资源利用、调度策略和请求均衡之间的平衡，以防止跨微服务级</description>
    </item>
    
    <item>
      <title>IEEE CLOUD 21 云上资源管理相关合辑</title>
      <link>https://lizonglingo.github.io/p/ieee-cloud-21-%E4%BA%91%E4%B8%8A%E8%B5%84%E6%BA%90%E7%AE%A1%E7%90%86%E7%9B%B8%E5%85%B3%E5%90%88%E8%BE%91/</link>
      <pubDate>Thu, 21 Apr 2022 14:33:47 +0800</pubDate>
      
      <guid>https://lizonglingo.github.io/p/ieee-cloud-21-%E4%BA%91%E4%B8%8A%E8%B5%84%E6%BA%90%E7%AE%A1%E7%90%86%E7%9B%B8%E5%85%B3%E5%90%88%E8%BE%91/</guid>
      <description>本篇整理自IEEE CLOUD&#39;21会议中的文章，主题为云背景下的资源管理。 RunWild: Resource Management System withGeneralized Modeling for Microservices on Cloud :star:摘要 问题背景 微服务内部通信的复杂性</description>
    </item>
    
    <item>
      <title>Characterizing microservice dependency and performance: Alibaba trace analysis</title>
      <link>https://lizonglingo.github.io/p/characterizing-microservice-dependency-and-performance-alibaba-trace-analysis/</link>
      <pubDate>Tue, 29 Mar 2022 13:40:56 +0800</pubDate>
      
      <guid>https://lizonglingo.github.io/p/characterizing-microservice-dependency-and-performance-alibaba-trace-analysis/</guid>
      <description>来源： SoCC&#39;21 作者： Alibaba Group http://cloud.siat.ac.cn/pdca/socc2021-AlibabaTraceAnalysis.pdf 摘要 背景 理解微服务的特征，对利用微服务架构的特性很重要。然而，目前还没有对微服务及其相关系统在生产环境下的全面研究。 工作</description>
    </item>
    
    <item>
      <title>MLaaS in the Wild: Workload Analysis and Scheduling in Large-Scale Heterogeneous GPU Clusters</title>
      <link>https://lizonglingo.github.io/p/mlaas-in-the-wild-workload-analysis-and-scheduling-in-large-scale-heterogeneous-gpu-clusters/</link>
      <pubDate>Mon, 21 Mar 2022 21:05:51 +0800</pubDate>
      
      <guid>https://lizonglingo.github.io/p/mlaas-in-the-wild-workload-analysis-and-scheduling-in-large-scale-heterogeneous-gpu-clusters/</guid>
      <description>来源： NSDI&#39;22 作者：Alibaba Group 摘要 在ML as a Service中，数据中心为ML提供算力保证。而多样的ML工作负载面对异构GPU集群时会出现一些</description>
    </item>
    
    <item>
      <title>3MileBeach: A Tracer with Teeth</title>
      <link>https://lizonglingo.github.io/p/3milebeach-a-tracer-with-teeth/</link>
      <pubDate>Mon, 14 Mar 2022 19:12:33 +0800</pubDate>
      
      <guid>https://lizonglingo.github.io/p/3milebeach-a-tracer-with-teeth/</guid>
      <description>来源：ACM SoCC&#39;21 作者：UC Santa Cruz 摘要 提出3MileBeach，一个针对微服务架构的追踪和故障注入平台。 通过介入一个消息序列化库，避免了代码层面的</description>
    </item>
    
    <item>
      <title>Faa$T: A Transparent Auto-Scaling Cache for Serverless Applications</title>
      <link>https://lizonglingo.github.io/p/faat-a-transparent-auto-scaling-cache-for-serverless-applications/</link>
      <pubDate>Mon, 07 Mar 2022 15:48:15 +0800</pubDate>
      
      <guid>https://lizonglingo.github.io/p/faat-a-transparent-auto-scaling-cache-for-serverless-applications/</guid>
      <description>来源：ACM SoCC&#39;21 作者：Microsoft Research&amp;amp;Stanford University&amp;amp;Microsoft Azure 摘要 问题来源：FaaS平台依赖远程存储来维护状态信息，限制了FaaS应用的运行效率。 难点：Faa</description>
    </item>
    
    <item>
      <title>Service-Level Fault Injection Testing</title>
      <link>https://lizonglingo.github.io/p/service-level-fault-injection-testing/</link>
      <pubDate>Thu, 24 Feb 2022 19:25:41 +0800</pubDate>
      
      <guid>https://lizonglingo.github.io/p/service-level-fault-injection-testing/</guid>
      <description>来源：ACM SoCC&#39;21 https://acmsocc.org/2021/accepted-papers.html 摘要——为什么需要服务级别的故障注入测试 由于微服务架构的特点，负责每个模块的工程师只需专注自己的部分而不需要过多关注整个应用</description>
    </item>
    
    <item>
      <title>SHOWAR: Right-Sizing And Efficient Scheduling of Microservices</title>
      <link>https://lizonglingo.github.io/p/showar-right-sizing-and-efficient-scheduling-of-microservices/</link>
      <pubDate>Tue, 22 Feb 2022 13:45:25 +0800</pubDate>
      
      <guid>https://lizonglingo.github.io/p/showar-right-sizing-and-efficient-scheduling-of-microservices/</guid>
      <description>来源：ACM SoCC&#39;21 https://acmsocc.org/2021/accepted-papers.html 概述 解决了什么问题：提出一个微服务资源调度框架，解决微服务的调度问题，具体来说从水平扩缩容——增减服务实例和垂直扩缩容——控</description>
    </item>
    
    <item>
      <title>Kubernetes Service的使用(k8s实践-4)</title>
      <link>https://lizonglingo.github.io/p/kubernetes-service%E7%9A%84%E4%BD%BF%E7%94%A8k8s%E5%AE%9E%E8%B7%B5-4/</link>
      <pubDate>Tue, 25 Jan 2022 20:06:01 +0800</pubDate>
      
      <guid>https://lizonglingo.github.io/p/kubernetes-service%E7%9A%84%E4%BD%BF%E7%94%A8k8s%E5%AE%9E%E8%B7%B5-4/</guid>
      <description>为什么需要使用Kubernetes Service 如前文提到，集群中Pod的IP地址是不稳定的， 会随着Pod的删除、重启、扩缩容等活动发生变动。这就出现了</description>
    </item>
    
    <item>
      <title>Pod和Deployment的使用(k8s实践-3)</title>
      <link>https://lizonglingo.github.io/p/pod%E5%92%8Cdeployment%E7%9A%84%E4%BD%BF%E7%94%A8k8s%E5%AE%9E%E8%B7%B5-3/</link>
      <pubDate>Fri, 21 Jan 2022 18:28:33 +0800</pubDate>
      
      <guid>https://lizonglingo.github.io/p/pod%E5%92%8Cdeployment%E7%9A%84%E4%BD%BF%E7%94%A8k8s%E5%AE%9E%E8%B7%B5-3/</guid>
      <description>使用Pod Pod.yaml apiVersion: v1 kind: Pod metadata: name: hello-pod labels: zone: prod version: v1 spec: containers: - name: hello-ctr image: nigelpoulton/k8sbook:latest ports: - containerPort: 8080 创建Pod root@lzl:/home/lzl# kubectl apply -f ./WorkSpace/k8s/pod/Pod.yml pod/hello-pod created root@lzl:/home/lzl# kubectl get Pods NAME READY STATUS RESTARTS AGE hello-pod 0/1 ContainerCreating 0 12s # 要等一会，因为有拉取镜像的时</description>
    </item>
    
    <item>
      <title>搭建1个Master节点和2个Work节点的集群(k8s实践-2)</title>
      <link>https://lizonglingo.github.io/p/%E6%90%AD%E5%BB%BA1%E4%B8%AAmaster%E8%8A%82%E7%82%B9%E5%92%8C2%E4%B8%AAwork%E8%8A%82%E7%82%B9%E7%9A%84%E9%9B%86%E7%BE%A4k8s%E5%AE%9E%E8%B7%B5-2/</link>
      <pubDate>Tue, 18 Jan 2022 17:39:01 +0800</pubDate>
      
      <guid>https://lizonglingo.github.io/p/%E6%90%AD%E5%BB%BA1%E4%B8%AAmaster%E8%8A%82%E7%82%B9%E5%92%8C2%E4%B8%AAwork%E8%8A%82%E7%82%B9%E7%9A%84%E9%9B%86%E7%BE%A4k8s%E5%AE%9E%E8%B7%B5-2/</guid>
      <description>本节的目标是：搭建含有一个Master Node和两个Work Node的k8s集群，创建一个admin用户并通过token访问kubernet</description>
    </item>
    
    <item>
      <title>笔记 &gt; SHOWAR: Right-Sizing And Efficient Scheduling of Microservices</title>
      <link>https://lizonglingo.github.io/p/%E7%AC%94%E8%AE%B0-showar-right-sizing-and-efficient-scheduling-of-microservices/</link>
      <pubDate>Mon, 20 Dec 2021 14:51:34 +0800</pubDate>
      
      <guid>https://lizonglingo.github.io/p/%E7%AC%94%E8%AE%B0-showar-right-sizing-and-efficient-scheduling-of-microservices/</guid>
      <description>摘要 提出微服务的面临的一个挑战是为每个微服务找到最佳的分配资源和服务实例的数量。达到保证性能的同时最大限度的提高资源利用率这样一个目标。本文</description>
    </item>
    
    <item>
      <title>笔记 &gt; Service-Level Fault Injection Testing</title>
      <link>https://lizonglingo.github.io/p/%E7%AC%94%E8%AE%B0-service-level-fault-injection-testing/</link>
      <pubDate>Sat, 18 Dec 2021 15:35:42 +0800</pubDate>
      
      <guid>https://lizonglingo.github.io/p/%E7%AC%94%E8%AE%B0-service-level-fault-injection-testing/</guid>
      <description>来源：SoCC&#39;21 Meiklejohn C S, Estrada A, Song Y, et al. Service-Level Fault Injection Testing[C]//Proceedings of the ACM Symposium on Cloud Computing. 2021: 388-402. 摘要 越来越多的企业使用微服务架构发布他们的大规模的移动或是Web应用。 问题在</description>
    </item>
    
    <item>
      <title>微服务网关--kong</title>
      <link>https://lizonglingo.github.io/p/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E7%BD%91%E5%85%B3--kong/</link>
      <pubDate>Thu, 02 Dec 2021 19:20:18 +0800</pubDate>
      
      <guid>https://lizonglingo.github.io/p/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E7%BD%91%E5%85%B3--kong/</guid>
      <description>Kong网关是一个轻量级、高性能、可拓展的云原生API网关。下面我们以docker的形式搭建kong环境。 1. 拉取kong-gateway镜像</description>
    </item>
    
    <item>
      <title>启动k8s的主节点(k8s实践-1)</title>
      <link>https://lizonglingo.github.io/p/%E5%90%AF%E5%8A%A8k8s%E7%9A%84%E4%B8%BB%E8%8A%82%E7%82%B9k8s%E5%AE%9E%E8%B7%B5-1/</link>
      <pubDate>Sun, 28 Nov 2021 20:37:15 +0800</pubDate>
      
      <guid>https://lizonglingo.github.io/p/%E5%90%AF%E5%8A%A8k8s%E7%9A%84%E4%B8%BB%E8%8A%82%E7%82%B9k8s%E5%AE%9E%E8%B7%B5-1/</guid>
      <description>概念 关于k8s的一些概念在官网讲的很详细，这里着重说几个。 主节点 主节点是组成集群控制平面的系统服务集合。生产环境中一般建议有3或5个主节点保</description>
    </item>
    
    <item>
      <title>从Docker覆盖网络引出大二层网络</title>
      <link>https://lizonglingo.github.io/p/%E4%BB%8Edocker%E8%A6%86%E7%9B%96%E7%BD%91%E7%BB%9C%E5%BC%95%E5%87%BA%E5%A4%A7%E4%BA%8C%E5%B1%82%E7%BD%91%E7%BB%9C/</link>
      <pubDate>Sat, 20 Nov 2021 11:24:40 +0800</pubDate>
      
      <guid>https://lizonglingo.github.io/p/%E4%BB%8Edocker%E8%A6%86%E7%9B%96%E7%BD%91%E7%BB%9C%E5%BC%95%E5%87%BA%E5%A4%A7%E4%BA%8C%E5%B1%82%E7%BD%91%E7%BB%9C/</guid>
      <description>学习Docker覆盖网络的时候，自然免不了与数据中心大二层网络技术的关系，然后补了一下相关的知识。 从Docker覆盖网络谈起 对于不同网络中容</description>
    </item>
    
    <item>
      <title>使用Docker Swarm管理服务集群</title>
      <link>https://lizonglingo.github.io/p/%E4%BD%BF%E7%94%A8docker-swarm%E7%AE%A1%E7%90%86%E6%9C%8D%E5%8A%A1%E9%9B%86%E7%BE%A4/</link>
      <pubDate>Tue, 16 Nov 2021 11:57:32 +0800</pubDate>
      
      <guid>https://lizonglingo.github.io/p/%E4%BD%BF%E7%94%A8docker-swarm%E7%AE%A1%E7%90%86%E6%9C%8D%E5%8A%A1%E9%9B%86%E7%BE%A4/</guid>
      <description>这个实验书上的示例是6台机器（虚拟机），我在本机部署时由于内存原因只用了4台虚拟机，但效果还是基本达到了，只有在模拟某台管理节点宕机时，出现</description>
    </item>
    
    <item>
      <title>使用docker-compose部署应用</title>
      <link>https://lizonglingo.github.io/p/%E4%BD%BF%E7%94%A8docker-compose%E9%83%A8%E7%BD%B2%E5%BA%94%E7%94%A8/</link>
      <pubDate>Thu, 11 Nov 2021 14:47:36 +0800</pubDate>
      
      <guid>https://lizonglingo.github.io/p/%E4%BD%BF%E7%94%A8docker-compose%E9%83%A8%E7%BD%B2%E5%BA%94%E7%94%A8/</guid>
      <description>Docker Compose可以在Docker节点上，以单引擎模式进行多容器应用的部署和管理。使用时，首先定义多容器的应用的YAML文件，然后就可以交给</description>
    </item>
    
    <item>
      <title>云原生在实践中的技术组成</title>
      <link>https://lizonglingo.github.io/p/%E4%BA%91%E5%8E%9F%E7%94%9F%E5%9C%A8%E5%AE%9E%E8%B7%B5%E4%B8%AD%E7%9A%84%E6%8A%80%E6%9C%AF%E7%BB%84%E6%88%90/</link>
      <pubDate>Mon, 08 Nov 2021 23:41:03 +0800</pubDate>
      
      <guid>https://lizonglingo.github.io/p/%E4%BA%91%E5%8E%9F%E7%94%9F%E5%9C%A8%E5%AE%9E%E8%B7%B5%E4%B8%AD%E7%9A%84%E6%8A%80%E6%9C%AF%E7%BB%84%E6%88%90/</guid>
      <description>1. 微服务 微服务的引入解决了单体服务的复杂性，将明确定义的功能分成粒度更小的服务，是每个微服务独立迭代、独立部署，独立拓展、独立重启。达到服务</description>
    </item>
    
    <item>
      <title>《云计算网络与安全》简记</title>
      <link>https://lizonglingo.github.io/p/%E4%BA%91%E8%AE%A1%E7%AE%97%E7%BD%91%E7%BB%9C%E4%B8%8E%E5%AE%89%E5%85%A8%E7%AE%80%E8%AE%B0/</link>
      <pubDate>Mon, 01 Nov 2021 17:37:21 +0800</pubDate>
      
      <guid>https://lizonglingo.github.io/p/%E4%BA%91%E8%AE%A1%E7%AE%97%E7%BD%91%E7%BB%9C%E4%B8%8E%E5%AE%89%E5%85%A8%E7%AE%80%E8%AE%B0/</guid>
      <description>今天在图书馆借了两本云计算安全方面的教材类书籍，系统的了解一下云计算安全技术涉及到的相关内容和一些基本概念。通过本文，你可以了解云计算网络安</description>
    </item>
    
    <item>
      <title>Go的并发与任务控制</title>
      <link>https://lizonglingo.github.io/p/go%E7%9A%84%E5%B9%B6%E5%8F%91%E4%B8%8E%E4%BB%BB%E5%8A%A1%E6%8E%A7%E5%88%B6/</link>
      <pubDate>Sat, 16 Oct 2021 16:26:45 +0800</pubDate>
      
      <guid>https://lizonglingo.github.io/p/go%E7%9A%84%E5%B9%B6%E5%8F%91%E4%B8%8E%E4%BB%BB%E5%8A%A1%E6%8E%A7%E5%88%B6/</guid>
      <description>goroutine和channel 在golang中，使用goroutine创建轻量级线程（协程），用来独立执行任务，实现并发操作。使用gor</description>
    </item>
    
    <item>
      <title>读《Go Web编程》的一些笔记</title>
      <link>https://lizonglingo.github.io/p/%E8%AF%BBgo-web%E7%BC%96%E7%A8%8B%E7%9A%84%E4%B8%80%E4%BA%9B%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Fri, 15 Oct 2021 08:19:54 +0800</pubDate>
      
      <guid>https://lizonglingo.github.io/p/%E8%AF%BBgo-web%E7%BC%96%E7%A8%8B%E7%9A%84%E4%B8%80%E4%BA%9B%E7%AC%94%E8%AE%B0/</guid>
      <description>这本书主要讲了使用golang原生的net/http包开发Web应用，后面也强调了使用goroutine和channel实现并发处理，提高W</description>
    </item>
    
    <item>
      <title>Go的匿名函数(闭包)</title>
      <link>https://lizonglingo.github.io/p/go%E7%9A%84%E5%8C%BF%E5%90%8D%E5%87%BD%E6%95%B0%E9%97%AD%E5%8C%85/</link>
      <pubDate>Mon, 11 Oct 2021 20:22:15 +0800</pubDate>
      
      <guid>https://lizonglingo.github.io/p/go%E7%9A%84%E5%8C%BF%E5%90%8D%E5%87%BD%E6%95%B0%E9%97%AD%E5%8C%85/</guid>
      <description>感觉今天应该是对匿名函数的使用开窍了:smiley: 概念 《Go语言圣经》 使用匿名函数可以访问完整的词法环境，也就是在函数中定义的内部函数可以</description>
    </item>
    
    <item>
      <title>Go Web基础</title>
      <link>https://lizonglingo.github.io/p/go-web%E5%9F%BA%E7%A1%80/</link>
      <pubDate>Mon, 11 Oct 2021 12:53:57 +0800</pubDate>
      
      <guid>https://lizonglingo.github.io/p/go-web%E5%9F%BA%E7%A1%80/</guid>
      <description>处理器和处理器函数 处理器是一个拥有ServeHTTP方法的接口 接收两个参数：ResponseWriter接口和指向Request结构的指针 也</description>
    </item>
    
    <item>
      <title>ML学习笔记</title>
      <link>https://lizonglingo.github.io/p/ml%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Fri, 08 Oct 2021 12:52:45 +0800</pubDate>
      
      <guid>https://lizonglingo.github.io/p/ml%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</guid>
      <description>吴恩达ML学习笔记 机器学习定义 计算机从经验E中学习，解决任务T，进行某个性能度量P，通过P测定在T上的表现因经验E而提高。 机器学习分类 Supervised le</description>
    </item>
    
    <item>
      <title>关于Handle、HandleFunc、Handler和HandlerFunc</title>
      <link>https://lizonglingo.github.io/p/%E5%85%B3%E4%BA%8Ehandlehandlefunchandler%E5%92%8Chandlerfunc/</link>
      <pubDate>Thu, 07 Oct 2021 16:39:17 +0800</pubDate>
      
      <guid>https://lizonglingo.github.io/p/%E5%85%B3%E4%BA%8Ehandlehandlefunchandler%E5%92%8Chandlerfunc/</guid>
      <description>这篇文章很大程度上解决了我对golang的net\http中Handle、HandleFunc、Handler和HandlerFunc的疑惑</description>
    </item>
    
    <item>
      <title>Golang Jsonrpc Demo</title>
      <link>https://lizonglingo.github.io/p/golang-jsonrpc-demo/</link>
      <pubDate>Fri, 20 Aug 2021 15:33:42 +0800</pubDate>
      
      <guid>https://lizonglingo.github.io/p/golang-jsonrpc-demo/</guid>
      <description>RPC RPC（Remote Procedure Call）远程过程调用在分布式技术中常常用到例如Hyperledger Fabric中内部节点通信就用到了RPC，还有</description>
    </item>
    
    <item>
      <title>Web漏洞</title>
      <link>https://lizonglingo.github.io/p/web%E6%BC%8F%E6%B4%9E/</link>
      <pubDate>Mon, 09 Aug 2021 16:32:12 +0800</pubDate>
      
      <guid>https://lizonglingo.github.io/p/web%E6%BC%8F%E6%B4%9E/</guid>
      <description>Web漏洞导图 漏洞等级 高危：SQL注入、文件上传、文件包含、代码执行、未授权访问、命令执行 中危：反序列化、逻辑安全 SQL注入 MySql注入 判</description>
    </item>
    
    <item>
      <title>xiaodi安全笔记</title>
      <link>https://lizonglingo.github.io/p/xiaodi%E5%AE%89%E5%85%A8%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Sat, 07 Aug 2021 17:02:25 +0800</pubDate>
      
      <guid>https://lizonglingo.github.io/p/xiaodi%E5%AE%89%E5%85%A8%E7%AC%94%E8%AE%B0/</guid>
      <description>Web安全相关漏洞 Web源码类：SQL注入、上传、xss、代码执行、变量覆盖、逻辑漏洞、反序列化&amp;hellip; Web中间件类：中间件自身的</description>
    </item>
    
    <item>
      <title>入侵检测技术</title>
      <link>https://lizonglingo.github.io/p/%E5%85%A5%E4%BE%B5%E6%A3%80%E6%B5%8B%E6%8A%80%E6%9C%AF/</link>
      <pubDate>Wed, 10 Mar 2021 20:18:22 +0800</pubDate>
      
      <guid>https://lizonglingo.github.io/p/%E5%85%A5%E4%BE%B5%E6%A3%80%E6%B5%8B%E6%8A%80%E6%9C%AF/</guid>
      <description>概述 入侵检测是对网络传输进行即时监控，发现可疑传输时发出警报或者采取主动反应措施的网络安全技术。Intrusion Detection System入侵检测系统</description>
    </item>
    
    <item>
      <title>防火墙</title>
      <link>https://lizonglingo.github.io/p/%E9%98%B2%E7%81%AB%E5%A2%99/</link>
      <pubDate>Wed, 10 Mar 2021 13:48:28 +0800</pubDate>
      
      <guid>https://lizonglingo.github.io/p/%E9%98%B2%E7%81%AB%E5%A2%99/</guid>
      <description>防火墙概述 防火墙位于一个可信的内部网络与一个不可信的外界网络之间，用于保护内部网络免受非法用户的入侵。在内网和外网之间构筑保护层，通过网络路</description>
    </item>
    
    <item>
      <title>PKI技术</title>
      <link>https://lizonglingo.github.io/p/pki%E6%8A%80%E6%9C%AF/</link>
      <pubDate>Tue, 09 Mar 2021 09:28:11 +0800</pubDate>
      
      <guid>https://lizonglingo.github.io/p/pki%E6%8A%80%E6%9C%AF/</guid>
      <description>Public Key Infrastructure PKI技术以非对称密钥技术为基础，以数字证书为媒介，将各参与实体的标识信息与公钥绑定在一起。通过特定接口为用户提供安全服务，包括加密、</description>
    </item>
    
    <item>
      <title>Golang接口</title>
      <link>https://lizonglingo.github.io/p/golang%E6%8E%A5%E5%8F%A3/</link>
      <pubDate>Sun, 21 Feb 2021 17:37:03 +0800</pubDate>
      
      <guid>https://lizonglingo.github.io/p/golang%E6%8E%A5%E5%8F%A3/</guid>
      <description>Golang的接口特性 接口组装 兼有python、c++的灵活性 拥有java的类型检查 接口由使用者定义 接口的实现是隐式的，只要实现接口里的方法</description>
    </item>
    
    <item>
      <title>Fabric2.X的配置文件（以test-network为例）</title>
      <link>https://lizonglingo.github.io/p/fabric2.x%E7%9A%84%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E4%BB%A5test-network%E4%B8%BA%E4%BE%8B/</link>
      <pubDate>Wed, 10 Feb 2021 22:38:18 +0800</pubDate>
      
      <guid>https://lizonglingo.github.io/p/fabric2.x%E7%9A%84%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E4%BB%A5test-network%E4%B8%BA%E4%BE%8B/</guid>
      <description>Hyperledger Fabric项目可以认为是一个BaaS - Blockchain as a Service，其主要的服务是为提供企业级的联盟链基础设施，多用于商业环境。和公有链不同的是</description>
    </item>
    
    <item>
      <title>Golang的指针</title>
      <link>https://lizonglingo.github.io/p/golang%E7%9A%84%E6%8C%87%E9%92%88/</link>
      <pubDate>Sun, 07 Feb 2021 21:53:10 +0800</pubDate>
      
      <guid>https://lizonglingo.github.io/p/golang%E7%9A%84%E6%8C%87%E9%92%88/</guid>
      <description>很多主流语言中都有指针作为变量的一种，go也不例外。一方面，go保留了例如c、cpp等语言的严谨性，同时兼有python、函数式编程语言的灵</description>
    </item>
    
    <item>
      <title>$ ./network.sh up =&gt;ENTER后发生了什么？</title>
      <link>https://lizonglingo.github.io/p/network.sh-up-enter%E5%90%8E%E5%8F%91%E7%94%9F%E4%BA%86%E4%BB%80%E4%B9%88/</link>
      <pubDate>Sun, 24 Jan 2021 22:32:13 +0800</pubDate>
      
      <guid>https://lizonglingo.github.io/p/network.sh-up-enter%E5%90%8E%E5%8F%91%E7%94%9F%E4%BA%86%E4%BB%80%E4%B9%88/</guid>
      <description>Fabric2.X中，用fabric-samples替换掉原来的first-network，提供给开发人员快速上手。fabric-sampl</description>
    </item>
    
    <item>
      <title>Golang常用工具</title>
      <link>https://lizonglingo.github.io/p/golang%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/</link>
      <pubDate>Sat, 23 Jan 2021 19:35:32 +0800</pubDate>
      
      <guid>https://lizonglingo.github.io/p/golang%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/</guid>
      <description>一般格式：go command [arguments] build build 最常用的命令，用来编译go文件 跨平台编译，如env GOOS=linux GOARCH=amd64 go build在Linux系统、amd64架构编译 install install 同为编译，和</description>
    </item>
    
    <item>
      <title>Fabric2.X_fabric-samples_test-network解读</title>
      <link>https://lizonglingo.github.io/p/fabric2.x_fabric-samples_test-network%E8%A7%A3%E8%AF%BB/</link>
      <pubDate>Thu, 21 Jan 2021 20:41:47 +0800</pubDate>
      
      <guid>https://lizonglingo.github.io/p/fabric2.x_fabric-samples_test-network%E8%A7%A3%E8%AF%BB/</guid>
      <description>Fabric2.X中，fabric-samples将作为Fabric1.X中的first-network的替代。也就是说，在2.X版本及以后</description>
    </item>
    
    <item>
      <title>VMware使用宿主机的小飞机</title>
      <link>https://lizonglingo.github.io/p/vmware%E4%BD%BF%E7%94%A8%E5%AE%BF%E4%B8%BB%E6%9C%BA%E7%9A%84%E5%B0%8F%E9%A3%9E%E6%9C%BA/</link>
      <pubDate>Sun, 17 Jan 2021 19:13:49 +0800</pubDate>
      
      <guid>https://lizonglingo.github.io/p/vmware%E4%BD%BF%E7%94%A8%E5%AE%BF%E4%B8%BB%E6%9C%BA%E7%9A%84%E5%B0%8F%E9%A3%9E%E6%9C%BA/</guid>
      <description>首先，在小飞机客户端设置允许本地代理允许来自局域网的连接 然后，设置VMware的网络适配器的网络连接为桥接模式，复制连接物理网络状态，设置U</description>
    </item>
    
    <item>
      <title>Git使用</title>
      <link>https://lizonglingo.github.io/p/git%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Fri, 15 Jan 2021 23:14:56 +0800</pubDate>
      
      <guid>https://lizonglingo.github.io/p/git%E4%BD%BF%E7%94%A8/</guid>
      <description>有关git使用中的学习记录 clone速度太慢 方法一 调整http提交缓存(亲测有效，使用https方式clone) $ git config --global http.postBuffer 524288000 调整前： 调整后：</description>
    </item>
    
    <item>
      <title>bitcoin白皮书</title>
      <link>https://lizonglingo.github.io/p/bitcoin%E7%99%BD%E7%9A%AE%E4%B9%A6/</link>
      <pubDate>Mon, 11 Jan 2021 22:24:37 +0800</pubDate>
      
      <guid>https://lizonglingo.github.io/p/bitcoin%E7%99%BD%E7%9A%AE%E4%B9%A6/</guid>
      <description></description>
    </item>
    
    <item>
      <title>在二叉树中使用递归解决问题</title>
      <link>https://lizonglingo.github.io/p/%E5%9C%A8%E4%BA%8C%E5%8F%89%E6%A0%91%E4%B8%AD%E4%BD%BF%E7%94%A8%E9%80%92%E5%BD%92%E8%A7%A3%E5%86%B3%E9%97%AE%E9%A2%98/</link>
      <pubDate>Mon, 08 Jun 2020 18:05:43 +0800</pubDate>
      
      <guid>https://lizonglingo.github.io/p/%E5%9C%A8%E4%BA%8C%E5%8F%89%E6%A0%91%E4%B8%AD%E4%BD%BF%E7%94%A8%E9%80%92%E5%BD%92%E8%A7%A3%E5%86%B3%E9%97%AE%E9%A2%98/</guid>
      <description>整理自leetcode 树结点定义如下： Definition for a binary tree node. struct TreeNode { int val; struct TreeNode *left; struct TreeNode *right; }; 二叉树的最大深度 给定一个二叉树，找出其最大深度。 二叉树的深度为根节</description>
    </item>
    
    <item>
      <title>链式存储二叉树的遍历</title>
      <link>https://lizonglingo.github.io/p/%E9%93%BE%E5%BC%8F%E5%AD%98%E5%82%A8%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E9%81%8D%E5%8E%86/</link>
      <pubDate>Fri, 29 May 2020 16:27:12 +0800</pubDate>
      
      <guid>https://lizonglingo.github.io/p/%E9%93%BE%E5%BC%8F%E5%AD%98%E5%82%A8%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E9%81%8D%E5%8E%86/</guid>
      <description>先序遍历，中序遍历，后序遍历以及层次遍历。 使用递归、队列。 整理自Leetcode。 说明 使用到的树结点类型为： struct TreeNode { int val; struct TreeNode *left; struct TreeNode *right; }; 先序遍历</description>
    </item>
    
    <item>
      <title>leetcode链表初等整理</title>
      <link>https://lizonglingo.github.io/p/leetcode%E9%93%BE%E8%A1%A8%E5%88%9D%E7%AD%89%E6%95%B4%E7%90%86/</link>
      <pubDate>Mon, 25 May 2020 20:39:37 +0800</pubDate>
      
      <guid>https://lizonglingo.github.io/p/leetcode%E9%93%BE%E8%A1%A8%E5%88%9D%E7%AD%89%E6%95%B4%E7%90%86/</guid>
      <description>力扣关于链表这部分基础算法还是较为简单和基础的 没有特殊说明的情况下，链表节点类型为： struct ListNode { int val; struct ListNode *next; }; 同时，需要注意，默认的头指针head-</description>
    </item>
    
    <item>
      <title>leetcode字符串初等整理</title>
      <link>https://lizonglingo.github.io/p/leetcode%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%88%9D%E7%AD%89%E6%95%B4%E7%90%86/</link>
      <pubDate>Wed, 20 May 2020 21:35:30 +0800</pubDate>
      
      <guid>https://lizonglingo.github.io/p/leetcode%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%88%9D%E7%AD%89%E6%95%B4%E7%90%86/</guid>
      <description>反转字符串 编写一个函数，其作用是将输入的字符串反转过来。输入字符串以字符数组 char[] 的形式给出。 不要给另外的数组分配额外的空间，你必须原地修改输入</description>
    </item>
    
    <item>
      <title>leetcode数组初等整理</title>
      <link>https://lizonglingo.github.io/p/leetcode%E6%95%B0%E7%BB%84%E5%88%9D%E7%AD%89%E6%95%B4%E7%90%86/</link>
      <pubDate>Mon, 11 May 2020 19:48:37 +0800</pubDate>
      
      <guid>https://lizonglingo.github.io/p/leetcode%E6%95%B0%E7%BB%84%E5%88%9D%E7%AD%89%E6%95%B4%E7%90%86/</guid>
      <description>好久没有更新了，最近开始做了些leetcode上的算法，刚把数组基础部分做完，整理一下，全部用的C 删除排序数组中的重复项 给定一个排序数组，你</description>
    </item>
    
    <item>
      <title>leetcode线性问题合辑（数组、链表、栈、队列）</title>
      <link>https://lizonglingo.github.io/p/leetcode%E7%BA%BF%E6%80%A7%E9%97%AE%E9%A2%98%E5%90%88%E8%BE%91%E6%95%B0%E7%BB%84%E9%93%BE%E8%A1%A8%E6%A0%88%E9%98%9F%E5%88%97/</link>
      <pubDate>Sat, 22 Feb 2020 21:39:19 +0800</pubDate>
      
      <guid>https://lizonglingo.github.io/p/leetcode%E7%BA%BF%E6%80%A7%E9%97%AE%E9%A2%98%E5%90%88%E8%BE%91%E6%95%B0%E7%BB%84%E9%93%BE%E8%A1%A8%E6%A0%88%E9%98%9F%E5%88%97/</guid>
      <description>来源：力扣（LeetCode） 链接：https://leetcode-cn.com/ 著作权归领扣网络所有。商业转载请联系官方授权，非商业转载</description>
    </item>
    
    <item>
      <title>C&#43;&#43; Vector的简单说明</title>
      <link>https://lizonglingo.github.io/p/c-vector%E7%9A%84%E7%AE%80%E5%8D%95%E8%AF%B4%E6%98%8E/</link>
      <pubDate>Tue, 04 Feb 2020 00:10:31 +0800</pubDate>
      
      <guid>https://lizonglingo.github.io/p/c-vector%E7%9A%84%E7%AE%80%E5%8D%95%E8%AF%B4%E6%98%8E/</guid>
      <description>整理自wiki、菜鸟教程、W3Cschool 什么是Vector Vector 是C++标准程序库中的一个类，可视为会自动扩展容量的数组，以循序(Seque</description>
    </item>
    
    <item>
      <title>2020能不能重新开始</title>
      <link>https://lizonglingo.github.io/p/2020%E8%83%BD%E4%B8%8D%E8%83%BD%E9%87%8D%E6%96%B0%E5%BC%80%E5%A7%8B/</link>
      <pubDate>Fri, 24 Jan 2020 23:06:31 +0800</pubDate>
      
      <guid>https://lizonglingo.github.io/p/2020%E8%83%BD%E4%B8%8D%E8%83%BD%E9%87%8D%E6%96%B0%E5%BC%80%E5%A7%8B/</guid>
      <description>⏮</description>
    </item>
    
    <item>
      <title>关于</title>
      <link>https://lizonglingo.github.io/p/%E5%85%B3%E4%BA%8E/</link>
      <pubDate>Tue, 21 Jan 2020 19:09:48 +0800</pubDate>
      
      <guid>https://lizonglingo.github.io/p/%E5%85%B3%E4%BA%8E/</guid>
      <description>欢迎来到我的小站！🤝 🏠 关于本站 2020年1月21日，本站完成从coding+hexo的迁移，记住域名是lizonglin313.github</description>
    </item>
    
    <item>
      <title>常见的排序算法总结</title>
      <link>https://lizonglingo.github.io/p/%E5%B8%B8%E8%A7%81%E7%9A%84%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E6%80%BB%E7%BB%93/</link>
      <pubDate>Thu, 21 Nov 2019 19:36:24 +0800</pubDate>
      
      <guid>https://lizonglingo.github.io/p/%E5%B8%B8%E8%A7%81%E7%9A%84%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E6%80%BB%E7%BB%93/</guid>
      <description>整理常用的排序算法，主要包括： 选择排序 冒泡排序 归并排序 快速排序 插入排序 堆排序 策略以及时间开销 排序算法 基于的思想 时间开销 选择排序 蛮力法 O(n^2) 冒泡排</description>
    </item>
    
    <item>
      <title>用不同算法解决0/1背包问题</title>
      <link>https://lizonglingo.github.io/p/%E7%94%A8%E4%B8%8D%E5%90%8C%E7%AE%97%E6%B3%95%E8%A7%A3%E5%86%B30/1%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98/</link>
      <pubDate>Thu, 21 Nov 2019 14:34:04 +0800</pubDate>
      
      <guid>https://lizonglingo.github.io/p/%E7%94%A8%E4%B8%8D%E5%90%8C%E7%AE%97%E6%B3%95%E8%A7%A3%E5%86%B30/1%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98/</guid>
      <description>0/1背包问题是算法中很经典的问题，具体内容题目内容不再赘述，需要请自行搜索.. 蛮力法 思想 蛮力法的基本思想就是遍历 时间复杂度 Ω(2^n) 代码</description>
    </item>
    
    <item>
      <title>《热风》节选</title>
      <link>https://lizonglingo.github.io/p/%E7%83%AD%E9%A3%8E%E8%8A%82%E9%80%89/</link>
      <pubDate>Fri, 11 Oct 2019 22:40:02 +0800</pubDate>
      
      <guid>https://lizonglingo.github.io/p/%E7%83%AD%E9%A3%8E%E8%8A%82%E9%80%89/</guid>
      <description>所以我时常害怕，愿中国青年都摆脱冷气，只是向上走，不必听自暴自弃者流的话。能做事的做事，能发声的发声。有一分热，发一分光，就令萤火一般，也可</description>
    </item>
    
    <item>
      <title>Google Bigtable论文要点整理</title>
      <link>https://lizonglingo.github.io/p/google-bigtable%E8%AE%BA%E6%96%87%E8%A6%81%E7%82%B9%E6%95%B4%E7%90%86/</link>
      <pubDate>Mon, 07 Oct 2019 14:53:05 +0800</pubDate>
      
      <guid>https://lizonglingo.github.io/p/google-bigtable%E8%AE%BA%E6%96%87%E8%A6%81%E7%82%B9%E6%95%B4%E7%90%86/</guid>
      <description>Google Bigtable Google Bigtable论文要点整理 摘要 本质及用途 分布式的结构化数据存储系统 被设计用来处理海量数据（通常是分布在数千台普通服务器上的 PB 级的数据</description>
    </item>
    
    <item>
      <title>解决pip安装PyQt5之后Spyder无法正常打开的问题</title>
      <link>https://lizonglingo.github.io/p/%E8%A7%A3%E5%86%B3pip%E5%AE%89%E8%A3%85pyqt5%E4%B9%8B%E5%90%8Espyder%E6%97%A0%E6%B3%95%E6%AD%A3%E5%B8%B8%E6%89%93%E5%BC%80%E7%9A%84%E9%97%AE%E9%A2%98/</link>
      <pubDate>Tue, 24 Sep 2019 21:37:06 +0800</pubDate>
      
      <guid>https://lizonglingo.github.io/p/%E8%A7%A3%E5%86%B3pip%E5%AE%89%E8%A3%85pyqt5%E4%B9%8B%E5%90%8Espyder%E6%97%A0%E6%B3%95%E6%AD%A3%E5%B8%B8%E6%89%93%E5%BC%80%E7%9A%84%E9%97%AE%E9%A2%98/</guid>
      <description>开发环境 Anaconda3 + Pycharm Python3.7 报错描述 我是用的Pycharm+conda的环境进行开发的，有的时候会用到Spyder。 在我安装PyQt5后，使用Pycha</description>
    </item>
    
    <item>
      <title>使用Golang构建区块链Part7：网络</title>
      <link>https://lizonglingo.github.io/p/%E4%BD%BF%E7%94%A8golang%E6%9E%84%E5%BB%BA%E5%8C%BA%E5%9D%97%E9%93%BEpart7%E7%BD%91%E7%BB%9C/</link>
      <pubDate>Sun, 22 Sep 2019 08:38:35 +0800</pubDate>
      
      <guid>https://lizonglingo.github.io/p/%E4%BD%BF%E7%94%A8golang%E6%9E%84%E5%BB%BA%E5%8C%BA%E5%9D%97%E9%93%BEpart7%E7%BD%91%E7%BB%9C/</guid>
      <description>终于到最后一篇了~ 引言 不久之前，我们已经构建了拥有所有关键特性的区块链：匿名的、安全的并且随机产生的地址；区块链数据存储；工作量证明系统；可</description>
    </item>
    
    <item>
      <title>使用Golang构建区块链Part6：交易-2</title>
      <link>https://lizonglingo.github.io/p/%E4%BD%BF%E7%94%A8golang%E6%9E%84%E5%BB%BA%E5%8C%BA%E5%9D%97%E9%93%BEpart6%E4%BA%A4%E6%98%93-2/</link>
      <pubDate>Tue, 17 Sep 2019 12:35:12 +0800</pubDate>
      
      <guid>https://lizonglingo.github.io/p/%E4%BD%BF%E7%94%A8golang%E6%9E%84%E5%BB%BA%E5%8C%BA%E5%9D%97%E9%93%BEpart6%E4%BA%A4%E6%98%93-2/</guid>
      <description>最近事情比较多，这一篇现在才更。又开始忙起来了~在本篇文章所涉及到的代码实现中，大部分改动相比之前的在条理和逻辑上更加清晰。 引言 在本系列文章</description>
    </item>
    
    <item>
      <title>使用Golang构建区块链Part5：地址</title>
      <link>https://lizonglingo.github.io/p/%E4%BD%BF%E7%94%A8golang%E6%9E%84%E5%BB%BA%E5%8C%BA%E5%9D%97%E9%93%BEpart5%E5%9C%B0%E5%9D%80/</link>
      <pubDate>Tue, 10 Sep 2019 14:02:02 +0800</pubDate>
      
      <guid>https://lizonglingo.github.io/p/%E4%BD%BF%E7%94%A8golang%E6%9E%84%E5%BB%BA%E5%8C%BA%E5%9D%97%E9%93%BEpart5%E5%9C%B0%E5%9D%80/</guid>
      <description>这一篇断断续续做了几天才得以实现，由于文章篇幅限制，作者只将新版本代码中最重要的最有代表性的改变在博客中进行分析。但是仍然有较多的代码需要大</description>
    </item>
    
    <item>
      <title>使用Golang构建区块链Part4：交易-1</title>
      <link>https://lizonglingo.github.io/p/%E4%BD%BF%E7%94%A8golang%E6%9E%84%E5%BB%BA%E5%8C%BA%E5%9D%97%E9%93%BEpart4%E4%BA%A4%E6%98%93-1/</link>
      <pubDate>Sat, 07 Sep 2019 15:33:16 +0800</pubDate>
      
      <guid>https://lizonglingo.github.io/p/%E4%BD%BF%E7%94%A8golang%E6%9E%84%E5%BB%BA%E5%8C%BA%E5%9D%97%E9%93%BEpart4%E4%BA%A4%E6%98%93-1/</guid>
      <description>在对照实现本部分内容时，我进行的稍微困难，因为本篇中的实现代码与前面的代码相差的太多。所以，当遇到困难时，就直接去查源码。在后面会有对应代码</description>
    </item>
    
    <item>
      <title>使用Golang构建区块链Part3：持久化和命令行接口</title>
      <link>https://lizonglingo.github.io/p/%E4%BD%BF%E7%94%A8golang%E6%9E%84%E5%BB%BA%E5%8C%BA%E5%9D%97%E9%93%BEpart3%E6%8C%81%E4%B9%85%E5%8C%96%E5%92%8C%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%8E%A5%E5%8F%A3/</link>
      <pubDate>Fri, 06 Sep 2019 13:26:13 +0800</pubDate>
      
      <guid>https://lizonglingo.github.io/p/%E4%BD%BF%E7%94%A8golang%E6%9E%84%E5%BB%BA%E5%8C%BA%E5%9D%97%E9%93%BEpart3%E6%8C%81%E4%B9%85%E5%8C%96%E5%92%8C%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%8E%A5%E5%8F%A3/</guid>
      <description>介绍 到现在，我们已经构建了一个有工作量证明系统和可以挖矿的区块链。我们的实现离一个具有完整功能的区块链又进了一步，但是它仍然少一些重要的性质</description>
    </item>
    
    <item>
      <title>使用Golang构建区块链Part2：工作量证明</title>
      <link>https://lizonglingo.github.io/p/%E4%BD%BF%E7%94%A8golang%E6%9E%84%E5%BB%BA%E5%8C%BA%E5%9D%97%E9%93%BEpart2%E5%B7%A5%E4%BD%9C%E9%87%8F%E8%AF%81%E6%98%8E/</link>
      <pubDate>Wed, 04 Sep 2019 23:34:07 +0800</pubDate>
      
      <guid>https://lizonglingo.github.io/p/%E4%BD%BF%E7%94%A8golang%E6%9E%84%E5%BB%BA%E5%8C%BA%E5%9D%97%E9%93%BEpart2%E5%B7%A5%E4%BD%9C%E9%87%8F%E8%AF%81%E6%98%8E/</guid>
      <description>介绍 在前面的文章中我们构建了一个非常简单的数据结构，也是区块链数据库的精华所在。然后我们让区块链以“链式”的形式添加区块成为可能：每一个区块</description>
    </item>
    
    <item>
      <title>使用Golang构建区块链Part1：基本原型</title>
      <link>https://lizonglingo.github.io/p/%E4%BD%BF%E7%94%A8golang%E6%9E%84%E5%BB%BA%E5%8C%BA%E5%9D%97%E9%93%BEpart1%E5%9F%BA%E6%9C%AC%E5%8E%9F%E5%9E%8B/</link>
      <pubDate>Wed, 04 Sep 2019 19:41:45 +0800</pubDate>
      
      <guid>https://lizonglingo.github.io/p/%E4%BD%BF%E7%94%A8golang%E6%9E%84%E5%BB%BA%E5%8C%BA%E5%9D%97%E9%93%BEpart1%E5%9F%BA%E6%9C%AC%E5%8E%9F%E5%9E%8B/</guid>
      <description>最前面 这个系列的博客是受了AnnatarHe的启发，他将JeiWan的__《Building Blockchain in Go》__系列文章进行了翻译。于是我要半翻译</description>
    </item>
    
    <item>
      <title>书单</title>
      <link>https://lizonglingo.github.io/p/%E4%B9%A6%E5%8D%95/</link>
      <pubDate>Fri, 16 Aug 2019 22:08:30 +0800</pubDate>
      
      <guid>https://lizonglingo.github.io/p/%E4%B9%A6%E5%8D%95/</guid>
      <description>今天把CSAPP第一遍过完了，题都没做。前几章还好，到后面就有些难读下去了。第二遍好好读也要做题。晚上心血来潮整理一下整个二年级的书单，少部</description>
    </item>
    
    <item>
      <title>解决win下使用gojieba编译时的gcc报错</title>
      <link>https://lizonglingo.github.io/p/%E8%A7%A3%E5%86%B3win%E4%B8%8B%E4%BD%BF%E7%94%A8gojieba%E7%BC%96%E8%AF%91%E6%97%B6%E7%9A%84gcc%E6%8A%A5%E9%94%99/</link>
      <pubDate>Fri, 16 Aug 2019 09:29:26 +0800</pubDate>
      
      <guid>https://lizonglingo.github.io/p/%E8%A7%A3%E5%86%B3win%E4%B8%8B%E4%BD%BF%E7%94%A8gojieba%E7%BC%96%E8%AF%91%E6%97%B6%E7%9A%84gcc%E6%8A%A5%E9%94%99/</guid>
      <description>最近正在做的一个项目要在Linux环境下迁移到Windows下进行继续的开发， 结果在Windows下尝试对项目进行编译时出了问题。 问题描述 由</description>
    </item>
    
    <item>
      <title>Golang实现基础Simhash算法</title>
      <link>https://lizonglingo.github.io/p/golang%E5%AE%9E%E7%8E%B0%E5%9F%BA%E7%A1%80simhash%E7%AE%97%E6%B3%95/</link>
      <pubDate>Tue, 23 Jul 2019 21:21:02 +0800</pubDate>
      
      <guid>https://lizonglingo.github.io/p/golang%E5%AE%9E%E7%8E%B0%E5%9F%BA%E7%A1%80simhash%E7%AE%97%E6%B3%95/</guid>
      <description>Simhash来自于Google Moses Charikar发表的一篇论文 “detecting near-duplicates for web crawling” 中提出了simhash算法，专门</description>
    </item>
    
    <item>
      <title>PyQt5中文教程推荐</title>
      <link>https://lizonglingo.github.io/p/pyqt5%E4%B8%AD%E6%96%87%E6%95%99%E7%A8%8B%E6%8E%A8%E8%8D%90/</link>
      <pubDate>Mon, 15 Jul 2019 19:13:31 +0800</pubDate>
      
      <guid>https://lizonglingo.github.io/p/pyqt5%E4%B8%AD%E6%96%87%E6%95%99%E7%A8%8B%E6%8E%A8%E8%8D%90/</guid>
      <description>贴一个自己认为比较不错的PythonGUI的入门中文教程，使用的是PyQt5，我目前也在用这个入门。 PyQt5中文教程</description>
    </item>
    
    <item>
      <title>Python中的正则表达式</title>
      <link>https://lizonglingo.github.io/p/python%E4%B8%AD%E7%9A%84%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</link>
      <pubDate>Mon, 15 Jul 2019 19:13:31 +0800</pubDate>
      
      <guid>https://lizonglingo.github.io/p/python%E4%B8%AD%E7%9A%84%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</guid>
      <description>本篇主要介绍Python正则表达式的re库的基本使用方法。 本篇主要内容的整理来自于： Python-re库的官方文档 Python-0-100天</description>
    </item>
    
    <item>
      <title>解决Pycharm出现Runtime Error R6034的报错</title>
      <link>https://lizonglingo.github.io/p/%E8%A7%A3%E5%86%B3pycharm%E5%87%BA%E7%8E%B0runtime-error-r6034%E7%9A%84%E6%8A%A5%E9%94%99/</link>
      <pubDate>Fri, 21 Jun 2019 20:06:06 +0800</pubDate>
      
      <guid>https://lizonglingo.github.io/p/%E8%A7%A3%E5%86%B3pycharm%E5%87%BA%E7%8E%B0runtime-error-r6034%E7%9A%84%E6%8A%A5%E9%94%99/</guid>
      <description>时隔半年之后（这半年很少用Pycharm&amp;hellip;），我终于在 stackoverflow 上找到了解决方案。 原文： 原文链接 回答者：Michael Cooper ··· I found the solution</description>
    </item>
    
    <item>
      <title>Java期末复习提纲</title>
      <link>https://lizonglingo.github.io/p/java%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0%E6%8F%90%E7%BA%B2/</link>
      <pubDate>Wed, 05 Jun 2019 16:11:09 +0800</pubDate>
      
      <guid>https://lizonglingo.github.io/p/java%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0%E6%8F%90%E7%BA%B2/</guid>
      <description>第一章 Java开发入门 Java三个技术平台：JavaSE JavaEE JavaME Java语言的特点： 简单易用 安全可靠 跨平台 面向对象 支持多线程 什么是JDK？ Jav</description>
    </item>
    
    <item>
      <title>软件工程期末复习整理</title>
      <link>https://lizonglingo.github.io/p/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0%E6%95%B4%E7%90%86/</link>
      <pubDate>Sat, 01 Jun 2019 21:52:45 +0800</pubDate>
      
      <guid>https://lizonglingo.github.io/p/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0%E6%95%B4%E7%90%86/</guid>
      <description>第一章 软件工程概论 1. 软件危机 软件危机是指：在计算机软件的开发和维护过程中所遇到的一系列严重问题。 软件危机包含下述两方面问题： （1）如何开发软</description>
    </item>
    
    <item>
      <title>Golang实现最简单的链</title>
      <link>https://lizonglingo.github.io/p/golang%E5%AE%9E%E7%8E%B0%E6%9C%80%E7%AE%80%E5%8D%95%E7%9A%84%E9%93%BE/</link>
      <pubDate>Fri, 31 May 2019 21:14:18 +0800</pubDate>
      
      <guid>https://lizonglingo.github.io/p/golang%E5%AE%9E%E7%8E%B0%E6%9C%80%E7%AE%80%E5%8D%95%E7%9A%84%E9%93%BE/</guid>
      <description>最近一直忙于伏羲也没怎么学别的东西···今天更一点东西，一起来看看一条最简单的区块链是如何实现的。 本文转载自：Wuman&amp;rsquo;s Blog 区</description>
    </item>
    
    <item>
      <title>使用以太坊虚拟环境搭建私有链</title>
      <link>https://lizonglingo.github.io/p/%E4%BD%BF%E7%94%A8%E4%BB%A5%E5%A4%AA%E5%9D%8A%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E7%A7%81%E6%9C%89%E9%93%BE/</link>
      <pubDate>Sat, 20 Apr 2019 16:15:47 +0800</pubDate>
      
      <guid>https://lizonglingo.github.io/p/%E4%BD%BF%E7%94%A8%E4%BB%A5%E5%A4%AA%E5%9D%8A%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E7%A7%81%E6%9C%89%E9%93%BE/</guid>
      <description>很多时候，在开发中我们需要使用私有链进行测试。 本文主要讲述如何在Ubuntu系统中使用以太坊虚拟环境搭建私有链。 Geth（go-ethere</description>
    </item>
    
    <item>
      <title>浅谈“区块链&#43;版权保护”</title>
      <link>https://lizonglingo.github.io/p/%E6%B5%85%E8%B0%88%E5%8C%BA%E5%9D%97%E9%93%BE-%E7%89%88%E6%9D%83%E4%BF%9D%E6%8A%A4/</link>
      <pubDate>Mon, 01 Apr 2019 20:59:22 +0800</pubDate>
      
      <guid>https://lizonglingo.github.io/p/%E6%B5%85%E8%B0%88%E5%8C%BA%E5%9D%97%E9%93%BE-%E7%89%88%E6%9D%83%E4%BF%9D%E6%8A%A4/</guid>
      <description>​ 2008年底，一位化名“中本聪”（Satoshi nakamoto）的学者发表了区块链技术的奠基性论文《Bitcoin: A Peer-to-Peer Electronic Cash System</description>
    </item>
    
    <item>
      <title>爬取猫眼Top100</title>
      <link>https://lizonglingo.github.io/p/%E7%88%AC%E5%8F%96%E7%8C%AB%E7%9C%BCtop100/</link>
      <pubDate>Wed, 20 Mar 2019 22:14:27 +0800</pubDate>
      
      <guid>https://lizonglingo.github.io/p/%E7%88%AC%E5%8F%96%E7%8C%AB%E7%9C%BCtop100/</guid>
      <description>这是教材上的一个实例，今天学的总结一下。 首先感谢一下同老师送滴书哼 顺便推一下这本书：《Python3网路爬虫开发实战》（崔庆才） 先给代码 Pycharm +</description>
    </item>
    
    <item>
      <title>Python伪造数据生成器：Faker</title>
      <link>https://lizonglingo.github.io/p/python%E4%BC%AA%E9%80%A0%E6%95%B0%E6%8D%AE%E7%94%9F%E6%88%90%E5%99%A8faker/</link>
      <pubDate>Thu, 14 Mar 2019 12:29:45 +0800</pubDate>
      
      <guid>https://lizonglingo.github.io/p/python%E4%BC%AA%E9%80%A0%E6%95%B0%E6%8D%AE%E7%94%9F%E6%88%90%E5%99%A8faker/</guid>
      <description>本文转自前辈的文章 原文链接：Hjqjk&amp;rsquo;s Blog 我们在开发中常常需要利用一些假数据来做测试,这种时候就可以使用 Faker 来伪造数据从而用来测</description>
    </item>
    
    <item>
      <title>处理机调度图形界面1.0</title>
      <link>https://lizonglingo.github.io/p/%E5%A4%84%E7%90%86%E6%9C%BA%E8%B0%83%E5%BA%A6%E5%9B%BE%E5%BD%A2%E7%95%8C%E9%9D%A21.0/</link>
      <pubDate>Tue, 12 Mar 2019 22:59:15 +0800</pubDate>
      
      <guid>https://lizonglingo.github.io/p/%E5%A4%84%E7%90%86%E6%9C%BA%E8%B0%83%E5%BA%A6%E5%9B%BE%E5%BD%A2%E7%95%8C%E9%9D%A21.0/</guid>
      <description>处理机调度图形界面1.0版本 我一直觉得我效率很低&amp;hellip;但还是画出来了，用的PyQt5这个库做的简陋界面，很多功能缺失&amp;hellip</description>
    </item>
    
    <item>
      <title>用20行代码爬取单个图片或者视频</title>
      <link>https://lizonglingo.github.io/p/%E7%94%A820%E8%A1%8C%E4%BB%A3%E7%A0%81%E7%88%AC%E5%8F%96%E5%8D%95%E4%B8%AA%E5%9B%BE%E7%89%87%E6%88%96%E8%80%85%E8%A7%86%E9%A2%91/</link>
      <pubDate>Mon, 04 Mar 2019 22:11:11 +0800</pubDate>
      
      <guid>https://lizonglingo.github.io/p/%E7%94%A820%E8%A1%8C%E4%BB%A3%E7%A0%81%E7%88%AC%E5%8F%96%E5%8D%95%E4%B8%AA%E5%9B%BE%E7%89%87%E6%88%96%E8%80%85%E8%A7%86%E9%A2%91/</guid>
      <description>最近有跟进学习爬虫的知识，教材是《Python网络数据采集》（Ryan Mitchell）,之后配合《利用Python进行数据分析》（Wes M</description>
    </item>
    
    <item>
      <title>Python模拟操作系统处理机调度</title>
      <link>https://lizonglingo.github.io/p/python%E6%A8%A1%E6%8B%9F%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%A4%84%E7%90%86%E6%9C%BA%E8%B0%83%E5%BA%A6/</link>
      <pubDate>Tue, 19 Feb 2019 09:06:30 +0800</pubDate>
      
      <guid>https://lizonglingo.github.io/p/python%E6%A8%A1%E6%8B%9F%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%A4%84%E7%90%86%E6%9C%BA%E8%B0%83%E5%BA%A6/</guid>
      <description>拖拖拉拉，昨天终于写完核心算法，UI界面几乎没写，估计开学会被导师mao一顿。说一下python GUI大家最好不要去动TK，前些日子找官方文</description>
    </item>
    
    <item>
      <title>解决使用pip安装第三方包出现‘拒绝访问’的错误</title>
      <link>https://lizonglingo.github.io/p/%E8%A7%A3%E5%86%B3%E4%BD%BF%E7%94%A8pip%E5%AE%89%E8%A3%85%E7%AC%AC%E4%B8%89%E6%96%B9%E5%8C%85%E5%87%BA%E7%8E%B0%E6%8B%92%E7%BB%9D%E8%AE%BF%E9%97%AE%E7%9A%84%E9%94%99%E8%AF%AF/</link>
      <pubDate>Mon, 11 Feb 2019 12:59:21 +0800</pubDate>
      
      <guid>https://lizonglingo.github.io/p/%E8%A7%A3%E5%86%B3%E4%BD%BF%E7%94%A8pip%E5%AE%89%E8%A3%85%E7%AC%AC%E4%B8%89%E6%96%B9%E5%8C%85%E5%87%BA%E7%8E%B0%E6%8B%92%E7%BB%9D%E8%AE%BF%E9%97%AE%E7%9A%84%E9%94%99%E8%AF%AF/</guid>
      <description>今天准备学习使用PyQt5，但是在安装的时候出现了问题，已解决。 报错 使用pip安装PyQt5时，出现如下错误： 操作文件夹拒绝访问，也就是没有</description>
    </item>
    
    <item>
      <title>matplotlib中pyplot颜色映射参数整理</title>
      <link>https://lizonglingo.github.io/p/matplotlib%E4%B8%ADpyplot%E9%A2%9C%E8%89%B2%E6%98%A0%E5%B0%84%E5%8F%82%E6%95%B0%E6%95%B4%E7%90%86/</link>
      <pubDate>Sat, 09 Feb 2019 11:15:53 +0800</pubDate>
      
      <guid>https://lizonglingo.github.io/p/matplotlib%E4%B8%ADpyplot%E9%A2%9C%E8%89%B2%E6%98%A0%E5%B0%84%E5%8F%82%E6%95%B0%E6%95%B4%E7%90%86/</guid>
      <description>今天用到颜色映射，就顺便整理一下使用matplotlib中的pyplot经常用到的颜色映射的一些参数，转自前辈的博文 import numpy as np import matplotlib.pyplot as plt # Have colormaps separated</description>
    </item>
    
    <item>
      <title>处理机调度与死锁（二）</title>
      <link>https://lizonglingo.github.io/p/%E5%A4%84%E7%90%86%E6%9C%BA%E8%B0%83%E5%BA%A6%E4%B8%8E%E6%AD%BB%E9%94%81%E4%BA%8C/</link>
      <pubDate>Sat, 26 Jan 2019 10:24:20 +0800</pubDate>
      
      <guid>https://lizonglingo.github.io/p/%E5%A4%84%E7%90%86%E6%9C%BA%E8%B0%83%E5%BA%A6%E4%B8%8E%E6%AD%BB%E9%94%81%E4%BA%8C/</guid>
      <description>接处理机调度与死锁（一），本篇主要讲述死锁部分内容。 四.死锁概述 本节排版有些问题，可以先看本章第三部分对死锁概念的解释及定义，之后再来看第二</description>
    </item>
    
    <item>
      <title>MarkDown数学公式</title>
      <link>https://lizonglingo.github.io/p/markdown%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8F/</link>
      <pubDate>Tue, 22 Jan 2019 23:19:38 +0800</pubDate>
      
      <guid>https://lizonglingo.github.io/p/markdown%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8F/</guid>
      <description>我们在使用markdown编辑时，是会有数学公式语法的。 基本语法对照表 嵌入行内的公式用$包裹，如：行内公式展示$a = b + c$，效果为： 行内公</description>
    </item>
    
    <item>
      <title>处理机调度与死锁(一)</title>
      <link>https://lizonglingo.github.io/p/%E5%A4%84%E7%90%86%E6%9C%BA%E8%B0%83%E5%BA%A6%E4%B8%8E%E6%AD%BB%E9%94%81%E4%B8%80/</link>
      <pubDate>Tue, 22 Jan 2019 20:03:57 +0800</pubDate>
      
      <guid>https://lizonglingo.github.io/p/%E5%A4%84%E7%90%86%E6%9C%BA%E8%B0%83%E5%BA%A6%E4%B8%8E%E6%AD%BB%E9%94%81%E4%B8%80/</guid>
      <description>今天考完科目三之后接到导师的任务，关于处理机和死锁的算法问题，要求图形界面及动画演示(基于Python)。真的哭辽，完全没有头绪···在这里</description>
    </item>
    
    <item>
      <title>暂时解决Pycharm出现Runtime Error R6034的报错</title>
      <link>https://lizonglingo.github.io/p/%E6%9A%82%E6%97%B6%E8%A7%A3%E5%86%B3pycharm%E5%87%BA%E7%8E%B0runtime-error-r6034%E7%9A%84%E6%8A%A5%E9%94%99/</link>
      <pubDate>Fri, 18 Jan 2019 12:37:40 +0800</pubDate>
      
      <guid>https://lizonglingo.github.io/p/%E6%9A%82%E6%97%B6%E8%A7%A3%E5%86%B3pycharm%E5%87%BA%E7%8E%B0runtime-error-r6034%E7%9A%84%E6%8A%A5%E9%94%99/</guid>
      <description>刚放假的时候更新了Pycharm,结果以后每次打开的时候都会出现报错。没有试过重装，用了稍微有些麻烦的方法。 错误提示 打开Pycharm，等一</description>
    </item>
    
    <item>
      <title>不经意间又是一个春夏秋冬</title>
      <link>https://lizonglingo.github.io/p/%E4%B8%8D%E7%BB%8F%E6%84%8F%E9%97%B4%E5%8F%88%E6%98%AF%E4%B8%80%E4%B8%AA%E6%98%A5%E5%A4%8F%E7%A7%8B%E5%86%AC/</link>
      <pubDate>Thu, 17 Jan 2019 23:17:56 +0800</pubDate>
      
      <guid>https://lizonglingo.github.io/p/%E4%B8%8D%E7%BB%8F%E6%84%8F%E9%97%B4%E5%8F%88%E6%98%AF%E4%B8%80%E4%B8%AA%E6%98%A5%E5%A4%8F%E7%A7%8B%E5%86%AC/</guid>
      <description>今天是19年1月17日，好久之前就打算写点东西说说去年发生的故事，现在终于有时间和条件来盘了。 过去的 ​ 18年给我的感觉是信息爆炸的一年，发生</description>
    </item>
    
    <item>
      <title>C&#43;&#43;基础复习—— 继承</title>
      <link>https://lizonglingo.github.io/p/c-%E5%9F%BA%E7%A1%80%E5%A4%8D%E4%B9%A0-%E7%BB%A7%E6%89%BF/</link>
      <pubDate>Mon, 26 Nov 2018 16:54:02 +0800</pubDate>
      
      <guid>https://lizonglingo.github.io/p/c-%E5%9F%BA%E7%A1%80%E5%A4%8D%E4%B9%A0-%E7%BB%A7%E6%89%BF/</guid>
      <description>这篇是继承与派生 C++基础复习—— 继承 1.继承与派生 C++继承的几个特点： (1) 一个派生类可以有一个或多个基类，只有一个基类时，称为单继承；有多</description>
    </item>
    
    <item>
      <title>C&#43;&#43;基础复习—— 类与对象</title>
      <link>https://lizonglingo.github.io/p/c-%E5%9F%BA%E7%A1%80%E5%A4%8D%E4%B9%A0-%E7%B1%BB%E4%B8%8E%E5%AF%B9%E8%B1%A1/</link>
      <pubDate>Mon, 26 Nov 2018 16:25:57 +0800</pubDate>
      
      <guid>https://lizonglingo.github.io/p/c-%E5%9F%BA%E7%A1%80%E5%A4%8D%E4%B9%A0-%E7%B1%BB%E4%B8%8E%E5%AF%B9%E8%B1%A1/</guid>
      <description>C++期末复习随便写写加深一下印象 C++基础复习—— 类与对象 类和对象 类=数据＋操作（函数） 1.类 （1）语法： ​ class 类名{ ​ public: 函数主要在类外使用</description>
    </item>
    
  </channel>
</rss>
