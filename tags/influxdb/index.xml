<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>InfluxDB on Li Duo</title>
        <link>https://lizonglingo.github.io/tags/influxdb/</link>
        <description>Recent content in InfluxDB on Li Duo</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>zh-CN</language>
        <lastBuildDate>Wed, 20 Jul 2022 20:22:12 +0800</lastBuildDate><atom:link href="https://lizonglingo.github.io/tags/influxdb/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>InfluxDB Go Client的使用说明</title>
        <link>https://lizonglingo.github.io/p/influxdb-go-client%E7%9A%84%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/</link>
        <pubDate>Wed, 20 Jul 2022 20:22:12 +0800</pubDate>
        
        <guid>https://lizonglingo.github.io/p/influxdb-go-client%E7%9A%84%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/</guid>
        <description>&lt;h2 id=&#34;概念&#34;&gt;概念&lt;/h2&gt;
&lt;p&gt;作为目前最流行的时序数据库之一，InfluxDB常用于监控系统数据采集。在使用它之前，我们需要了解一些InfluxDB的概念。以下内容多翻译自&lt;a class=&#34;link&#34; href=&#34;https://docs.influxdata.com/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;官方文档&lt;/a&gt;。&lt;/p&gt;
&lt;h3 id=&#34;influxdb数据元素&#34;&gt;InfluxDB数据元素&lt;/h3&gt;
&lt;p&gt;以下数据元素为InfluxDB2.0版本所包含的。&lt;/p&gt;
&lt;p&gt;bucket中的数据大概长这个样子：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://picgo-lzl.oss-cn-beijing.aliyuncs.com/202207201058432.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20220720105834225&#34;
	
	
&gt;&lt;/p&gt;
&lt;h4 id=&#34;timestamp&#34;&gt;Timestamp&lt;/h4&gt;
&lt;p&gt;所有存储在InfluxDB中的数据都有一个&lt;code&gt;_time&lt;/code&gt;列来存储时间戳。时间戳存储为&lt;strong&gt;纳秒&lt;/strong&gt;的形式。其日期和时间显示格式为&lt;a class=&#34;link&#34; href=&#34;https://docs.influxdata.com/influxdb/v2.0/reference/glossary/#rfc3339-timestamp&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;RFC3339&lt;/a&gt;UTC时间，如&lt;code&gt;2020-01-01T00:00:00.00Z&lt;/code&gt;。在写入数据时，时间戳的精度很重要。&lt;/p&gt;
&lt;h4 id=&#34;measurement&#34;&gt;Measurement&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;_measurement&lt;/code&gt;列作为&lt;code&gt;tags&lt;/code&gt;、&lt;code&gt;fields&lt;/code&gt;以及&lt;code&gt;timestamps&lt;/code&gt;的容器，它是个&lt;strong&gt;字符串&lt;/strong&gt;。我们可以把它理解为&lt;strong&gt;表名&lt;/strong&gt;（如果按照关系型数据库如MySql，它更像表名，代表一张表所记录的内容），就上面的图中，可以说&lt;code&gt;_measurement census&lt;/code&gt;所代表的是对指标&lt;code&gt;bees&lt;/code&gt;、&lt;code&gt;ants&lt;/code&gt;的记录。&lt;/p&gt;
&lt;h4 id=&#34;fields&#34;&gt;Fields&lt;/h4&gt;
&lt;p&gt;一个&lt;code&gt;field&lt;/code&gt;包含一个字段&lt;strong&gt;键&lt;/strong&gt;，存储在&lt;code&gt;_field&lt;/code&gt;列中；以及一个字段&lt;strong&gt;值&lt;/strong&gt;，存储在&lt;code&gt;_value&lt;/code&gt;列中。就上面图而言，有字段&lt;code&gt;bees=23, ants=30&lt;/code&gt;等4个&lt;code&gt;fields&lt;/code&gt;。&lt;/p&gt;
&lt;h5 id=&#34;field-key&#34;&gt;Field key&lt;/h5&gt;
&lt;p&gt;字段的键表示字段名称，如&lt;code&gt;bees, ants&lt;/code&gt;这两个键。&lt;/p&gt;
&lt;h5 id=&#34;field-value&#34;&gt;Field value&lt;/h5&gt;
&lt;p&gt;字段的值。值的类型可以是&lt;code&gt;strings&lt;/code&gt;、&lt;code&gt;floats&lt;/code&gt;、&lt;code&gt;integers&lt;/code&gt;或是&lt;code&gt;booleans&lt;/code&gt;。例如，&lt;code&gt;bees&lt;/code&gt;在不同时间的值是23，28。&lt;/p&gt;
&lt;h5 id=&#34;field-set&#34;&gt;Field set&lt;/h5&gt;
&lt;p&gt;字段集合指的是同一个时间戳下面的一组键值的集合，例如时间戳&lt;code&gt;2019-08-18T00:00:00Z&lt;/code&gt;这个时间戳对应的&lt;code&gt;Field set&lt;/code&gt;为：&lt;code&gt;census bees=23,ants=30&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;需要注意的是，&lt;code&gt;Fields&lt;/code&gt;是不被索引的，因此使用&lt;code&gt;Fields&lt;/code&gt;做为查询条件是需要遍历大量的数据，造成查询效率低下。所以需要使用&lt;code&gt;tags&lt;/code&gt;做为查询条件，它会被索引。因此我们将经常需要查询的元数据放在&lt;code&gt;tags&lt;/code&gt;中，以加速查询效率。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;tags&#34;&gt;Tags&lt;/h4&gt;
&lt;p&gt;上图中的&lt;code&gt;location&lt;/code&gt;和&lt;code&gt;scientist&lt;/code&gt;以及它们对应的值都是标签。标签包含标签的键及标签的值，也是以&lt;code&gt;key-value&lt;/code&gt;形式存储。&lt;/p&gt;
&lt;h5 id=&#34;tag-key&#34;&gt;Tag key&lt;/h5&gt;
&lt;p&gt;上图中的&lt;code&gt;location&lt;/code&gt;和&lt;code&gt;scientist&lt;/code&gt;为标签的&lt;code&gt;key&lt;/code&gt;。&lt;code&gt;Tag key&lt;/code&gt;类型为&lt;code&gt;string&lt;/code&gt;。&lt;/p&gt;
&lt;h5 id=&#34;tag-value&#34;&gt;Tag value&lt;/h5&gt;
&lt;p&gt;上图中&lt;code&gt;location&lt;/code&gt;有两个值，为&lt;code&gt;klamath&lt;/code&gt;以及 &lt;code&gt;portland&lt;/code&gt;。&lt;code&gt;Tag value&lt;/code&gt;类型为&lt;code&gt;string&lt;/code&gt;。&lt;/p&gt;
&lt;h5 id=&#34;tag-set&#34;&gt;Tag set&lt;/h5&gt;
&lt;p&gt;&lt;code&gt;Tag&lt;/code&gt;键值对的集合为&lt;code&gt;Tag set&lt;/code&gt;。上图中包含的&lt;code&gt;Tag set&lt;/code&gt;包含四组标签键值对。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;location &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; klamath, scientist &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; anderson
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;location &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; portland, scientist &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; anderson
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;location &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; klamath, scientist &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; mullen
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;location &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; portland, scientist &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; mullen
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;Tags是被索引的，同时Tags也是可选的。对Tags的查询要比Fields快。&lt;/p&gt;
&lt;p&gt;那么，Tags应该如何设计以适应它常用做查询的条件呢？&lt;/p&gt;
&lt;p&gt;Tags应该包含高度可变，特殊的信息，如UUID、哈希或者随机字符串，能够在数据库中对某条记录有特殊的标识。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;bucket-schema&#34;&gt;Bucket schema&lt;/h4&gt;
&lt;p&gt;我们先来理解下为什么在InfluxDB中schema是个很重要的概念。例如我们重点查询的数据在fields中，下面是查询&lt;code&gt;bees=23&lt;/code&gt;的数据：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;from&lt;/span&gt;(bucket: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;bucket-name&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;|&amp;gt;&lt;/span&gt; range(&lt;span style=&#34;color:#66d9ef&#34;&gt;start&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;2019&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;08&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;17&lt;/span&gt;T00:&lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt;Z, stop: &lt;span style=&#34;color:#ae81ff&#34;&gt;2019&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;08&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;19&lt;/span&gt;T00:&lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt;Z)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;|&amp;gt;&lt;/span&gt; filter(fn: (r) &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; r._field &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;bees&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;and&lt;/span&gt; r._value &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;23&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;InfluxDB将会便利每一个field的值，找到所有的结果再返回。当我们的&lt;code&gt;measurement &lt;/code&gt;有几百万的数据列是，这非常花时间。&lt;/p&gt;
&lt;p&gt;因此，为了优化查询，我们可以使用&lt;code&gt;schema&lt;/code&gt;改变这些fields（如&lt;code&gt;bees&lt;/code&gt;和&lt;code&gt;ants&lt;/code&gt;），让它们变成tags，同时让原本的tags变为fields。数据就会变成下面的样子：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://picgo-lzl.oss-cn-beijing.aliyuncs.com/202207201334544.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20220720133424434&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://picgo-lzl.oss-cn-beijing.aliyuncs.com/202207201334349.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20220720133434263&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;这样就加快了数据查询效率。&lt;/p&gt;
&lt;p&gt;通常，一个有详细的&lt;code&gt;schema-type&lt;/code&gt;的bucket指的是，这个bucket中的每一个measurement都有一个明确的schema。这个schema限制了数据写入measurement的形式。&lt;/p&gt;
&lt;p&gt;例如，下面的schema用来限制measurement &lt;code&gt;census&lt;/code&gt;的数据：&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;h4 id=&#34;series&#34;&gt;Series&lt;/h4&gt;
&lt;p&gt;Serices包含&lt;strong&gt;series&lt;/strong&gt;以及&lt;strong&gt;series key&lt;/strong&gt;两个概念。&lt;/p&gt;
&lt;p&gt;首先，一个&lt;strong&gt;series key&lt;/strong&gt;是一系列点的集合，这些数据点共享同一个measurement、tag set以及field key。例如，示例数据中包含下面两个不同的&lt;strong&gt;series key&lt;/strong&gt;：&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;换句话说，一个&lt;strong&gt;series key&lt;/strong&gt;所包含数据有相同的measurement、tag set以及field key，这些数据最大的不同就是field value。这这一组相同的measurement、tag set以及field key就组成了一个series的&lt;strong&gt;series key&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;而&lt;strong&gt;series&lt;/strong&gt;是一个series key对应的数据序列，序列中的数据包含&lt;code&gt;timestamp&lt;/code&gt;以及&lt;code&gt;field value&lt;/code&gt;。下面是一对series key - series的例子：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# series key
census,location=klamath,scientist=anderson bees

# series
2019-08-18T00:00:00Z 23
2019-08-18T00:06:00Z 28   
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;好好理解Series的概念，这个对于设计如何存储数据很有帮助（如哪些数据应该存放在Fields中哪些可以放在Tags中）。&lt;/p&gt;
&lt;h4 id=&#34;point&#34;&gt;Point&lt;/h4&gt;
&lt;p&gt;一个&lt;code&gt;point&lt;/code&gt;包含一个&lt;code&gt;series key&lt;/code&gt;，一个&lt;code&gt;field value&lt;/code&gt;以及一个&lt;code&gt;timestamp&lt;/code&gt;，我们可以把它理解为一条数据记录，如&lt;code&gt;2019-08-18T00:00:00Z census ants 30 portland mullen&lt;/code&gt;。&lt;/p&gt;
&lt;h4 id=&#34;bucket&#34;&gt;Bucket&lt;/h4&gt;
&lt;p&gt;所有的InfluxDB中的数据都存储在bucket中。&lt;strong&gt;Bucket&lt;/strong&gt;结合了&lt;strong&gt;数据库&lt;/strong&gt;以及&lt;strong&gt;数据保留期&lt;/strong&gt;这两个概念。此外，一个bucket属于一个organization。&lt;/p&gt;
&lt;h4 id=&#34;organization&#34;&gt;Organization&lt;/h4&gt;
&lt;p&gt;一个organization是一个用户团体的工作空间。InfluxDB中的dashboard、tasks、buckets以及users这些概念都要属于一个organization。&lt;/p&gt;
&lt;h3 id=&#34;influxdb数据组织形式&#34;&gt;InfluxDB数据组织形式&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;原文是“data schema”，我将其理解为数据的组织形式，或是模式、规范。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;InfluxDB使用**time-structured merge tree（TSM）&lt;strong&gt;这个数据结构存储数据，同时使用了&lt;/strong&gt;time series index（TSI）**有效的压缩数据。&lt;/p&gt;
&lt;p&gt;此外，InfluxDB提供了扁平化的数据组织形式，包括下面几部分：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Annotation rows&lt;/li&gt;
&lt;li&gt;Header row&lt;/li&gt;
&lt;li&gt;Data rows&lt;/li&gt;
&lt;li&gt;Other columns&lt;/li&gt;
&lt;li&gt;Group keys&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这样的数据组织形式多用于查看原始数据、或是以CSV格式的返回数据。&lt;/p&gt;
&lt;h4 id=&#34;annotation-rows&#34;&gt;Annotation rows&lt;/h4&gt;
&lt;p&gt;注释行描述了列的熟悉，如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;#group&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;#datatype&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;#default&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;header-row&#34;&gt;Header row&lt;/h4&gt;
&lt;p&gt;标头行定义了列的标签，描述每一列数据的含义，就是列名，如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;table&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;_time&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;_value&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;_field&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;_measurement&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;还有tag key的名字，如&lt;code&gt;tag-1&lt;/code&gt;，&lt;code&gt;tag-2&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;data-rows&#34;&gt;Data rows&lt;/h4&gt;
&lt;p&gt;每个数据行包含header row所指明的数据，一行是一个&lt;strong&gt;point&lt;/strong&gt;。&lt;/p&gt;
&lt;h4 id=&#34;other-columns&#34;&gt;Other columns&lt;/h4&gt;
&lt;p&gt;下面几个列是可选的，用来附加一些数据信息：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;annotation&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;result&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;table&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;group-keys&#34;&gt;Group keys&lt;/h4&gt;
&lt;p&gt;决定数据聚合内容。关于Grouping操作看&lt;a class=&#34;link&#34; href=&#34;https://docs.influxdata.com/influxdb/v2.0/query-data/flux/group-data/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;这里&lt;/a&gt;。&lt;/p&gt;
&lt;h3 id=&#34;influxdb的设计准则&#34;&gt;InfluxDB的设计准则&lt;/h3&gt;
&lt;p&gt;了解这些设计准则，我们能够更高效的使用它，能够合理的设计我们的数据存取方法。&lt;/p&gt;
&lt;h4 id=&#34;time-ordered-data&#34;&gt;Time-ordered data&lt;/h4&gt;
&lt;p&gt;为提升性能，数据以时间升序的顺序写入。&lt;/p&gt;
&lt;h4 id=&#34;strict-update-and-delete-permissions&#34;&gt;Strict update and delete permissions&lt;/h4&gt;
&lt;p&gt;为增加查询和写入性能，InfluxDB严格限制了&lt;strong&gt;更新&lt;/strong&gt;和&lt;strong&gt;删除&lt;/strong&gt;操作的权限。它所写入的时序数据几乎都是不会修改的最新的数据。因此&lt;strong&gt;更新&lt;/strong&gt;和&lt;strong&gt;删除&lt;/strong&gt;这两个动作在时序数据库中显得有些特殊。&lt;/p&gt;
&lt;h4 id=&#34;handle-read-and-write-queries-first&#34;&gt;Handle read and write queries first&lt;/h4&gt;
&lt;p&gt;相对于强一致性而言，InfluxDB会优先处理读写请求。任何&lt;strong&gt;影响查询数据&lt;/strong&gt;的事务执行优先级都是靠后的，以确保数据的最终一致性。例如，我们写入数据的频率特别高，每毫秒要写入多条数据，那么在写数据过程中读数据，就有可能读不到最新的数据。&lt;/p&gt;
&lt;h4 id=&#34;schemaless-design&#34;&gt;Schemaless design&lt;/h4&gt;
&lt;p&gt;InfluxDB使用“schemaless”的设计来更好的管理断断续续的数据。例如，一个程序运行几十分钟然后结束了，我们所记录的数据也就在这几十分钟范围内。&lt;/p&gt;
&lt;h4 id=&#34;datasets-over-individual-points&#34;&gt;Datasets over individual points&lt;/h4&gt;
&lt;p&gt;通常讲，时序数据集整体比单个点的数据要重要。InfluxDB实现了强大的工具来聚合数据和处理大型数据集。而每条数据通过&lt;strong&gt;timestamp&lt;/strong&gt;以及&lt;strong&gt;series&lt;/strong&gt;来区分，所以InfluxDB中没有传统场景中的IDs（或者理解为主键）这一概念。&lt;/p&gt;
&lt;h4 id=&#34;duplicate-data&#34;&gt;Duplicate data&lt;/h4&gt;
&lt;p&gt;为简化冲突的解决和提高写性能，InfluxDB对&lt;strong&gt;相同的point&lt;/strong&gt;不会存储两次。如果某个point的一个新的field value被提交，InfluxDB会将该point对应的field value设置为最新的那一个。在极少数情况下数据可能会被覆盖。关于重复数据的更多信息看&lt;a class=&#34;link&#34; href=&#34;https://docs.influxdata.com/influxdb/v2.3/write-data/best-practices/duplicate-points/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;这里&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&#34;go-client&#34;&gt;Go Client&lt;/h2&gt;
&lt;p&gt;在了解InfluxDB基本的概念后，来看看如何使用Go Client对InfluxDB进行数据基本操作。&lt;/p&gt;
&lt;h3 id=&#34;初始化客户端&#34;&gt;初始化客户端&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;package&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; (
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;context&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;time&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;github.com/influxdata/influxdb-client-go/v2&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;// Create a client
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;// You can generate an API Token from the &amp;#34;API Tokens Tab&amp;#34; in the UI
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;client&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;influxdb2&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;NewClient&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;http://192.168.153.21:8086&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;fKKv_DPSO3qiiHLgn38HeTNRhRPeNMYf2zSJVoMNWIpzoQBJ7Ugmc4He-TMm7dW8Mrbt_wgIKTi2-e-_YAQMgQ==&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;// always close client at the end
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;defer&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;client&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Close&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;通常InfluxDB的服务开在&lt;code&gt;:8086&lt;/code&gt;端口，进行连接时需要使用token进行认证。需要注意最后释放客户端的连接。&lt;/p&gt;
&lt;h3 id=&#34;写数据&#34;&gt;写数据&lt;/h3&gt;
&lt;p&gt;这里我们先声明我们所属的organization以及使用的bucket。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;bucket&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;example-bucket&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;org&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;example-org&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;每一个&lt;code&gt;writeAPI&lt;/code&gt;都需要唯一的organization和bucket对来指明。特别的，有两种写API，分别是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;WriteAPI(org, bucket string) api.WriteAPI&lt;/code&gt;：异步，非阻塞&lt;/li&gt;
&lt;li&gt;&lt;code&gt;WriteAPIBlocking(org, bucket string) api.WriteAPIBlocking&lt;/code&gt;：同步，阻塞&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;推荐在有频繁的数据写入时使用异步写，使用异步写的时候有两个要点，一是buffer size，二是flush interval。如果不显式的使用&lt;code&gt;Flush()&lt;/code&gt;，那么在数据积累到buffer size或者时间满足flush interval时会将数据进行写入。&lt;/p&gt;
&lt;p&gt;以&lt;code&gt;WriteAPIBlocking&lt;/code&gt;为例，获取一个写接口。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;writeAPI&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;client&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;WriteAPIBlocking&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;org&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;bucket&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;然后进行数据写入：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;首先创建一个&lt;strong&gt;point&lt;/strong&gt;，然后使用&lt;code&gt;WritePoint&lt;/code&gt;方法预写到数据库中；&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;p&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;influxdb2&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;NewPoint&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;stat&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;map&lt;/span&gt;[&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;]&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;{&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;unit&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;temperature&amp;#34;&lt;/span&gt;},
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;map&lt;/span&gt;[&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;]&lt;span style=&#34;color:#66d9ef&#34;&gt;interface&lt;/span&gt;{}{&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;avg&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;24.5&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;max&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;45&lt;/span&gt;},
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;time&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Now&lt;/span&gt;())
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;writeAPI&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;WritePoint&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;context&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Background&lt;/span&gt;(), &lt;span style=&#34;color:#a6e22e&#34;&gt;p&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这里我们看一下&lt;code&gt;NewPoint&lt;/code&gt;对应的函数签名：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;NewPoint&lt;/span&gt;(
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;measurement&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;tags&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;map&lt;/span&gt;[&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;]&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;fields&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;map&lt;/span&gt;[&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;]&lt;span style=&#34;color:#66d9ef&#34;&gt;interface&lt;/span&gt;{},
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;ts&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;time&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Time&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;write&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Point&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;write&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;NewPoint&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;measurement&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;tags&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;fields&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;ts&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;刚好对应上前面所涉及的一些概念。再复习一下前面，对于每一个数据点，我们使用&lt;code&gt;series key&lt;/code&gt;来标定，而&lt;code&gt;series key&lt;/code&gt;包括的内容就是measurement、tag set以及field key。再加上特定的时间戳，我们就能确定唯一的数据point。&lt;/p&gt;
&lt;p&gt;除了通过实例化Point写数据，还可以使用InfluxDB Line Protocol去写数据。具体参考&lt;a class=&#34;link&#34; href=&#34;https://github.com/influxdata/influxdb-client-go&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;InfluxDB Client Go的GitHub文档&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;这里&lt;a class=&#34;link&#34; href=&#34;https://docs.influxdata.com/influxdb/v2.3/reference/syntax/line-protocol/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Line Protocol&lt;/a&gt;是基于文本格式的measurement、tag set、field set以及timestamp的数据组织形式。语法如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;//&lt;/span&gt; Syntax
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;measurement&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;[,&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;tag_key&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;=&amp;lt;&lt;/span&gt;tag_value&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;[,&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;tag_key&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;=&amp;lt;&lt;/span&gt;tag_value&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;]] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;field_key&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;=&amp;lt;&lt;/span&gt;field_value&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;[,&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;field_key&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;=&amp;lt;&lt;/span&gt;field_value&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;] [&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;timestamp&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;//&lt;/span&gt; Example
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;myMeasurement,tag1&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;value1,tag2&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;value2 fieldKey&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;fieldValue&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1556813561098000000&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;具体来说有以下元素：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;measurementName,tagKey&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;tagValue fieldKey&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;fieldValue&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1465839830100400200&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;--------------- --------------- --------------------- -------------------
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;       &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;               &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;                  &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;                    &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  Measurement       Tag &lt;span style=&#34;color:#66d9ef&#34;&gt;set&lt;/span&gt;           Field &lt;span style=&#34;color:#66d9ef&#34;&gt;set&lt;/span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;Timestamp&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;读数据&#34;&gt;读数据&lt;/h3&gt;
&lt;p&gt;读数据则使用&lt;code&gt;QueryAPI&lt;/code&gt;，利用查询语句进行数据读出。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;result&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;queryAPI&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Query&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;context&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Background&lt;/span&gt;(), &lt;span style=&#34;color:#e6db74&#34;&gt;`from(bucket:&amp;#34;&amp;lt;bucket&amp;gt;&amp;#34;)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    |&amp;gt; range(start: -1h) 
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    |&amp;gt; filter(fn: (r) =&amp;gt; r._measurement == &amp;#34;stat&amp;#34;)`&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;result&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Next&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;result&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;TableChanged&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#a6e22e&#34;&gt;fmt&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;table: %s\n&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;result&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;TableMetadata&lt;/span&gt;().&lt;span style=&#34;color:#a6e22e&#34;&gt;String&lt;/span&gt;())
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;fmt&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;value: %v\n&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;result&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Record&lt;/span&gt;().&lt;span style=&#34;color:#a6e22e&#34;&gt;Value&lt;/span&gt;())
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;result&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Err&lt;/span&gt;() &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;fmt&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;query parsing error: %s\n&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;result&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Err&lt;/span&gt;().&lt;span style=&#34;color:#a6e22e&#34;&gt;Error&lt;/span&gt;())
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;} &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    panic(&lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;参考整理&#34;&gt;参考整理&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;概念：https://docs.influxdata.com/influxdb/v2.3/reference/key-concepts/&lt;/p&gt;
&lt;p&gt;GitHub Go Client：https://github.com/influxdata/influxdb-client-go&lt;/p&gt;
&lt;p&gt;官方文档对Go Client的说明：https://docs.influxdata.com/influxdb/v2.3/api-guide/client-libraries/go/&lt;/p&gt;
&lt;p&gt;Line Protocol：https://docs.influxdata.com/influxdb/v2.3/reference/syntax/line-protocol/&lt;/p&gt;
&lt;p&gt;中文文档（版本较老）：https://jasper-zhang1.gitbooks.io/influxdb/content/Concepts/key_concepts.html&lt;/p&gt;
&lt;/blockquote&gt;
</description>
        </item>
        
    </channel>
</rss>
