<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>ML/DL on Li Duo</title>
        <link>https://lizonglingo.github.io/categories/ml/dl/</link>
        <description>Recent content in ML/DL on Li Duo</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>zh-CN</language><atom:link href="https://lizonglingo.github.io/categories/ml/dl/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>ML学习笔记</title>
        <link>https://lizonglingo.github.io/p/ml%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</link>
        <pubDate>Fri, 08 Oct 2021 12:52:45 +0800</pubDate>
        
        <guid>https://lizonglingo.github.io/p/ml%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</guid>
        <description>&lt;h1 id=&#34;吴恩达ml学习笔记&#34;&gt;吴恩达ML学习笔记&lt;/h1&gt;
&lt;h2 id=&#34;机器学习定义&#34;&gt;机器学习定义&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;计算机从经验&lt;code&gt;E&lt;/code&gt;中学习，解决任务&lt;code&gt;T&lt;/code&gt;，进行某个性能度量&lt;code&gt;P&lt;/code&gt;，通过&lt;code&gt;P&lt;/code&gt;测定在&lt;code&gt;T&lt;/code&gt;上的表现因经验&lt;code&gt;E&lt;/code&gt;而提高。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;机器学习分类&#34;&gt;机器学习分类&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Supervised learning监督学习：教会计算机做某件事情&lt;/li&gt;
&lt;li&gt;Unsupervised learning无监督学习：让计算机自己去学习&lt;/li&gt;
&lt;li&gt;Reinforcement learning强化学习&lt;/li&gt;
&lt;li&gt;Recommend systems推荐系统&lt;/li&gt;
&lt;li&gt;···&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;监督学习&#34;&gt;监督学习&lt;/h2&gt;
&lt;p&gt;给算法一个数据集，这个数据集中包含了正确的答案，并告诉计算机什么是正确的、什么是错误的（或者说数据对应的明确标签）；算法的目的是让机器给出更多正确的答案。&lt;/p&gt;
&lt;h3 id=&#34;回归问题-regression&#34;&gt;回归问题-regression&lt;/h3&gt;
&lt;p&gt;预测连续的数值属性。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;预测房价&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;单变量线性回归-linear-regression-with-one-variable&#34;&gt;单变量线性回归-Linear regression with one variable&lt;/h4&gt;
&lt;p&gt;$$
Hypothesis：			h_{\theta}(x)=\theta_0+\theta_1x
$$&lt;/p&gt;
&lt;p&gt;$$
Parameters:		\theta_0,\theta_1
$$&lt;/p&gt;
&lt;p&gt;$$
Cost Function:		J(\theta_0,\theta_1) = {1\over2m}\sum_{i=1}^m(h_{\theta}(x^{(i)})-y^{(i)})^2
$$&lt;/p&gt;
&lt;p&gt;$$
Goal: minimize_{(\theta_0,\theta_1)}J(\theta_0,\theta_1)
$$&lt;/p&gt;
&lt;p&gt;既然我们的目标是将代价函数最小化，那一个一个试参数将会非常麻烦。所以这里引入&lt;strong&gt;梯度函数&lt;/strong&gt;，快速将代价函数&lt;code&gt;J&lt;/code&gt;最小化。&lt;/p&gt;
&lt;h4 id=&#34;梯度下降算法-gradient-descent-batch&#34;&gt;梯度下降算法-Gradient descent-Batch&lt;/h4&gt;
&lt;p&gt;$$
重复直至收敛：\theta_j := \theta_j - \alpha\frac{\partial }{\partial \theta_j}J(\theta_0,\theta_1){,}{,}(for{,}{,}j=0{,}{,}and{,}{,}j=1)
$$&lt;/p&gt;
&lt;p&gt;或者换一种表达方法(同样的要进行到收敛)：
$$
\theta_0 :=\theta_0-\alpha{1\over m}\sum_{i=1}^m(h_{\theta}(x^{(i)})-y^{(i)})
$$&lt;/p&gt;
&lt;p&gt;$$
\theta_1:=\theta_1-\alpha{1\over m}\sum_{i=1}^m(h_{\theta}(x^{(i)})-y^{(i)})·x^{(i)}
$$&lt;/p&gt;
&lt;p&gt;其中：
$$
\alpha
$$
表示学习率，也就是梯度下降时我们迈出多大的步子。越小则说明梯度下降的速率越缓慢，越大则说明梯度下降的速率越迅速。&lt;/p&gt;
&lt;p&gt;梯度下降是很常用的算法，它是一个一阶的最优化算法，不仅被用在线性回归上，还被用在众多的机器学习领域中。&lt;/p&gt;
&lt;p&gt;它可以解决更一般的问题。&lt;/p&gt;
&lt;p&gt;Have some function:
$$
J(\theta_0,\theta_1,\theta_2,&amp;hellip;,\theta_n)
$$
Want:
$$
min_{(\theta_0,&amp;hellip;,\theta_n)}J(\theta_0,&amp;hellip;,\theta_n)
$$
特点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;沿着不同路线下降，会有多个局部最优解，容易陷入局部最优化&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;多元线性回归模型及梯度下降算法&#34;&gt;多元线性回归模型及梯度下降算法&lt;/h4&gt;
&lt;p&gt;$$
Hypothesis:h_\theta(x)=\theta^Tx=\theta_0x_0+\theta_1x_1+\theta_2x_2+···+\theta_nx_n
$$&lt;/p&gt;
&lt;p&gt;$$
Parameters:\theta_0,\theta_1,···,\theta_n
$$&lt;/p&gt;
&lt;p&gt;$$
Cost Function:J(\theta_0,\theta_1,···,\theta_n)={1\over2m}\sum_{i=1}^m(h_{\theta}(x^{(i)})-y^{(i)})^2
$$&lt;/p&gt;
&lt;p&gt;$$
GradientDescent:Repeat{\theta_j:=\theta_j-\alpha\frac{\partial }{\partial \theta_j}J(\theta_0,\theta_1,···,\theta_n)}
$$&lt;/p&gt;
&lt;p&gt;将&lt;code&gt;GradientDescent&lt;/code&gt;的偏导数展开，就是：
$$
\theta_j:=\theta_j-\alpha{1\over m}\sum_{i=1}^m(h_{\theta}(x^{(i)})-y^{(i)})x^{(i)}_j
$$&lt;/p&gt;
&lt;h4 id=&#34;处理梯度下降的常用技巧&#34;&gt;处理梯度下降的常用技巧&lt;/h4&gt;
&lt;h5 id=&#34;特征缩放&#34;&gt;特征缩放&lt;/h5&gt;
&lt;p&gt;如果一个问题有很多特征，这些特征的取值都处在一个相近的范围，那么梯度下降算法就能更快地收敛。&lt;/p&gt;
&lt;p&gt;特征缩放的目的是：将特征的取值约束到&lt;code&gt;-1&lt;/code&gt;到&lt;code&gt;+1&lt;/code&gt;的范围内。&lt;/p&gt;
&lt;h5 id=&#34;归一化&#34;&gt;归一化&lt;/h5&gt;
&lt;p&gt;进行如下替换，让特征值具有为0的平均值：
$$
x_i-&amp;gt;(x_i-\mu_i)
$$
其中：
$$
x_i:第i个特征
$$&lt;/p&gt;
&lt;p&gt;$$
\mu_i:第i个特征x_i的平均值
$$&lt;/p&gt;
&lt;p&gt;然后用：
$$
x_i-\mu_i\over s_i
$$
去替换特征值：
$$
x_i
$$
其中：
$$
s_i:特征x_i的规模或者说是取值范围
$$&lt;/p&gt;
&lt;h4 id=&#34;正规方程用来最小化代价函数&#34;&gt;正规方程用来最小化代价函数&lt;/h4&gt;
&lt;p&gt;除了可以使用梯度下降法求解最优代价方程的&lt;code&gt;θ&lt;/code&gt;，还可以使用最小化代价函数直接求解最优&lt;code&gt;θ&lt;/code&gt;。
$$
\theta = (X^TX)^{-1}X^Ty
$$
其中：
$$
X：特征矩阵
$$&lt;/p&gt;
&lt;p&gt;$$
y:结果向量
$$&lt;/p&gt;
&lt;p&gt;如此得到的&lt;code&gt;θ&lt;/code&gt;就可以将代价函数最小化。&lt;/p&gt;
&lt;h3 id=&#34;分类问题-classification&#34;&gt;分类问题-classification&lt;/h3&gt;
&lt;p&gt;预测离散的数值属性。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;判断肿瘤良性与否&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;logistic-regression&#34;&gt;Logistic regression&lt;/h4&gt;
&lt;p&gt;有$h_\theta(x)=g(\theta^Tx)$；其中$g(z)={1\over1+e^{-z}}$​​ ，又叫做&amp;quot;logistic function&amp;quot;或者“sigmoid function”。在这里&lt;/p&gt;
&lt;p&gt;$h_\theta(x)$预测的是在参数$\theta$、特征值$x$的条件下，$y=1$​的概率。&lt;/p&gt;
&lt;h4 id=&#34;logistic-regression-的-cost-function&#34;&gt;Logistic regression 的 cost function&lt;/h4&gt;
&lt;p&gt;与上面回归模型不同是，在使用“logistic function”后，我们的$J(\theta)$​代价函数的图像会变成“非凸”的，会存在多个局部最小值。所以我们想找一个只有一个最值的图像。这里引入逻辑回归的代价函数：&lt;/p&gt;
&lt;p&gt;整体的代价函数如下：
$$
J(\theta)={1\over m}\sum_{i=1}^mCost(h_\theta(x)^{(i)},y^{(i)})
$$&lt;/p&gt;
&lt;p&gt;其中：
$$
Cost(h_\theta(x),y) =
\begin{cases}
-log(h_\theta(x)),,,if ,, y=1\
-log(1-h_\theta(x)),,,if ,, y=0\
\end{cases}
$$
这里需要注意：$y=0 ,, or ,, 1 ,, always$​&lt;/p&gt;
&lt;p&gt;所以，$Cost(h_\theta(x),y)$又可以写成：
$$
Cost(h_\theta(x),y)=-ylog(h_\theta(x))-(1-y)log(1-h_\theta(x))
$$
最终，新的代价函数$J(\theta)$就是：
$$
J(\theta)=-{1\over m}[\sum_{i=1}^my^{(i)}log(h_\theta(x^{(i)}))+(1-y^{(i)})log(1-h_\theta(x^{(i)}))]
$$
接下来，我们仍希望去最小化代价函数，得到$min_\theta J(\theta)$。&lt;/p&gt;
&lt;p&gt;与上面回归问题相似，我们依旧使用梯度下降法：
$$
Repeat{\
\theta_j:=\theta_j-\alpha\frac{\partial }{\partial \theta_j}J(\theta) \
simulataneously,,update,,all ,,\theta_j}
$$
&lt;strong&gt;需要注意的是&lt;/strong&gt;：这里的公式看似与前面相同，但是我们对$h_{\theta}(x)$的定义发生了变化，所以这是完全不同的。&lt;/p&gt;
&lt;h2 id=&#34;无监督学习&#34;&gt;无监督学习&lt;/h2&gt;
&lt;p&gt;给算法的数据集没有明确的目的和用途，也不清楚每个数据点的意义，让计算机从中找出某种结构（比如让机器能够将数据分成若干个”簇“），&lt;/p&gt;
&lt;h3 id=&#34;聚类算法-clustering-algorithm&#34;&gt;聚类算法-clustering algorithm&lt;/h3&gt;
&lt;p&gt;告诉算法，这有一堆数据，不知道这些数据是什么、不知道谁是什么类型、甚至不知道有哪些类型（当然也无法告诉机器什么是正确答案），让机器自动找出这些数据的结构并按照得到的结构类型将这些数据个体分成”簇“&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Google news&lt;/li&gt;
&lt;li&gt;genes自动分类&lt;/li&gt;
&lt;li&gt;自动管理计算机集群&lt;/li&gt;
&lt;li&gt;社会网络分析&lt;/li&gt;
&lt;li&gt;星际数据分析&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;评估模型&#34;&gt;评估模型&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;过拟合-高方差：直接表现为训练误差大，同时交叉验证误差也很大&lt;/li&gt;
&lt;li&gt;欠拟合-高偏差：直接表现为训练 误差较小，但是交叉验证误差很大&lt;/li&gt;
&lt;li&gt;修正高方差(variance)问题：使用更多的训练样本、减少特征数量、增大正则化项系数$\lambda$的值​​&lt;/li&gt;
&lt;li&gt;修正高偏差(bias)问题：增加样本数 或 增加多项式特征、减小正则化系数$\lambda$的值&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;常见问题&#34;&gt;常见问题&lt;/h2&gt;
&lt;h3 id=&#34;过拟合问题&#34;&gt;过拟合问题&lt;/h3&gt;
&lt;p&gt;过拟合问题通常在变量过多时出现，在训练时的假设可以很好的拟合训练集，代价函数实际上很可能接近于甚至等于0，这样一来模型会千方百计的去拟合训练集，最终导致&lt;strong&gt;模型无法泛化到新的样本中&lt;/strong&gt;。&lt;/p&gt;
&lt;h4 id=&#34;如何解决过拟合&#34;&gt;如何解决过拟合&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;减少特征的数量&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;人工的去决定哪些特征变量是重要的。&lt;/li&gt;
&lt;li&gt;使用模型选择算法，让算法去决定保留哪些特征变量。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这种方法的缺点是：会舍弃一些信息，尽管这些信息是有用的。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;正则化Regularization&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;保持所有的特征变量，但是减少量级或者参数$\theta$的大小。&lt;/li&gt;
&lt;li&gt;这样就保留了所有特征变量，因为每一个变量都会对预测的模型产生或大或小的影响。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;欠拟合问题&#34;&gt;欠拟合问题&lt;/h3&gt;
&lt;p&gt;与过拟合相反。&lt;/p&gt;
&lt;h2 id=&#34;符号定义&#34;&gt;符号定义&lt;/h2&gt;
&lt;p&gt;$$
m：训练样本的数量
$$&lt;/p&gt;
&lt;p&gt;$$
x&amp;rsquo;s：输入变量，或者说是特征
$$&lt;/p&gt;
&lt;p&gt;$$
y&amp;rsquo;s：输出变量，也就是要预测的目标变量
$$&lt;/p&gt;
&lt;p&gt;$$
(x,y)：表示一个训练样本
$$&lt;/p&gt;
&lt;p&gt;$$
(x^{(i)},y^{(i)})：表示第i个训练样本
$$&lt;/p&gt;
&lt;p&gt;$$
h：假设函数(hypothesis)，接收x，尝试输出y
$$&lt;/p&gt;
&lt;p&gt;$$
假设函数h_{\theta}(x)=\theta_0+\theta_1x，那么\theta_0和\theta_1叫做模型参数
$$&lt;/p&gt;
</description>
        </item>
        <item>
        <title>ML学习笔记</title>
        <link>https://lizonglingo.github.io/p/ml%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</link>
        <pubDate>Fri, 08 Oct 2021 12:52:45 +0800</pubDate>
        
        <guid>https://lizonglingo.github.io/p/ml%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</guid>
        <description>&lt;h1 id=&#34;吴恩达ml学习笔记&#34;&gt;吴恩达ML学习笔记&lt;/h1&gt;
&lt;h2 id=&#34;机器学习定义&#34;&gt;机器学习定义&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;计算机从经验&lt;code&gt;E&lt;/code&gt;中学习，解决任务&lt;code&gt;T&lt;/code&gt;，进行某个性能度量&lt;code&gt;P&lt;/code&gt;，通过&lt;code&gt;P&lt;/code&gt;测定在&lt;code&gt;T&lt;/code&gt;上的表现因经验&lt;code&gt;E&lt;/code&gt;而提高。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;机器学习分类&#34;&gt;机器学习分类&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Supervised learning监督学习：教会计算机做某件事情&lt;/li&gt;
&lt;li&gt;Unsupervised learning无监督学习：让计算机自己去学习&lt;/li&gt;
&lt;li&gt;Reinforcement learning强化学习&lt;/li&gt;
&lt;li&gt;Recommend systems推荐系统&lt;/li&gt;
&lt;li&gt;···&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;监督学习&#34;&gt;监督学习&lt;/h2&gt;
&lt;p&gt;给算法一个数据集，这个数据集中包含了正确的答案，并告诉计算机什么是正确的、什么是错误的（或者说数据对应的明确标签）；算法的目的是让机器给出更多正确的答案。&lt;/p&gt;
&lt;h3 id=&#34;回归问题-regression&#34;&gt;回归问题-regression&lt;/h3&gt;
&lt;p&gt;预测连续的数值属性。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;预测房价&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;单变量线性回归-linear-regression-with-one-variable&#34;&gt;单变量线性回归-Linear regression with one variable&lt;/h4&gt;
&lt;p&gt;$$
Hypothesis：			h_{\theta}(x)=\theta_0+\theta_1x
$$&lt;/p&gt;
&lt;p&gt;$$
Parameters:		\theta_0,\theta_1
$$&lt;/p&gt;
&lt;p&gt;$$
Cost Function:		J(\theta_0,\theta_1) = {1\over2m}\sum_{i=1}^m(h_{\theta}(x^{(i)})-y^{(i)})^2
$$&lt;/p&gt;
&lt;p&gt;$$
Goal: minimize_{(\theta_0,\theta_1)}J(\theta_0,\theta_1)
$$&lt;/p&gt;
&lt;p&gt;既然我们的目标是将代价函数最小化，那一个一个试参数将会非常麻烦。所以这里引入&lt;strong&gt;梯度函数&lt;/strong&gt;，快速将代价函数&lt;code&gt;J&lt;/code&gt;最小化。&lt;/p&gt;
&lt;h4 id=&#34;梯度下降算法-gradient-descent-batch&#34;&gt;梯度下降算法-Gradient descent-Batch&lt;/h4&gt;
&lt;p&gt;$$
重复直至收敛：\theta_j := \theta_j - \alpha\frac{\partial }{\partial \theta_j}J(\theta_0,\theta_1){,}{,}(for{,}{,}j=0{,}{,}and{,}{,}j=1)
$$&lt;/p&gt;
&lt;p&gt;或者换一种表达方法(同样的要进行到收敛)：
$$
\theta_0 :=\theta_0-\alpha{1\over m}\sum_{i=1}^m(h_{\theta}(x^{(i)})-y^{(i)})
$$&lt;/p&gt;
&lt;p&gt;$$
\theta_1:=\theta_1-\alpha{1\over m}\sum_{i=1}^m(h_{\theta}(x^{(i)})-y^{(i)})·x^{(i)}
$$&lt;/p&gt;
&lt;p&gt;其中：
$$
\alpha
$$
表示学习率，也就是梯度下降时我们迈出多大的步子。越小则说明梯度下降的速率越缓慢，越大则说明梯度下降的速率越迅速。&lt;/p&gt;
&lt;p&gt;梯度下降是很常用的算法，它是一个一阶的最优化算法，不仅被用在线性回归上，还被用在众多的机器学习领域中。&lt;/p&gt;
&lt;p&gt;它可以解决更一般的问题。&lt;/p&gt;
&lt;p&gt;Have some function:
$$
J(\theta_0,\theta_1,\theta_2,&amp;hellip;,\theta_n)
$$
Want:
$$
min_{(\theta_0,&amp;hellip;,\theta_n)}J(\theta_0,&amp;hellip;,\theta_n)
$$
特点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;沿着不同路线下降，会有多个局部最优解，容易陷入局部最优化&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;多元线性回归模型及梯度下降算法&#34;&gt;多元线性回归模型及梯度下降算法&lt;/h4&gt;
&lt;p&gt;$$
Hypothesis:h_\theta(x)=\theta^Tx=\theta_0x_0+\theta_1x_1+\theta_2x_2+···+\theta_nx_n
$$&lt;/p&gt;
&lt;p&gt;$$
Parameters:\theta_0,\theta_1,···,\theta_n
$$&lt;/p&gt;
&lt;p&gt;$$
Cost Function:J(\theta_0,\theta_1,···,\theta_n)={1\over2m}\sum_{i=1}^m(h_{\theta}(x^{(i)})-y^{(i)})^2
$$&lt;/p&gt;
&lt;p&gt;$$
GradientDescent:Repeat{\theta_j:=\theta_j-\alpha\frac{\partial }{\partial \theta_j}J(\theta_0,\theta_1,···,\theta_n)}
$$&lt;/p&gt;
&lt;p&gt;将&lt;code&gt;GradientDescent&lt;/code&gt;的偏导数展开，就是：
$$
\theta_j:=\theta_j-\alpha{1\over m}\sum_{i=1}^m(h_{\theta}(x^{(i)})-y^{(i)})x^{(i)}_j
$$&lt;/p&gt;
&lt;h4 id=&#34;处理梯度下降的常用技巧&#34;&gt;处理梯度下降的常用技巧&lt;/h4&gt;
&lt;h5 id=&#34;特征缩放&#34;&gt;特征缩放&lt;/h5&gt;
&lt;p&gt;如果一个问题有很多特征，这些特征的取值都处在一个相近的范围，那么梯度下降算法就能更快地收敛。&lt;/p&gt;
&lt;p&gt;特征缩放的目的是：将特征的取值约束到&lt;code&gt;-1&lt;/code&gt;到&lt;code&gt;+1&lt;/code&gt;的范围内。&lt;/p&gt;
&lt;h5 id=&#34;归一化&#34;&gt;归一化&lt;/h5&gt;
&lt;p&gt;进行如下替换，让特征值具有为0的平均值：
$$
x_i-&amp;gt;(x_i-\mu_i)
$$
其中：
$$
x_i:第i个特征
$$&lt;/p&gt;
&lt;p&gt;$$
\mu_i:第i个特征x_i的平均值
$$&lt;/p&gt;
&lt;p&gt;然后用：
$$
x_i-\mu_i\over s_i
$$
去替换特征值：
$$
x_i
$$
其中：
$$
s_i:特征x_i的规模或者说是取值范围
$$&lt;/p&gt;
&lt;h4 id=&#34;正规方程用来最小化代价函数&#34;&gt;正规方程用来最小化代价函数&lt;/h4&gt;
&lt;p&gt;除了可以使用梯度下降法求解最优代价方程的&lt;code&gt;θ&lt;/code&gt;，还可以使用最小化代价函数直接求解最优&lt;code&gt;θ&lt;/code&gt;。
$$
\theta = (X^TX)^{-1}X^Ty
$$
其中：
$$
X：特征矩阵
$$&lt;/p&gt;
&lt;p&gt;$$
y:结果向量
$$&lt;/p&gt;
&lt;p&gt;如此得到的&lt;code&gt;θ&lt;/code&gt;就可以将代价函数最小化。&lt;/p&gt;
&lt;h3 id=&#34;分类问题-classification&#34;&gt;分类问题-classification&lt;/h3&gt;
&lt;p&gt;预测离散的数值属性。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;判断肿瘤良性与否&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;logistic-regression&#34;&gt;Logistic regression&lt;/h4&gt;
&lt;p&gt;有$h_\theta(x)=g(\theta^Tx)$；其中$g(z)={1\over1+e^{-z}}$​​ ，又叫做&amp;quot;logistic function&amp;quot;或者“sigmoid function”。在这里&lt;/p&gt;
&lt;p&gt;$h_\theta(x)$预测的是在参数$\theta$、特征值$x$的条件下，$y=1$​的概率。&lt;/p&gt;
&lt;h4 id=&#34;logistic-regression-的-cost-function&#34;&gt;Logistic regression 的 cost function&lt;/h4&gt;
&lt;p&gt;与上面回归模型不同是，在使用“logistic function”后，我们的$J(\theta)$​代价函数的图像会变成“非凸”的，会存在多个局部最小值。所以我们想找一个只有一个最值的图像。这里引入逻辑回归的代价函数：&lt;/p&gt;
&lt;p&gt;整体的代价函数如下：
$$
J(\theta)={1\over m}\sum_{i=1}^mCost(h_\theta(x)^{(i)},y^{(i)})
$$&lt;/p&gt;
&lt;p&gt;其中：
$$
Cost(h_\theta(x),y) =
\begin{cases}
-log(h_\theta(x)),,,if ,, y=1\
-log(1-h_\theta(x)),,,if ,, y=0\
\end{cases}
$$
这里需要注意：$y=0 ,, or ,, 1 ,, always$​&lt;/p&gt;
&lt;p&gt;所以，$Cost(h_\theta(x),y)$又可以写成：
$$
Cost(h_\theta(x),y)=-ylog(h_\theta(x))-(1-y)log(1-h_\theta(x))
$$
最终，新的代价函数$J(\theta)$就是：
$$
J(\theta)=-{1\over m}[\sum_{i=1}^my^{(i)}log(h_\theta(x^{(i)}))+(1-y^{(i)})log(1-h_\theta(x^{(i)}))]
$$
接下来，我们仍希望去最小化代价函数，得到$min_\theta J(\theta)$。&lt;/p&gt;
&lt;p&gt;与上面回归问题相似，我们依旧使用梯度下降法：
$$
Repeat{\
\theta_j:=\theta_j-\alpha\frac{\partial }{\partial \theta_j}J(\theta) \
simulataneously,,update,,all ,,\theta_j}
$$
&lt;strong&gt;需要注意的是&lt;/strong&gt;：这里的公式看似与前面相同，但是我们对$h_{\theta}(x)$的定义发生了变化，所以这是完全不同的。&lt;/p&gt;
&lt;h2 id=&#34;无监督学习&#34;&gt;无监督学习&lt;/h2&gt;
&lt;p&gt;给算法的数据集没有明确的目的和用途，也不清楚每个数据点的意义，让计算机从中找出某种结构（比如让机器能够将数据分成若干个”簇“），&lt;/p&gt;
&lt;h3 id=&#34;聚类算法-clustering-algorithm&#34;&gt;聚类算法-clustering algorithm&lt;/h3&gt;
&lt;p&gt;告诉算法，这有一堆数据，不知道这些数据是什么、不知道谁是什么类型、甚至不知道有哪些类型（当然也无法告诉机器什么是正确答案），让机器自动找出这些数据的结构并按照得到的结构类型将这些数据个体分成”簇“&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Google news&lt;/li&gt;
&lt;li&gt;genes自动分类&lt;/li&gt;
&lt;li&gt;自动管理计算机集群&lt;/li&gt;
&lt;li&gt;社会网络分析&lt;/li&gt;
&lt;li&gt;星际数据分析&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;评估模型&#34;&gt;评估模型&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;过拟合-高方差：直接表现为训练误差大，同时交叉验证误差也很大&lt;/li&gt;
&lt;li&gt;欠拟合-高偏差：直接表现为训练 误差较小，但是交叉验证误差很大&lt;/li&gt;
&lt;li&gt;修正高方差(variance)问题：使用更多的训练样本、减少特征数量、增大正则化项系数$\lambda$的值​​&lt;/li&gt;
&lt;li&gt;修正高偏差(bias)问题：增加样本数 或 增加多项式特征、减小正则化系数$\lambda$的值&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;常见问题&#34;&gt;常见问题&lt;/h2&gt;
&lt;h3 id=&#34;过拟合问题&#34;&gt;过拟合问题&lt;/h3&gt;
&lt;p&gt;过拟合问题通常在变量过多时出现，在训练时的假设可以很好的拟合训练集，代价函数实际上很可能接近于甚至等于0，这样一来模型会千方百计的去拟合训练集，最终导致&lt;strong&gt;模型无法泛化到新的样本中&lt;/strong&gt;。&lt;/p&gt;
&lt;h4 id=&#34;如何解决过拟合&#34;&gt;如何解决过拟合&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;减少特征的数量&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;人工的去决定哪些特征变量是重要的。&lt;/li&gt;
&lt;li&gt;使用模型选择算法，让算法去决定保留哪些特征变量。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这种方法的缺点是：会舍弃一些信息，尽管这些信息是有用的。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;正则化Regularization&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;保持所有的特征变量，但是减少量级或者参数$\theta$的大小。&lt;/li&gt;
&lt;li&gt;这样就保留了所有特征变量，因为每一个变量都会对预测的模型产生或大或小的影响。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;欠拟合问题&#34;&gt;欠拟合问题&lt;/h3&gt;
&lt;p&gt;与过拟合相反。&lt;/p&gt;
&lt;h2 id=&#34;符号定义&#34;&gt;符号定义&lt;/h2&gt;
&lt;p&gt;$$
m：训练样本的数量
$$&lt;/p&gt;
&lt;p&gt;$$
x&amp;rsquo;s：输入变量，或者说是特征
$$&lt;/p&gt;
&lt;p&gt;$$
y&amp;rsquo;s：输出变量，也就是要预测的目标变量
$$&lt;/p&gt;
&lt;p&gt;$$
(x,y)：表示一个训练样本
$$&lt;/p&gt;
&lt;p&gt;$$
(x^{(i)},y^{(i)})：表示第i个训练样本
$$&lt;/p&gt;
&lt;p&gt;$$
h：假设函数(hypothesis)，接收x，尝试输出y
$$&lt;/p&gt;
&lt;p&gt;$$
假设函数h_{\theta}(x)=\theta_0+\theta_1x，那么\theta_0和\theta_1叫做模型参数
$$&lt;/p&gt;
</description>
        </item>
        
    </channel>
</rss>
