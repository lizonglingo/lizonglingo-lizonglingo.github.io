<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Golang on Li Duo</title>
    <link>https://lizonglingo.github.io/categories/golang/</link>
    <description>Recent content in Golang on Li Duo</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Wed, 20 Jul 2022 20:22:12 +0800</lastBuildDate><atom:link href="https://lizonglingo.github.io/categories/golang/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>InfluxDB Go Client的使用说明</title>
      <link>https://lizonglingo.github.io/p/influxdb-go-client%E7%9A%84%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/</link>
      <pubDate>Wed, 20 Jul 2022 20:22:12 +0800</pubDate>
      
      <guid>https://lizonglingo.github.io/p/influxdb-go-client%E7%9A%84%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/</guid>
      <description>概念 作为目前最流行的时序数据库之一，InfluxDB常用于监控系统数据采集。在使用它之前，我们需要了解一些InfluxDB的概念。以下内容多</description>
    </item>
    
    <item>
      <title>gorm的常见坑</title>
      <link>https://lizonglingo.github.io/p/gorm%E7%9A%84%E5%B8%B8%E8%A7%81%E5%9D%91/</link>
      <pubDate>Sun, 03 Jul 2022 18:46:20 +0800</pubDate>
      
      <guid>https://lizonglingo.github.io/p/gorm%E7%9A%84%E5%B8%B8%E8%A7%81%E5%9D%91/</guid>
      <description>详情请查阅gorm文档 模型定义 通常在定义一个gorm的数据库表模型时，会内嵌gorm.Model类型。 type User struct { gorm.Model // use gorm.Model Name string } // Model a basic GoLang struct which includes</description>
    </item>
    
    <item>
      <title>Go的并发与任务控制</title>
      <link>https://lizonglingo.github.io/p/go%E7%9A%84%E5%B9%B6%E5%8F%91%E4%B8%8E%E4%BB%BB%E5%8A%A1%E6%8E%A7%E5%88%B6/</link>
      <pubDate>Sat, 16 Oct 2021 16:26:45 +0800</pubDate>
      
      <guid>https://lizonglingo.github.io/p/go%E7%9A%84%E5%B9%B6%E5%8F%91%E4%B8%8E%E4%BB%BB%E5%8A%A1%E6%8E%A7%E5%88%B6/</guid>
      <description>goroutine和channel 在golang中，使用goroutine创建轻量级线程（协程），用来独立执行任务，实现并发操作。使用gor</description>
    </item>
    
    <item>
      <title>读《Go Web编程》的一些笔记</title>
      <link>https://lizonglingo.github.io/p/%E8%AF%BBgo-web%E7%BC%96%E7%A8%8B%E7%9A%84%E4%B8%80%E4%BA%9B%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Fri, 15 Oct 2021 08:19:54 +0800</pubDate>
      
      <guid>https://lizonglingo.github.io/p/%E8%AF%BBgo-web%E7%BC%96%E7%A8%8B%E7%9A%84%E4%B8%80%E4%BA%9B%E7%AC%94%E8%AE%B0/</guid>
      <description>这本书主要讲了使用golang原生的net/http包开发Web应用，后面也强调了使用goroutine和channel实现并发处理，提高W</description>
    </item>
    
    <item>
      <title>Go的匿名函数(闭包)</title>
      <link>https://lizonglingo.github.io/p/go%E7%9A%84%E5%8C%BF%E5%90%8D%E5%87%BD%E6%95%B0%E9%97%AD%E5%8C%85/</link>
      <pubDate>Mon, 11 Oct 2021 20:22:15 +0800</pubDate>
      
      <guid>https://lizonglingo.github.io/p/go%E7%9A%84%E5%8C%BF%E5%90%8D%E5%87%BD%E6%95%B0%E9%97%AD%E5%8C%85/</guid>
      <description>感觉今天应该是对匿名函数的使用开窍了:smiley: 概念 《Go语言圣经》 使用匿名函数可以访问完整的词法环境，也就是在函数中定义的内部函数可以</description>
    </item>
    
    <item>
      <title>Go Web基础</title>
      <link>https://lizonglingo.github.io/p/go-web%E5%9F%BA%E7%A1%80/</link>
      <pubDate>Mon, 11 Oct 2021 12:53:57 +0800</pubDate>
      
      <guid>https://lizonglingo.github.io/p/go-web%E5%9F%BA%E7%A1%80/</guid>
      <description>处理器和处理器函数 处理器是一个拥有ServeHTTP方法的接口 接收两个参数：ResponseWriter接口和指向Request结构的指针 也</description>
    </item>
    
    <item>
      <title>关于Handle、HandleFunc、Handler和HandlerFunc</title>
      <link>https://lizonglingo.github.io/p/%E5%85%B3%E4%BA%8Ehandlehandlefunchandler%E5%92%8Chandlerfunc/</link>
      <pubDate>Thu, 07 Oct 2021 16:39:17 +0800</pubDate>
      
      <guid>https://lizonglingo.github.io/p/%E5%85%B3%E4%BA%8Ehandlehandlefunchandler%E5%92%8Chandlerfunc/</guid>
      <description>这篇文章很大程度上解决了我对golang的net\http中Handle、HandleFunc、Handler和HandlerFunc的疑惑</description>
    </item>
    
    <item>
      <title>Golang Jsonrpc Demo</title>
      <link>https://lizonglingo.github.io/p/golang-jsonrpc-demo/</link>
      <pubDate>Fri, 20 Aug 2021 15:33:42 +0800</pubDate>
      
      <guid>https://lizonglingo.github.io/p/golang-jsonrpc-demo/</guid>
      <description>RPC RPC（Remote Procedure Call）远程过程调用在分布式技术中常常用到例如Hyperledger Fabric中内部节点通信就用到了RPC，还有</description>
    </item>
    
    <item>
      <title>Golang接口</title>
      <link>https://lizonglingo.github.io/p/golang%E6%8E%A5%E5%8F%A3/</link>
      <pubDate>Sun, 21 Feb 2021 17:37:03 +0800</pubDate>
      
      <guid>https://lizonglingo.github.io/p/golang%E6%8E%A5%E5%8F%A3/</guid>
      <description>Golang的接口特性 接口组装 兼有python、c++的灵活性 拥有java的类型检查 接口由使用者定义 接口的实现是隐式的，只要实现接口里的方法</description>
    </item>
    
    <item>
      <title>Golang的指针</title>
      <link>https://lizonglingo.github.io/p/golang%E7%9A%84%E6%8C%87%E9%92%88/</link>
      <pubDate>Sun, 07 Feb 2021 21:53:10 +0800</pubDate>
      
      <guid>https://lizonglingo.github.io/p/golang%E7%9A%84%E6%8C%87%E9%92%88/</guid>
      <description>很多主流语言中都有指针作为变量的一种，go也不例外。一方面，go保留了例如c、cpp等语言的严谨性，同时兼有python、函数式编程语言的灵</description>
    </item>
    
    <item>
      <title>Golang常用工具</title>
      <link>https://lizonglingo.github.io/p/golang%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/</link>
      <pubDate>Sat, 23 Jan 2021 19:35:32 +0800</pubDate>
      
      <guid>https://lizonglingo.github.io/p/golang%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/</guid>
      <description>一般格式：go command [arguments] build build 最常用的命令，用来编译go文件 跨平台编译，如env GOOS=linux GOARCH=amd64 go build在Linux系统、amd64架构编译 install install 同为编译，和</description>
    </item>
    
    <item>
      <title>使用Golang构建区块链Part7：网络</title>
      <link>https://lizonglingo.github.io/p/%E4%BD%BF%E7%94%A8golang%E6%9E%84%E5%BB%BA%E5%8C%BA%E5%9D%97%E9%93%BEpart7%E7%BD%91%E7%BB%9C/</link>
      <pubDate>Sun, 22 Sep 2019 08:38:35 +0800</pubDate>
      
      <guid>https://lizonglingo.github.io/p/%E4%BD%BF%E7%94%A8golang%E6%9E%84%E5%BB%BA%E5%8C%BA%E5%9D%97%E9%93%BEpart7%E7%BD%91%E7%BB%9C/</guid>
      <description>终于到最后一篇了~ 引言 不久之前，我们已经构建了拥有所有关键特性的区块链：匿名的、安全的并且随机产生的地址；区块链数据存储；工作量证明系统；可</description>
    </item>
    
    <item>
      <title>使用Golang构建区块链Part6：交易-2</title>
      <link>https://lizonglingo.github.io/p/%E4%BD%BF%E7%94%A8golang%E6%9E%84%E5%BB%BA%E5%8C%BA%E5%9D%97%E9%93%BEpart6%E4%BA%A4%E6%98%93-2/</link>
      <pubDate>Tue, 17 Sep 2019 12:35:12 +0800</pubDate>
      
      <guid>https://lizonglingo.github.io/p/%E4%BD%BF%E7%94%A8golang%E6%9E%84%E5%BB%BA%E5%8C%BA%E5%9D%97%E9%93%BEpart6%E4%BA%A4%E6%98%93-2/</guid>
      <description>最近事情比较多，这一篇现在才更。又开始忙起来了~在本篇文章所涉及到的代码实现中，大部分改动相比之前的在条理和逻辑上更加清晰。 引言 在本系列文章</description>
    </item>
    
    <item>
      <title>使用Golang构建区块链Part5：地址</title>
      <link>https://lizonglingo.github.io/p/%E4%BD%BF%E7%94%A8golang%E6%9E%84%E5%BB%BA%E5%8C%BA%E5%9D%97%E9%93%BEpart5%E5%9C%B0%E5%9D%80/</link>
      <pubDate>Tue, 10 Sep 2019 14:02:02 +0800</pubDate>
      
      <guid>https://lizonglingo.github.io/p/%E4%BD%BF%E7%94%A8golang%E6%9E%84%E5%BB%BA%E5%8C%BA%E5%9D%97%E9%93%BEpart5%E5%9C%B0%E5%9D%80/</guid>
      <description>这一篇断断续续做了几天才得以实现，由于文章篇幅限制，作者只将新版本代码中最重要的最有代表性的改变在博客中进行分析。但是仍然有较多的代码需要大</description>
    </item>
    
    <item>
      <title>使用Golang构建区块链Part4：交易-1</title>
      <link>https://lizonglingo.github.io/p/%E4%BD%BF%E7%94%A8golang%E6%9E%84%E5%BB%BA%E5%8C%BA%E5%9D%97%E9%93%BEpart4%E4%BA%A4%E6%98%93-1/</link>
      <pubDate>Sat, 07 Sep 2019 15:33:16 +0800</pubDate>
      
      <guid>https://lizonglingo.github.io/p/%E4%BD%BF%E7%94%A8golang%E6%9E%84%E5%BB%BA%E5%8C%BA%E5%9D%97%E9%93%BEpart4%E4%BA%A4%E6%98%93-1/</guid>
      <description>在对照实现本部分内容时，我进行的稍微困难，因为本篇中的实现代码与前面的代码相差的太多。所以，当遇到困难时，就直接去查源码。在后面会有对应代码</description>
    </item>
    
    <item>
      <title>使用Golang构建区块链Part3：持久化和命令行接口</title>
      <link>https://lizonglingo.github.io/p/%E4%BD%BF%E7%94%A8golang%E6%9E%84%E5%BB%BA%E5%8C%BA%E5%9D%97%E9%93%BEpart3%E6%8C%81%E4%B9%85%E5%8C%96%E5%92%8C%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%8E%A5%E5%8F%A3/</link>
      <pubDate>Fri, 06 Sep 2019 13:26:13 +0800</pubDate>
      
      <guid>https://lizonglingo.github.io/p/%E4%BD%BF%E7%94%A8golang%E6%9E%84%E5%BB%BA%E5%8C%BA%E5%9D%97%E9%93%BEpart3%E6%8C%81%E4%B9%85%E5%8C%96%E5%92%8C%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%8E%A5%E5%8F%A3/</guid>
      <description>介绍 到现在，我们已经构建了一个有工作量证明系统和可以挖矿的区块链。我们的实现离一个具有完整功能的区块链又进了一步，但是它仍然少一些重要的性质</description>
    </item>
    
    <item>
      <title>使用Golang构建区块链Part2：工作量证明</title>
      <link>https://lizonglingo.github.io/p/%E4%BD%BF%E7%94%A8golang%E6%9E%84%E5%BB%BA%E5%8C%BA%E5%9D%97%E9%93%BEpart2%E5%B7%A5%E4%BD%9C%E9%87%8F%E8%AF%81%E6%98%8E/</link>
      <pubDate>Wed, 04 Sep 2019 23:34:07 +0800</pubDate>
      
      <guid>https://lizonglingo.github.io/p/%E4%BD%BF%E7%94%A8golang%E6%9E%84%E5%BB%BA%E5%8C%BA%E5%9D%97%E9%93%BEpart2%E5%B7%A5%E4%BD%9C%E9%87%8F%E8%AF%81%E6%98%8E/</guid>
      <description>介绍 在前面的文章中我们构建了一个非常简单的数据结构，也是区块链数据库的精华所在。然后我们让区块链以“链式”的形式添加区块成为可能：每一个区块</description>
    </item>
    
    <item>
      <title>使用Golang构建区块链Part1：基本原型</title>
      <link>https://lizonglingo.github.io/p/%E4%BD%BF%E7%94%A8golang%E6%9E%84%E5%BB%BA%E5%8C%BA%E5%9D%97%E9%93%BEpart1%E5%9F%BA%E6%9C%AC%E5%8E%9F%E5%9E%8B/</link>
      <pubDate>Wed, 04 Sep 2019 19:41:45 +0800</pubDate>
      
      <guid>https://lizonglingo.github.io/p/%E4%BD%BF%E7%94%A8golang%E6%9E%84%E5%BB%BA%E5%8C%BA%E5%9D%97%E9%93%BEpart1%E5%9F%BA%E6%9C%AC%E5%8E%9F%E5%9E%8B/</guid>
      <description>最前面 这个系列的博客是受了AnnatarHe的启发，他将JeiWan的__《Building Blockchain in Go》__系列文章进行了翻译。于是我要半翻译</description>
    </item>
    
    <item>
      <title>解决win下使用gojieba编译时的gcc报错</title>
      <link>https://lizonglingo.github.io/p/%E8%A7%A3%E5%86%B3win%E4%B8%8B%E4%BD%BF%E7%94%A8gojieba%E7%BC%96%E8%AF%91%E6%97%B6%E7%9A%84gcc%E6%8A%A5%E9%94%99/</link>
      <pubDate>Fri, 16 Aug 2019 09:29:26 +0800</pubDate>
      
      <guid>https://lizonglingo.github.io/p/%E8%A7%A3%E5%86%B3win%E4%B8%8B%E4%BD%BF%E7%94%A8gojieba%E7%BC%96%E8%AF%91%E6%97%B6%E7%9A%84gcc%E6%8A%A5%E9%94%99/</guid>
      <description>最近正在做的一个项目要在Linux环境下迁移到Windows下进行继续的开发， 结果在Windows下尝试对项目进行编译时出了问题。 问题描述 由</description>
    </item>
    
    <item>
      <title>Golang实现基础Simhash算法</title>
      <link>https://lizonglingo.github.io/p/golang%E5%AE%9E%E7%8E%B0%E5%9F%BA%E7%A1%80simhash%E7%AE%97%E6%B3%95/</link>
      <pubDate>Tue, 23 Jul 2019 21:21:02 +0800</pubDate>
      
      <guid>https://lizonglingo.github.io/p/golang%E5%AE%9E%E7%8E%B0%E5%9F%BA%E7%A1%80simhash%E7%AE%97%E6%B3%95/</guid>
      <description>Simhash来自于Google Moses Charikar发表的一篇论文 “detecting near-duplicates for web crawling” 中提出了simhash算法，专门</description>
    </item>
    
    <item>
      <title>Golang实现最简单的链</title>
      <link>https://lizonglingo.github.io/p/golang%E5%AE%9E%E7%8E%B0%E6%9C%80%E7%AE%80%E5%8D%95%E7%9A%84%E9%93%BE/</link>
      <pubDate>Fri, 31 May 2019 21:14:18 +0800</pubDate>
      
      <guid>https://lizonglingo.github.io/p/golang%E5%AE%9E%E7%8E%B0%E6%9C%80%E7%AE%80%E5%8D%95%E7%9A%84%E9%93%BE/</guid>
      <description>最近一直忙于伏羲也没怎么学别的东西···今天更一点东西，一起来看看一条最简单的区块链是如何实现的。 本文转载自：Wuman&amp;rsquo;s Blog 区</description>
    </item>
    
  </channel>
</rss>
