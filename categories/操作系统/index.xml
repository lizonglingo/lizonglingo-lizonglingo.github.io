<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>操作系统 on fmt.Println(&#34;Li Duo&#34;)</title>
        <link>https://lizonglingo.github.io/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/</link>
        <description>Recent content in 操作系统 on fmt.Println(&#34;Li Duo&#34;)</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>zh-CN</language>
        <lastBuildDate>Sun, 09 Jul 2023 23:35:19 +0800</lastBuildDate><atom:link href="https://lizonglingo.github.io/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>容器镜像根目录可见范围的实践</title>
        <link>https://lizonglingo.github.io/p/%E5%AE%B9%E5%99%A8%E9%95%9C%E5%83%8F%E6%A0%B9%E7%9B%AE%E5%BD%95%E5%8F%AF%E8%A7%81%E8%8C%83%E5%9B%B4%E7%9A%84%E5%AE%9E%E8%B7%B5/</link>
        <pubDate>Sun, 09 Jul 2023 23:35:19 +0800</pubDate>
        
        <guid>https://lizonglingo.github.io/p/%E5%AE%B9%E5%99%A8%E9%95%9C%E5%83%8F%E6%A0%B9%E7%9B%AE%E5%BD%95%E5%8F%AF%E8%A7%81%E8%8C%83%E5%9B%B4%E7%9A%84%E5%AE%9E%E8%B7%B5/</guid>
        <description>&lt;img src="https://picgo-lzl.oss-cn-beijing.aliyuncs.com/202307092351270.png" alt="Featured image of post 容器镜像根目录可见范围的实践" /&gt;&lt;p&gt;在使用容器过程中，我们都知道进入容器后，根目录会变化。在容器中看不到容器外的目录和文件，这本质上是命名空间隔离带来的能力。&lt;/p&gt;
&lt;p&gt;对于容器镜像的结构，通常我们用只读层、读写层来表示不同层级在读写能力上的限制。使用 Docker 或者 Kubernetes 时，使用挂载 “卷” 来进行数据持久化，也就是保留容器中数据的变化，实现读写能力。而容器中本身带有的文件、目录，在销毁容器、重启容器后，它们又会恢复到最初的样子。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://picgo-lzl.oss-cn-beijing.aliyuncs.com/202307092139782.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20230709213920094&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;本文使用Linux自带的一些工具来模拟容器中文件系统隔离的特性，将进程的根目录进行替换，替换成我们想给它指定的目录。&lt;/p&gt;
&lt;h2 id=&#34;mount--命名空间&#34;&gt;mount  命名空间&lt;/h2&gt;
&lt;p&gt;mount 命名空间隔离了每个进程可以看到的挂载目录。不同 mount 命名空间中的进程看到、控制的目录都可以是不同的。&lt;/p&gt;
&lt;p&gt;mount 命名空间中有两个重要的概念：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;“共享子树”，它用来解决挂载、卸载事件在不同的 mount namespace 中&lt;strong&gt;自动、可控&lt;/strong&gt;的传递；&lt;/li&gt;
&lt;li&gt;“对等组”，对等组是一组挂载点，本次实践涉及到共享子树中 &lt;code&gt;MS_SHARED&lt;/code&gt; 和 &lt;code&gt;MS_PRIVATE&lt;/code&gt; 两种传递类型，它们之间的含义是相反的，前者会和对等组共享挂载和卸载。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;其中，我觉得难理解的、重要的地方就是 &lt;code&gt;MS_SHARED&lt;/code&gt; 和 &lt;code&gt;MS_PRIVATE&lt;/code&gt; 这两种不同的挂载点传递类型：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;MS_SHARED&lt;/code&gt;：该挂载点和它的“对等组”共享挂载和卸载事件。当一个挂载点被删除或者添加到namespace中，这些事件会被传递到它的对等组。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;MS_PRIVATE&lt;/code&gt;:  和共享挂载相反，标记为private的事件不会传递到任何的对等组。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这样一来，就能够控制容器中的文件系统的挂载是不是可以影响到其他mount 命名空间了。&lt;/p&gt;
&lt;h2 id=&#34;环境&#34;&gt;环境&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;OS：Ubuntu22.04 5.19.0-46-generic&lt;/li&gt;
&lt;li&gt;需要使用的命令：&lt;code&gt;pivot_root&lt;/code&gt;，&lt;code&gt;unshare&lt;/code&gt;，&lt;code&gt;mount&lt;/code&gt; 等&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;实践&#34;&gt;实践&lt;/h2&gt;
&lt;p&gt;我们先看一下 OS 本身的根目录：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;root@dev:/# ls
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;bin   cdrom  etc   lib    lib64   lost+found  mnt             opt   root  sbin  srv       sys  usr  workplace
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;boot  dev    home  lib32  libx32  media       namespace-feat  proc  run   snap  swapfile  tmp  var
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;我们最终要将这个 ssh 连接的 &lt;code&gt;bash&lt;/code&gt; 进程的 &lt;code&gt;mount&lt;/code&gt; 命名空间根目录变为在网上下载的 Ubuntu22.04 的 &lt;code&gt;base&lt;/code&gt; 版本的目录。这里将其&lt;a class=&#34;link&#34; href=&#34;https://mirrors.tuna.tsinghua.edu.cn/ubuntu-cdimage/ubuntu-base/releases/22.04/release/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;下载&lt;/a&gt;并进行解压。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://picgo-lzl.oss-cn-beijing.aliyuncs.com/202307092149186.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20230709214918828&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;我这里把他解压放在这个目录中：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;root@dev:/workplace/namespace-feat/mock-rootfs# ls
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ubuntu-base-22.04-base-amd64
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;pivot_root&#34;&gt;pivot_root&lt;/h3&gt;
&lt;p&gt;我们使用 &lt;code&gt;pivot_root&lt;/code&gt; 可以实现容器中根目录可见性的效果：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;root@dev:/# pivot_root -h
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Usage:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; pivot_root &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;options&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; new_root put_old
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Change the root filesystem.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Options:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; -h, --help     display this help
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; -V, --version  display version
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;For more details see pivot_root&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;8&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;.
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;特性&#34;&gt;特性&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;pivot_root&lt;/code&gt;命令用于将&lt;strong&gt;当前进程的&lt;/strong&gt;根目录替换为指定目录；&lt;/li&gt;
&lt;li&gt;它需要两个参数，分别用于保存当前 mount 命名空间内进程的根挂载，和设置当前进程新的根挂载。分别叫做 &lt;code&gt;put_old&lt;/code&gt; 和  &lt;code&gt;new_root&lt;/code&gt; ；&lt;/li&gt;
&lt;li&gt;挂载之后，它不会自动改变当前进程的根目录，可以使用 &lt;code&gt;chdir(&amp;quot;/&amp;quot;)&lt;/code&gt; 显式更改到新的根目录。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;注意&#34;&gt;注意&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;new_root&lt;/code&gt;和&lt;code&gt;put_old&lt;/code&gt;都必须是目录；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;new_root&lt;/code&gt;和&lt;code&gt;put_old&lt;/code&gt;不在同一个&lt;code&gt;mount namespace&lt;/code&gt;中；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;put_old&lt;/code&gt;必须是&lt;code&gt;new_root&lt;/code&gt;，或者是&lt;code&gt;new_root&lt;/code&gt;的子目录；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;new_root&lt;/code&gt;必须是&lt;code&gt;mount point&lt;/code&gt;，且不能是当前&lt;code&gt;mount namespace&lt;/code&gt;的 “/”。&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;chroot 和 pivot_root区别&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;chroot只改变当前进程的 “/”&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;pivot_root改变当前mount namespace的“/”&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;step1-创建新的命名空间&#34;&gt;Step1 创建新的命名空间&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;root@dev:/workplace/namespace-feat/mock-rootfs# unshare -m
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;unshare -m&lt;/code&gt; 创建一个新的 mount 命名空间，并让当前进程进入。&lt;/p&gt;
&lt;h3 id=&#34;step2-为-pivot_root-命令准备-new_root-和-put_old&#34;&gt;Step2 为 pivot_root 命令准备 new_root 和 put_old&lt;/h3&gt;
&lt;p&gt;创建 put_old 对应的目录：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;root@dev:/workplace/namespace-feat/mock-rootfs# mkdir -p ubuntu-base-22.04-base-amd64/.old
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;执行命令，但是会出现错误：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;root@dev:/workplace/namespace-feat/mock-rootfs# pivot_root ubuntu-base-22.04-base-amd64/ ubuntu-base-22.04-base-amd64/.old/
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;pivot_root: failed to change root from &lt;span style=&#34;color:#e6db74&#34;&gt;`&lt;/span&gt;ubuntu-base-22.04-base-amd64/&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39; to `ubuntu-base-22.04-base-amd64/.old/&amp;#39;&lt;/span&gt;: Device or resource busy
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这是为什么呢？上文提到过，new_root 和 put_old 必须在不同的 mount 命名空间中。而我们的&lt;code&gt;ubuntu-base-22.04-base-amd64/&lt;/code&gt; 和&lt;code&gt;ubuntu-base-22.04-base-amd64/.old/&lt;/code&gt;文件夹，都处于执行&lt;code&gt;unshare -m&lt;/code&gt;之前的挂载命名空间的挂载目录中。&lt;/p&gt;
&lt;p&gt;所以，我们需要再将&lt;code&gt;ubuntu-base-22.04-base-amd64/&lt;/code&gt;挂载一次，因为我们之前执行了&lt;code&gt;unshare -m&lt;/code&gt;，当前命令行正处于新的命名空间，因此，挂载后它就处于新的 mount 命名空间了：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;root@dev:/workplace/namespace-feat/mock-rootfs# mount --bind ubuntu-base-22.04-base-amd64/ ubuntu-base-22.04-base-amd64/
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;step3-执行-pivot_root-并查看根目录的改变&#34;&gt;Step3 执行 pivot_root 并查看根目录的改变&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;root@dev:/workplace/namespace-feat/mock-rootfs# pivot_root ubuntu-base-22.04-base-amd64/ ubuntu-base-22.04-base-amd64/.old/
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;root@dev:/workplace/namespace-feat/mock-rootfs# ls
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ubuntu-base-22.04-base-amd64
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;root@dev:/workplace/namespace-feat/mock-rootfs# cd /
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;root@dev:/# ls
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;bin   dev  home  lib32  libx32  mnt  proc  run   srv  tmp  var
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;boot  etc  lib   lib64  media   opt  root  sbin  sys  usr
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这样就可以成功切换了。上文提到，pivot_root 切换根目录后，不会自动切换目录。我们手动切到根目录查看文件，再与另一个终端进行对比：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://picgo-lzl.oss-cn-beijing.aliyuncs.com/202307092351270.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20230709235112766&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;执行 pivot_root 后，实现了当前进程根目录的切换，就像我们进入容器中，查看根目录下的文件一样，同时宿主机（另一个终端）的根目录没有受到影响。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Ref:&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://mp.weixin.qq.com/s?__biz=MzU3NjY5MjY2Ng==&amp;amp;mid=2247486468&amp;amp;idx=1&amp;amp;sn=5e2e537115146348d7bc137ddf4a31ff&amp;amp;chksm=fd1144d1ca66cdc771294afd20f6324c9c49214042362aa622e5809c0c8f9f834aeca4a50bcb&amp;amp;scene=178&amp;amp;cur_album_id=2810774774825123840#rd&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;容器镜像原理-根目录的替换&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://cloud.tencent.com/developer/article/1518101&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;黄东升: mount namespace和共享子树&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.cnblogs.com/sparkdev/p/9045563.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;sparkdev&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</description>
        </item>
        <item>
        <title>处理机调度图形界面1.0</title>
        <link>https://lizonglingo.github.io/p/%E5%A4%84%E7%90%86%E6%9C%BA%E8%B0%83%E5%BA%A6%E5%9B%BE%E5%BD%A2%E7%95%8C%E9%9D%A21.0/</link>
        <pubDate>Tue, 12 Mar 2019 22:59:15 +0800</pubDate>
        
        <guid>https://lizonglingo.github.io/p/%E5%A4%84%E7%90%86%E6%9C%BA%E8%B0%83%E5%BA%A6%E5%9B%BE%E5%BD%A2%E7%95%8C%E9%9D%A21.0/</guid>
        <description>&lt;h1 id=&#34;处理机调度图形界面10版本&#34;&gt;处理机调度图形界面1.0版本&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;我一直觉得我效率很低&amp;hellip;但还是画出来了，用的PyQt5这个库做的简陋界面，很多功能缺失&amp;hellip;算法残疾&amp;hellip;&lt;/p&gt;
&lt;p&gt;这篇博文以一个算法实例来说一下大体思路&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;代码&lt;/li&gt;
&lt;li&gt;思路&lt;/li&gt;
&lt;li&gt;演示&lt;/li&gt;
&lt;li&gt;不足&lt;/li&gt;
&lt;li&gt;改进&lt;/li&gt;
&lt;li&gt;对了我给搞上评论系统辽，虽然这人迹罕至，但俺还是希望阴差阳错戳进来的朋友可以互动一哈&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;惯例先给代码好吧&#34;&gt;惯例先给代码好吧&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;以最简单的FCFS算法为例子，总代码量可能有1000行左右&lt;/p&gt;
&lt;p&gt;这个算法的代码比较短&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; PyQt5.QtWidgets &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; (QWidget,QLineEdit,QHBoxLayout,QTableWidget,QPushButton,QApplication,QVBoxLayout,QTableWidgetItem,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;QCheckBox,QAbstractItemView,QHeaderView,QLabel,QFrame)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; PyQt5 &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; QtWidgets, QtCore
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; PyQt5.QtCore &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; Qt
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; builtins &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; super, str, range
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; PyQt5.QtGui &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; QFont,QColor
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; faker &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; Factory
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; random&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; sys&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; operator
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 引入数据结构&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 定义每个进程基本数据结构&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Process&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; __init__(self, name, arrive_time, serve_time, static_class, ready&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;False&lt;/span&gt;, over&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;False&lt;/span&gt;):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; name                                    &lt;span style=&#34;color:#75715e&#34;&gt;# 进程名称&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;arrive_time &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; arrive_time                      &lt;span style=&#34;color:#75715e&#34;&gt;# 到达时间&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;serve_time &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; serve_time                        &lt;span style=&#34;color:#75715e&#34;&gt;# 服务时间&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;left_serve_time &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; serve_time                   &lt;span style=&#34;color:#75715e&#34;&gt;# 剩余需要服务的时间&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;finish_time &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;                                &lt;span style=&#34;color:#75715e&#34;&gt;# 完成时间&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;cycling_time &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;                               &lt;span style=&#34;color:#75715e&#34;&gt;# 周转时间&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;w_cycling_time &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;                             &lt;span style=&#34;color:#75715e&#34;&gt;# 带权周转时间&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;response_ratio &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;                             &lt;span style=&#34;color:#75715e&#34;&gt;# 响应比&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pre_queue &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;                                  &lt;span style=&#34;color:#75715e&#34;&gt;# 定义现在所在的队列&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pre_queue_tb &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;                               &lt;span style=&#34;color:#75715e&#34;&gt;# 目前所在队列的时间片&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;used_time &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;                                  &lt;span style=&#34;color:#75715e&#34;&gt;# 已经使用的时间，也就是（服务时间 - 剩余	                                                                                         服务时间）&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;ready &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ready                                  &lt;span style=&#34;color:#75715e&#34;&gt;# 记录就绪状态&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;over &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; over                                    &lt;span style=&#34;color:#75715e&#34;&gt;# 记录完成状态&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;static_class &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; static_class                    &lt;span style=&#34;color:#75715e&#34;&gt;# 人为赋予静态优先级&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 现来先服务作业调度算法&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;fcfs&lt;/span&gt;(processes): &lt;span style=&#34;color:#75715e&#34;&gt;# 到达时间小的优先&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    sum_cycling_time &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    sum_w_cycling_time &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    number &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; len(processes)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    over_list &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    min_key &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    fin_name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    name_string &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    time_string &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;带权周转时间：&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    last_infor &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    running_time &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; processes:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        min &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; processes[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;arrive_time
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(len(processes)):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; processes[i]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;arrive_time &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; min:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                min &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; processes[i]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;arrive_time
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                min_key &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; i
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        running_time &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; processes[min_key]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;serve_time
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;# 计算相关参数&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        processes[min_key]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;cycling_time &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; running_time &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; processes[min_key]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;arrive_time
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        processes[min_key]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;w_cycling_time &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; processes[min_key]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;cycling_time &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; processes[min_key]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;serve_time
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        sum_cycling_time &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; processes[min_key]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;cycling_time
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        sum_w_cycling_time &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; processes[min_key]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;w_cycling_time
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        over_list&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(processes&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pop(min_key))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(len(over_list)):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        print(over_list[i]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;name)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        name_string &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; (over_list[i]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;name&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;   &amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        fin_name&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(over_list[i]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;name)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    a_c_time &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; sum_cycling_time&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;number
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    a_w_c_time &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; sum_w_cycling_time&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;number
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;平均周转时间：&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; str(a_c_time))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;平均带权周转时间：&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; str(a_w_c_time&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;number))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    time_string &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; (str(a_c_time) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;    平均带权周转时间：&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; str(a_w_c_time))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    last_infor&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(name_string)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    last_infor&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(time_string)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;# return fin_name&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; last_infor
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ui&lt;/span&gt;(QWidget):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; __init__(self):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        super(ui, self)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;__init__()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;setupUI()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;id &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;lines &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;editable &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;des_sort &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;faker &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Factory&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;create()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;btn_add&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;clicked&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;connect(self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add_line)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;btn_del&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;clicked&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;connect(self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;del_line)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;btn_modify&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;clicked&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;connect(self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;modify_line)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;btn_set_middle&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;clicked&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;connect(self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;middle)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;btn_get_info&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;clicked&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;connect(self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;g_info)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;table&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;cellChanged&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;connect(self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;cellchange)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;global&lt;/span&gt; original_processes                &lt;span style=&#34;color:#75715e&#34;&gt;# 这里我们定义全局变量 - 原始进程列表，是一个二维列表&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;setupUI&lt;/span&gt;(self):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;setWindowTitle(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;数据测试&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;resize(&lt;span style=&#34;color:#ae81ff&#34;&gt;720&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;420&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;table &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; QTableWidget(self)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;btn_add &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; QPushButton(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;增加&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;btn_del &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; QPushButton(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;删除&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;btn_modify &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; QPushButton(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;可以编辑&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;btn_set_middle &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; QPushButton(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;文字居中&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;btn_get_info &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; QPushButton(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;生成调度序列&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;# 弹簧控件&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;spacerItem &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; QtWidgets&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;QSpacerItem(&lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;, QtWidgets&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;QSizePolicy&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Minimum, QtWidgets&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;QSizePolicy&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Expanding)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;# 垂直布局，使用嵌套布局方式&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;# 我们把所有按钮按照盒布局-垂直布局方式，构成嵌套布局的一个块&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;# 按照设置的方式依此从上到下&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;vbox &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; QVBoxLayout()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;vbox&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;addWidget(self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;btn_add)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;vbox&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;addWidget(self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;btn_del)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;vbox&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;addWidget(self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;btn_modify)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;vbox&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;addWidget(self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;btn_set_middle)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;vbox&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;addWidget(self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;btn_get_info)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;vbox&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;addSpacerItem(self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;spacerItem)            
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;txt &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; QLabel()                             &lt;span style=&#34;color:#75715e&#34;&gt;# 这是进行操作时显示在最左下角的提示信息&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;txt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;setMinimumHeight(&lt;span style=&#34;color:#ae81ff&#34;&gt;50&lt;/span&gt;)                   &lt;span style=&#34;color:#75715e&#34;&gt;# 限定控件大小&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;lab_over &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; QLabel(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;调度顺序&amp;#39;&lt;/span&gt;)               &lt;span style=&#34;color:#75715e&#34;&gt;# 输出队列顺序&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;lab_over&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;setMinimumHeight(&lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;over_Edit &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; QLineEdit(self)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;over_Edit&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;setMinimumHeight(&lt;span style=&#34;color:#ae81ff&#34;&gt;25&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;lab_time &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; QLabel(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;平均周转时间和平均带权周转时间&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;avrtime_edit &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; QLineEdit(self)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;# 垂直布局&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;# 把表格和下面的操作提示文本信息按照垂直布局设置，作为嵌套布局方式的另一部分&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;vbox2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; QVBoxLayout()                          
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;vbox2&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;addWidget(self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;table)                    &lt;span style=&#34;color:#75715e&#34;&gt;# 将表格和下面的操作提示放入垂直布局，先放表格&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;vbox2&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;addWidget(self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;lab_over)                 &lt;span style=&#34;color:#75715e&#34;&gt;# 放输出队列&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;vbox2&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;addWidget(self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;over_Edit)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;vbox2&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;addWidget(self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;lab_time)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;vbox2&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;addWidget(self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;avrtime_edit)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;vbox2&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;addWidget(self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;txt)                      &lt;span style=&#34;color:#75715e&#34;&gt;# 再放文本框&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;# 水平布局&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;# 这是将上述两个布局方式作为整体布局的元素，vbox和vbox2共同放入水平布局&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;hbox &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; QHBoxLayout()                          
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;hbox&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;addLayout(self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;vbox2)                     &lt;span style=&#34;color:#75715e&#34;&gt;# 将这样就会自左向右，先放表格，&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;hbox&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;addLayout(self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;vbox)                      &lt;span style=&#34;color:#75715e&#34;&gt;# 再放按钮&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;# 将水平布局放入总体布局&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;setLayout(self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;hbox)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;# 表格基本属性设置   &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;table&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;setColumnCount(&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;)                                    &lt;span style=&#34;color:#75715e&#34;&gt;# 设置列数&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;table&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;horizontalHeader()&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;setDefaultAlignment(QtCore&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Qt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;AlignCenter)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;headers &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ID&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;选择&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;进程名&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;到达时间&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;服务时间&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;静态优先级&amp;#39;&lt;/span&gt;]      &lt;span style=&#34;color:#75715e&#34;&gt;# 设置每列标题&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;table&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;setHorizontalHeaderLabels(self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;headers)              &lt;span style=&#34;color:#75715e&#34;&gt;# 导入&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;table&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;verticalHeader()&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;setVisible(&lt;span style=&#34;color:#66d9ef&#34;&gt;False&lt;/span&gt;)                   &lt;span style=&#34;color:#75715e&#34;&gt;# 隐藏垂直表头&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;show()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;# 添加行&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;add_line&lt;/span&gt;(self):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;table&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;cellChanged&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;disconnect()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        row &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;table&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;rowCount()                                     &lt;span style=&#34;color:#75715e&#34;&gt;# 获取目前所有行的数量&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;table&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;setRowCount(row &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        id &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; str(self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;id)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;# 生成复选框， 并设置居中显示&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        ck &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; QCheckBox()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        h &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; QHBoxLayout()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        h&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;setAlignment(Qt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;AlignCenter)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        h&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;addWidget(ck)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        w &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; QWidget()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        w&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;setLayout(h)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;# 变量由faker自动生成&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;faker&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;name()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        arr_time &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; str(random&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;randint(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        ser_time &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; str(random&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;randint(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        sta_class &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; str(random&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;randint(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;# 设置新建行的数据&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;table&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;setItem(row,&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,QTableWidgetItem(id))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;table&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;setCellWidget(row,&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,w)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;table&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;setItem(row,&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,QTableWidgetItem(name))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;table&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;setItem(row,&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;,QTableWidgetItem(arr_time))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;table&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;setItem(row,&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;,QTableWidgetItem(ser_time))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;table&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;setItem(row,&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;,QTableWidgetItem(sta_class))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;id &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;                                                        &lt;span style=&#34;color:#75715e&#34;&gt;# 设置完不要忘记id加一&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;lines&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append([id,ck,name,arr_time,ser_time,sta_class])
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;settext(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;自动生成随机一行数据！,checkbox设置为居中显示&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;table&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;cellChanged&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;connect(self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;cellchange)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;# 删除行&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;del_line&lt;/span&gt;(self):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        removeline &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; line &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;lines:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; line[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;isChecked():
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                row &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;table&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;rowCount()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(row,&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; line[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;table&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;item(x &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;text():
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;table&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;removeRow(x &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        removeline&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(line)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; line &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; removeline:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;lines&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;remove(line)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;settext(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;删除checkbox中选中状态的行&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;modify_line&lt;/span&gt;(self):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;editable &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;table&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;setEditTriggers(QAbstractItemView&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;NoEditTriggers)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;btn_modify&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;setText(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;禁止编辑&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;editable &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;False&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;table&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;setEditTriggers(QAbstractItemView&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;AllEditTriggers)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;btn_modify&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;setText(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;可以编辑&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;editable &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;settext(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;设置是否可以编辑表格信息&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;middle&lt;/span&gt;(self):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        row &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;table&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;rowCount()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(row):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; y &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; y &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    item &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;table&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;item(x,y)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    item&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;setTextAlignment(Qt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;AlignCenter)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &lt;span style=&#34;color:#66d9ef&#34;&gt;pass&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;settext(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;将文字居中显示&amp;#39;&lt;/span&gt;)  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;cellchange&lt;/span&gt;(self,row,col):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        item &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;table&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;item(row,col)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        txt &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; item&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;text()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;settext(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;第&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%s&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;行，第&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%s&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;列 , 数据改变为:&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%s&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;(row,col,txt))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;g_info&lt;/span&gt;(self):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;# 我们每次使用这个功能时先把全变量原始进程列表 -- original_processes --清空好吧&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        original_processes &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        row &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;table&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;rowCount()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; j &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(row):                            &lt;span style=&#34;color:#75715e&#34;&gt;# 有几行就有几个进程&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            na &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;table&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;item(j,&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;text()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            at &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; int(self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;table&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;item(j,&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;text())
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            st &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; int(self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;table&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;item(j,&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;text())
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            sc &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; int(self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;table&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;item(j,&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;text())
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            p &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Process(na, at, st, sc)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            original_processes&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(p)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            print(na&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39; &amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;str(at)&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39; &amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;str(st)&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39; &amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;str(sc))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&amp;#39;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        由于第一个进程不一定就是到达时间最短的进程，所以我们先按照
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        到达时间给进程排个序
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        &amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        _sorted_processes &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; original_processes[:]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        _sorted_processes&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sort(key&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;operator&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;attrgetter(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;arrive_time&amp;#39;&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        infor_list &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; fcfs(_sorted_processes)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;avrtime_edit&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;setText(str(infor_list[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;over_Edit&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;setText(str(infor_list[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;settext(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;获取表格信息，生成调度序列，计算平均、平均带权周转时间，并显示&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;settext&lt;/span&gt;(self,txt):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        font &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; QFont(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;微软雅黑&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;txt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;setFont(font)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;txt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;setText(txt)  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; __name__ &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    app &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; QApplication(sys&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;argv)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ui &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ui()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    sys&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;exit(app&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;exec_())
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;大体思路&#34;&gt;大体思路&lt;/h2&gt;
&lt;h4 id=&#34;数据结构定义及功能算法部分&#34;&gt;数据结构定义及功能算法部分&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#  引入数据结构&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 定义每个进程基本数据结构&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Process&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; __init__(self, name, arrive_time, serve_time, static_class, ready&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;False&lt;/span&gt;, over&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;False&lt;/span&gt;):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; name                                    &lt;span style=&#34;color:#75715e&#34;&gt;# 进程名称&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;arrive_time &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; arrive_time                      &lt;span style=&#34;color:#75715e&#34;&gt;# 到达时间&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;serve_time &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; serve_time                        &lt;span style=&#34;color:#75715e&#34;&gt;# 服务时间&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;left_serve_time &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; serve_time                   &lt;span style=&#34;color:#75715e&#34;&gt;# 剩余需要服务的时间&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;finish_time &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;                                &lt;span style=&#34;color:#75715e&#34;&gt;# 完成时间&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;cycling_time &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;                               &lt;span style=&#34;color:#75715e&#34;&gt;# 周转时间&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;w_cycling_time &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;                             &lt;span style=&#34;color:#75715e&#34;&gt;# 带权周转时间&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;response_ratio &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;                             &lt;span style=&#34;color:#75715e&#34;&gt;# 响应比&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pre_queue &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;                                  &lt;span style=&#34;color:#75715e&#34;&gt;# 定义现在所在的队列&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pre_queue_tb &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;                               &lt;span style=&#34;color:#75715e&#34;&gt;# 目前所在队列的时间片&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;used_time &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;                                  &lt;span style=&#34;color:#75715e&#34;&gt;# 已经使用的时间，也就是（服务时间 - 剩余服务时间）&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;ready &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ready                                  &lt;span style=&#34;color:#75715e&#34;&gt;# 记录就绪状态&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;over &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; over                                    &lt;span style=&#34;color:#75715e&#34;&gt;# 记录完成状态&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;static_class &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; static_class                    &lt;span style=&#34;color:#75715e&#34;&gt;# 人为赋予静态优先级&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 现来先服务作业调度算法&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;fcfs&lt;/span&gt;(processes): &lt;span style=&#34;color:#75715e&#34;&gt;# 到达时间小的优先&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    sum_cycling_time &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    sum_w_cycling_time &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    number &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; len(processes)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    over_list &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    min_key &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    fin_name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    name_string &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    time_string &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;带权周转时间：&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    last_infor &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    running_time &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; processes:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        min &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; processes[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;arrive_time
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(len(processes)):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; processes[i]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;arrive_time &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; min:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                min &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; processes[i]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;arrive_time
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                min_key &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; i
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        running_time &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; processes[min_key]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;serve_time
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        processes[min_key]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;cycling_time &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; running_time &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; processes[min_key]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;arrive_time
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        processes[min_key]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;w_cycling_time &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; processes[min_key]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;cycling_time &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; processes[min_key]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;serve_time
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        sum_cycling_time &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; processes[min_key]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;cycling_time
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        sum_w_cycling_time &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; processes[min_key]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;w_cycling_time
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        over_list&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(processes&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pop(min_key))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(len(over_list)):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        print(over_list[i]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;name)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        name_string &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; (over_list[i]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;name&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;   &amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        fin_name&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(over_list[i]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;name)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    a_c_time &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; sum_cycling_time&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;number
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    a_w_c_time &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; sum_w_cycling_time&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;number
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;平均周转时间：&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; str(a_c_time))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;平均带权周转时间：&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; str(a_w_c_time&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;number))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    time_string &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; (str(a_c_time) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;    平均带权周转时间：&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; str(a_w_c_time))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    last_infor&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(name_string)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    last_infor&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(time_string)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;# return fin_name&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; last_infor
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这部分内容在之前的博客中有大体的讲，不过好像是重构了，过段时间应该还要重构。&lt;/p&gt;
&lt;p&gt;这里要注意返回的列表有两项，分别是调度完之后的作业or进程名称顺序字符串，还有平均周转时间和平均带权周转时间的时间参数字符串。就不多讲了。&lt;/p&gt;
&lt;p&gt;在每次执行完一个作业or进程之后，会进行一个周转时间和带权周转时间的计算，方便计算性能。&lt;/p&gt;
&lt;p&gt;其余和之前差不多。&lt;/p&gt;
&lt;h4 id=&#34;gui部分&#34;&gt;GUI部分&lt;/h4&gt;
&lt;p&gt;引入的库和模块&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; PyQt5.QtWidgets &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; (QWidget,QLineEdit,QHBoxLayout,QTableWidget,QPushButton,QApplication,QVBoxLayout,QTableWidgetItem,QCheckBox,QAbstractItemView,QHeaderView,QLabel,QFrame)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; PyQt5 &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; QtWidgets, QtCore
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; PyQt5.QtCore &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; Qt
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; builtins &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; super, str, range
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; PyQt5.QtGui &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; QFont,QColor
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; faker &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; Factory
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; random&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; sys&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; operator
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;主要用了是PyQt5的模块，另外加一些内置的计算模块，像后面的算法还用到numpy等科学计算模块&lt;/p&gt;
&lt;p&gt;语法、思路、排版、实现&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;直接往代码里写了啊&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ui&lt;/span&gt;(QWidget):                             &lt;span style=&#34;color:#75715e&#34;&gt;# 继承QWidget&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; __init__(self):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        super(ui, self)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;__init__()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;setupUI()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;id &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;lines &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;editable &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;des_sort &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;faker &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Factory&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;create()			&lt;span style=&#34;color:#75715e&#34;&gt;# faker库是数据伪造生成器，后续会搬运一篇博文讲&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&amp;#39;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        这里面主要使用了 
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        按钮-button
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        标签-lable
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        编辑单行文本框-editline
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        表格-table
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        这几个控件
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        我觉得难点主要在于不熟悉这些控件的方法，英语又不好官方文档看明白是不可能的...对了6级第一次裸考没过
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        &amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;# 按钮绑定事件 &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&amp;#39;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        主要事件
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        add_line 表格添加行
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        del_line 表格删除行
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        modify_line 控制表格是否可以被编辑
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        middle 设置表格文字居中显示
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        cellchange 根据相关触发的操作提示你的操作是干嘛的
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        &amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;btn_add&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;clicked&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;connect(self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add_line)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;btn_del&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;clicked&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;connect(self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;del_line)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;btn_modify&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;clicked&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;connect(self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;modify_line)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;btn_set_middle&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;clicked&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;connect(self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;middle)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;btn_get_info&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;clicked&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;connect(self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;g_info)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;table&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;cellChanged&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;connect(self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;cellchange)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;global&lt;/span&gt; original_processes               &lt;span style=&#34;color:#75715e&#34;&gt;# 这里我们定义全局变量 - 原始进程列表，是一个二维列表&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;setupUI&lt;/span&gt;(self):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;# 控件的排版，做的时候嵌套布局那一块觉得自己是真的学到了，很有趣，基本设置Google Baidu都可找到&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;setWindowTitle(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;数据测试&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;resize(&lt;span style=&#34;color:#ae81ff&#34;&gt;720&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;420&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;table &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; QTableWidget(self)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;btn_add &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; QPushButton(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;增加&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;btn_del &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; QPushButton(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;删除&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;btn_modify &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; QPushButton(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;可以编辑&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;btn_set_middle &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; QPushButton(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;文字居中&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;btn_get_info &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; QPushButton(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;生成调度序列&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;# 弹簧控件，这个不是很明白&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;spacerItem &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; QtWidgets&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;QSpacerItem(&lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;, QtWidgets&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;QSizePolicy&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Minimum, QtWidgets&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;QSizePolicy&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Expanding)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;# 垂直布局，使用嵌套布局方式&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;# 我们把所有按钮按照盒布局-垂直布局方式，构成嵌套布局的一个块&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;# 按照设置的方式依此从上到下&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;vbox &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; QVBoxLayout()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;vbox&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;addWidget(self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;btn_add)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;vbox&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;addWidget(self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;btn_del)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;vbox&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;addWidget(self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;btn_modify)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;vbox&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;addWidget(self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;btn_set_middle)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;vbox&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;addWidget(self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;btn_get_info)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;vbox&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;addSpacerItem(self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;spacerItem)            
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;txt &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; QLabel()                             &lt;span style=&#34;color:#75715e&#34;&gt;# 这是进行操作时显示在最左下角的提示信息&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;txt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;setMinimumHeight(&lt;span style=&#34;color:#ae81ff&#34;&gt;50&lt;/span&gt;)                   &lt;span style=&#34;color:#75715e&#34;&gt;# 限定控件大小&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;lab_over &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; QLabel(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;调度顺序&amp;#39;&lt;/span&gt;)               &lt;span style=&#34;color:#75715e&#34;&gt;# 输出队列顺序&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;lab_over&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;setMinimumHeight(&lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;over_Edit &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; QLineEdit(self)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;over_Edit&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;setMinimumHeight(&lt;span style=&#34;color:#ae81ff&#34;&gt;25&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;lab_time &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; QLabel(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;平均周转时间和平均带权周转时间&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;avrtime_edit &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; QLineEdit(self)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;# 垂直布局&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;# 把表格和下面的操作提示文本信息按照垂直布局设置，作为嵌套布局方式的另一部分&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;vbox2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; QVBoxLayout()                          
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;vbox2&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;addWidget(self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;table)                    &lt;span style=&#34;color:#75715e&#34;&gt;# 将表格和下面的操作提示放入垂直布局，先放表格&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;vbox2&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;addWidget(self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;lab_over)                 &lt;span style=&#34;color:#75715e&#34;&gt;# 放输出队列&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;vbox2&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;addWidget(self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;over_Edit)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;vbox2&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;addWidget(self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;lab_time)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;vbox2&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;addWidget(self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;avrtime_edit)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;vbox2&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;addWidget(self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;txt)                      &lt;span style=&#34;color:#75715e&#34;&gt;# 再放文本框&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;# 水平布局&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;# 这是将上述两个布局方式作为整体布局的元素，vbox和vbox2共同放入水平布局&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;hbox &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; QHBoxLayout()                          
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;hbox&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;addLayout(self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;vbox2)                     &lt;span style=&#34;color:#75715e&#34;&gt;# 将这样就会自左向右，先放表格，&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;hbox&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;addLayout(self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;vbox)                      &lt;span style=&#34;color:#75715e&#34;&gt;# 再放按钮&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;# 将水平布局放入总体布局&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;setLayout(self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;hbox)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;# 表格基本属性设置   &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;table&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;setColumnCount(&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;)                                    &lt;span style=&#34;color:#75715e&#34;&gt;# 设置列数&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;table&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;horizontalHeader()&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;setDefaultAlignment(QtCore&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Qt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;AlignCenter)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;headers &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ID&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;选择&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;进程名&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;到达时间&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;服务时间&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;静态优先级&amp;#39;&lt;/span&gt;]      &lt;span style=&#34;color:#75715e&#34;&gt;# 设置每列标题&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;table&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;setHorizontalHeaderLabels(self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;headers)              &lt;span style=&#34;color:#75715e&#34;&gt;# 导入&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;table&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;verticalHeader()&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;setVisible(&lt;span style=&#34;color:#66d9ef&#34;&gt;False&lt;/span&gt;)                   &lt;span style=&#34;color:#75715e&#34;&gt;# 隐藏垂直表头&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;show()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;# 添加行&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;add_line&lt;/span&gt;(self):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;table&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;cellChanged&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;disconnect()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        row &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;table&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;rowCount()                                     &lt;span style=&#34;color:#75715e&#34;&gt;# 获取目前所有行的数量&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;table&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;setRowCount(row &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        id &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; str(self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;id)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;# 生成复选框， 并设置居中显示&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        ck &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; QCheckBox()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        h &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; QHBoxLayout()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        h&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;setAlignment(Qt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;AlignCenter)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        h&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;addWidget(ck)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        w &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; QWidget()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        w&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;setLayout(h)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;# 变量由faker自动生成&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;faker&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;name()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        arr_time &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; str(random&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;randint(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        ser_time &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; str(random&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;randint(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        sta_class &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; str(random&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;randint(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;# 设置新建行的数据&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;table&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;setItem(row,&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,QTableWidgetItem(id))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;table&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;setCellWidget(row,&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,w)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;table&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;setItem(row,&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,QTableWidgetItem(name))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;table&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;setItem(row,&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;,QTableWidgetItem(arr_time))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;table&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;setItem(row,&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;,QTableWidgetItem(ser_time))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;table&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;setItem(row,&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;,QTableWidgetItem(sta_class))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;id &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;                                                        &lt;span style=&#34;color:#75715e&#34;&gt;# 设置完不要忘记id加一&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;lines&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append([id,ck,name,arr_time,ser_time,sta_class])
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;settext(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;自动生成随机一行数据！,checkbox设置为居中显示&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;table&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;cellChanged&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;connect(self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;cellchange)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;# 删除行&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;del_line&lt;/span&gt;(self):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        removeline &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; line &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;lines:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; line[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;isChecked():
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                row &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;table&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;rowCount()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(row,&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; line[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;table&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;item(x &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;text():
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;table&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;removeRow(x &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        removeline&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(line)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; line &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; removeline:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;lines&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;remove(line)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;settext(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;删除checkbox中选中状态的行&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;modify_line&lt;/span&gt;(self):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;editable &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;table&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;setEditTriggers(QAbstractItemView&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;NoEditTriggers)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;btn_modify&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;setText(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;禁止编辑&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;editable &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;False&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;table&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;setEditTriggers(QAbstractItemView&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;AllEditTriggers)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;btn_modify&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;setText(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;可以编辑&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;editable &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;settext(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;设置是否可以编辑表格信息&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;middle&lt;/span&gt;(self):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        row &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;table&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;rowCount()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(row):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; y &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; y &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    item &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;table&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;item(x,y)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    item&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;setTextAlignment(Qt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;AlignCenter)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &lt;span style=&#34;color:#66d9ef&#34;&gt;pass&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;settext(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;将文字居中显示&amp;#39;&lt;/span&gt;)  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;cellchange&lt;/span&gt;(self,row,col):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        item &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;table&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;item(row,col)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        txt &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; item&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;text()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;settext(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;第&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%s&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;行，第&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%s&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;列 , 数据改变为:&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%s&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;(row,col,txt))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;g_info&lt;/span&gt;(self):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;# 我们每次使用这个功能时先把全变量原始进程列表 -- original_processes --清空好吧&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;# 这个函数获取表格数据存入队列，初始化进程信息加入列表，最后调主算法函数进行模拟调度，最后返回信息&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        original_processes &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        row &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;table&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;rowCount()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; j &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(row):                            &lt;span style=&#34;color:#75715e&#34;&gt;# 有几行就有几个进程&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            na &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;table&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;item(j,&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;text()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            at &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; int(self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;table&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;item(j,&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;text())
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            st &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; int(self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;table&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;item(j,&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;text())
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            sc &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; int(self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;table&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;item(j,&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;text())
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            p &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Process(na, at, st, sc)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            original_processes&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(p)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            print(na&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39; &amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;str(at)&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39; &amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;str(st)&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39; &amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;str(sc))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&amp;#39;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        由于第一个进程不一定就是到达时间最短的进程，所以我们先按照
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        到达时间给进程排个序
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        这是后来才想到的，还有很多诸如此类的bug...脑壳疼
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        &amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        _sorted_processes &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; original_processes[:]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        _sorted_processes&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sort(key&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;operator&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;attrgetter(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;arrive_time&amp;#39;&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        infor_list &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; fcfs(_sorted_processes)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;# 讲返回的信息填入文本框&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;avrtime_edit&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;setText(str(infor_list[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;over_Edit&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;setText(str(infor_list[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;settext(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;获取表格信息，生成调度序列，计算平均、平均带权周转时间，并显示&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;# 提示字体的设置&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;settext&lt;/span&gt;(self,txt):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        font &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; QFont(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;微软雅黑&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;txt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;setFont(font)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;txt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;setText(txt)  
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;最后就&amp;hellip;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; __name__ &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    app &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; QApplication(sys&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;argv)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ui &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ui()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    sys&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;exit(app&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;exec_())
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;大体框架写完之后觉得好多东西并没有那么难，只是你没有见过所以觉得很唬人，然而我觉得我coding效率还是太低了，诶&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;演示&#34;&gt;演示&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;主页面&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.loli.net/2019/03/13/5c87d832bdbec.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;添加行并自动生成数据&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.loli.net/2019/03/13/5c87d8c84a5f1.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;更改数据&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.loli.net/2019/03/13/5c87d8d775837.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;居中对齐&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.loli.net/2019/03/13/5c87d8eb66d3b.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;生成序列并显示调度顺序和时间效率&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.loli.net/2019/03/13/5c87d91dca9a2.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;删除选中行&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.loli.net/2019/03/13/5c87d935206e1.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.loli.net/2019/03/13/5c87d93f9b163.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;完事了就，太简陋···但是一想这东西用c/c++写就也太麻烦了吧，python真好~&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;不足与改进思路&#34;&gt;不足与改进思路&lt;/h2&gt;
&lt;h4 id=&#34;不足&#34;&gt;不足&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;算法有问题，数据容错率极低，经常因为数据不规范就原地崩&lt;/li&gt;
&lt;li&gt;没有实现 作业/进程 数据可从外部导入的功能&lt;/li&gt;
&lt;li&gt;没实现 单步执行 的功能，我想这是最要紧的&amp;hellip;&lt;/li&gt;
&lt;li&gt;没有 相同进程不同算法性能数据比较 功能&lt;/li&gt;
&lt;li&gt;不够集成&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;总体看来，就是只实现了一个大体的demo，还有很多需要改进&lt;/p&gt;
&lt;h4 id=&#34;改进思路&#34;&gt;改进思路&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;算法重构，昨天调的时候觉得太乱了，而且如果要单步执行的话目前算法应该不能达到要求&lt;/li&gt;
&lt;li&gt;优化GUI&lt;/li&gt;
&lt;li&gt;还是算法吧，数据容错性太差&lt;/li&gt;
&lt;li&gt;添加从外部文件导入数据功能&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;题外话：最近有些焦虑，铺天盖地的说2019计算机考研哪哪都炸，初试神仙打架复试百里挑一，985211各路神仙跨考计算机的数不过来，感觉350都不叫分了。就一股脑都来吃计算机这碗饭，就连调剂的生源都不错，更何况一堆搞ACM的、手里拿着一大堆项目、顶级论文发了好几篇的神仙也&amp;hellip;越来越觉得路难走，实力又真是差十万八千里，就越发急于求成，想很快可以出成绩看到结果。输在了起跑线上在后面得付出更多的努力，然而更多时候只是停留嘴面实际行动又不及十分之一。可能就不具备那种潜质再者说没有足够的动力一直激励自己。但，但行好事莫问前程吧。今天20了&amp;hellip;真快，可以再加把劲&lt;/p&gt;
&lt;p&gt;写的太晚了难免有纰漏，望海涵&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/lizonglin313/-python-&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;源码地址&lt;/a&gt;&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Python模拟操作系统处理机调度</title>
        <link>https://lizonglingo.github.io/p/python%E6%A8%A1%E6%8B%9F%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%A4%84%E7%90%86%E6%9C%BA%E8%B0%83%E5%BA%A6/</link>
        <pubDate>Tue, 19 Feb 2019 09:06:30 +0800</pubDate>
        
        <guid>https://lizonglingo.github.io/p/python%E6%A8%A1%E6%8B%9F%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%A4%84%E7%90%86%E6%9C%BA%E8%B0%83%E5%BA%A6/</guid>
        <description>&lt;blockquote&gt;
&lt;p&gt;拖拖拉拉，昨天终于写完核心算法，UI界面几乎没写，估计开学会被导师mao一顿。说一下python GUI大家最好不要去动TK，前些日子找官方文档查方法体验非常差，而且网上的教程写的乱七八糟。有兴趣的话大家可以学习PyQt，这是一个跨平台的GUI，除了python，好多语言都有自己的版本，可以移植性比较高。重要的是有前辈翻译的官方文档，也会一直更新，后期会如果有时间会放上链接及相关教程。&lt;/p&gt;
&lt;p&gt;这一篇是关于如何用python语言模拟常见的处理机调度，我这么菜是当然不会有UI界面的···&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;python模拟操作系统处理机调度&#34;&gt;Python模拟操作系统处理机调度&lt;/h1&gt;
&lt;h2 id=&#34;算法概览&#34;&gt;算法概览&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;FCFS 现来先服务调度算法&lt;/li&gt;
&lt;li&gt;SCF 这个是我起的英文名··· 其实就是 static class first 静态优先权优先调度算法&lt;/li&gt;
&lt;li&gt;SJF 短作业优先&lt;/li&gt;
&lt;li&gt;SRTF 最短剩余时间优先&lt;/li&gt;
&lt;li&gt;HRRN 最高响应比优先&lt;/li&gt;
&lt;li&gt;RR 轮转法&lt;/li&gt;
&lt;li&gt;MFQ 多级反馈队列调度算法&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;一共以上七种常见调度算法，其中既包括作业调度，也包括进程调度。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;作业调度：FCFS SJF SCF SRTF HRRN&lt;/li&gt;
&lt;li&gt;进程调度：RR MFQ&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;其中又分为抢占式和非抢占式，这里就不详细说了。&lt;/p&gt;
&lt;h2 id=&#34;核心算法&#34;&gt;核心算法&lt;/h2&gt;
&lt;h3 id=&#34;定义进程数据结构&#34;&gt;定义进程数据结构&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;为了统一所有算法使用的数据类型，我们有必要统一进程的属性，结构&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Process&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; __init__(self, name, arrive_time, serve_time, static_class&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, ready &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;False&lt;/span&gt;, over&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;False&lt;/span&gt;):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; name  &lt;span style=&#34;color:#75715e&#34;&gt;# 进程名&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;arrive_time &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; arrive_time  &lt;span style=&#34;color:#75715e&#34;&gt;# 到达时间&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;serve_time &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; serve_time  &lt;span style=&#34;color:#75715e&#34;&gt;# 需要服务的时间&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;left_serve_time &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; serve_time  &lt;span style=&#34;color:#75715e&#34;&gt;# 剩余需要服务的时间&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;finish_time &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;# 完成时间&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;cycling_time &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;# 周转时间&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;w_cycling_time &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;# 带权周转时间&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;static_class &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; static_class &lt;span style=&#34;color:#75715e&#34;&gt;# 静态优先级&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;response_ratio &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;# 响应比&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pre_queue &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;# 定义现在所在的队列&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pre_queue_tb &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;# 目前所在的队列（多级反馈队列使用）&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;used_time &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;# 进程已经进行了多少时间&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;ready &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ready &lt;span style=&#34;color:#75715e&#34;&gt;# 进程是否就绪&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;over &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; over &lt;span style=&#34;color:#75715e&#34;&gt;# 进程是否进行完成&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;fcfs-先来先服务&#34;&gt;FCFS 先来先服务&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;顾名思义，先到达的作业先处理&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;FCFS&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; __init__(self, processes_):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;processes &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; processes_
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;fcfs&lt;/span&gt;(self): &lt;span style=&#34;color:#75715e&#34;&gt;# 到达时间小的优先&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        processes &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;processes
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;# 新建输出队列&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        over_list &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        min_key &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; processes:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(len(processes)):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                min &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; processes[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;arrive_time
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; processes[i]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;arrive_time &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; min:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    min &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; processes[i]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;arrive_time
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    min_key &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; i
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            over_list&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(processes&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pop(min_key))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(len(over_list)):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            print(over_list[i]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;name)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;当初始队列不为空时，进行循环，比较所有作业的到达时间，每次循环把到达时间最小的作业出队列，并入输出队列over_list，最后输出队列的顺序就是处理作业的顺序。&lt;/p&gt;
&lt;h3 id=&#34;scf-静态优先权优先调度算法&#34;&gt;SCF 静态优先权优先调度算法&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;这里我们假设静态优先级是人为赋予的，在生成的作业说明书里就有，所以算法思想和现来先服务是一样的，在已经到达的作业队列中选取优先级最高的作业进行调度。&lt;/p&gt;
&lt;p&gt;天哪改完了，因为刚才我在写的时候突然想到我写错了，我犯的错误是在进行优先级比较时，没有分哪些是已经到达的作业哪些是还未到达的作业。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;SJF&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; __init__(self, processes_):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;processes &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; processes_
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;sjf&lt;/span&gt;(self): &lt;span style=&#34;color:#75715e&#34;&gt;# 静态优先级高的优先，人为赋予&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        processes &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;processes
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        pre_processes &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [] &lt;span style=&#34;color:#75715e&#34;&gt;# 就绪队列&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        over_processes &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [] &lt;span style=&#34;color:#75715e&#34;&gt;# 输出队列&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        pre_processes&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(processes[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;])
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        number &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; len(processes)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        flag &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;# 记录作业完成数量&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        max_key &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        running_time &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; flag &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; number: &lt;span style=&#34;color:#75715e&#34;&gt;# 所有作业都完成时结束循环&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            max_key &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;# 优先级最高进程的下标&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            max &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pre_processes[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;static_class &lt;span style=&#34;color:#75715e&#34;&gt;# 最高优先级&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; k &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(len(pre_processes)): &lt;span style=&#34;color:#75715e&#34;&gt;# 在当前就绪队列中选出优先级最高的作业&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; pre_processes[k]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;static_class &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; max:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    max &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pre_processes[k]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;static_class
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    max_key &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; k
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; j &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(pre_processes[max_key]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;serve_time): &lt;span style=&#34;color:#75715e&#34;&gt;# 在当前所要处理的作业的服务时间里&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                pre_processes[max_key]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;left_serve_time &lt;span style=&#34;color:#f92672&#34;&gt;-=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                running_time &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; pre_processes[max_key]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;left_serve_time &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;: &lt;span style=&#34;color:#75715e&#34;&gt;# 剩余服务时间为零，弹出进入完成队列&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    flag &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    over_processes&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(pre_processes&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pop(max_key))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(number): &lt;span style=&#34;color:#75715e&#34;&gt;# 每一时刻是否有到达作业将其入队&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; processes[i]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;arrive_time &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; running_time:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        pre_processes&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(processes[i])
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(len(over_processes)): &lt;span style=&#34;color:#75715e&#34;&gt;# 按照作业完成顺序输出&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            print(over_processes[i]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;name)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;sjf-短作业优先&#34;&gt;SJF 短作业优先&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;短作业优先调度算法思想和静态优先权优先的思想一样，只是选取就绪进程中，所需要的服务时间最小的作业优先调度。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;SJF&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; __init__(self, processes_):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;processes &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; processes_
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;sjf&lt;/span&gt;(self):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        processes &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;processes
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        flag &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;# 记录已完成的进程数量&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        time &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;# 模拟时钟技术&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        current_process &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;# 记录当前正在执行的进程下标&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt;(flag&lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; current_process &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:  &lt;span style=&#34;color:#75715e&#34;&gt;# 此时有进程在执行&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                processes[current_process]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;used_time &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; processes[current_process]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;used_time &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; processes[current_process]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;handle_time:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;进程&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; processes[current_process]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;name &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;处理完毕！&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    flag &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    processes[current_process]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;over &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &lt;span style=&#34;color:#75715e&#34;&gt;# current_process = -1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(len(processes)):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; time &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; processes[i]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;arrive_time:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    processes[i]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;ready &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            min_handle &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(len(processes)):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; processes[i]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;ready &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; processes[i]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;over &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;False&lt;/span&gt;: 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &lt;span style=&#34;color:#75715e&#34;&gt;# 表示进程到达且未被处理完，用了ready和over两属性，而没有使用就绪队列和完成队列来标识&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; current_process &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        min_handle &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; processes[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;handle_time
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        current_process &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; processes[current_process]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;over &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                            &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(len(processes)):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                                &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; processes[i]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;ready &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; processes[i]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;over &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;False&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                                    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;  processes[i]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;handle_time &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; min_handle:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                                        current_process &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; i
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                                        min_handle &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; processes[i]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;handle_time
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            time &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;srtf-最短剩余时间优先&#34;&gt;SRTF 最短剩余时间优先&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;其实前面大家可能注意到了，每个算法都有一个模拟时钟计数，每次time+=1就是过了一秒钟，即在第几秒那一时刻发生的动作。在这个算法中，我们不仅要注意每一秒执行哪一个作业，还要注意每一秒哪一个作业到达，更要计算每一秒，到达的作业中哪一个需要的服务时间剩的最短。所以每一秒钟执行的作业都可能不一样。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; copy &lt;span style=&#34;color:#75715e&#34;&gt;# 使用了copy，体验一下···&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;SRTF&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; __init__(self, processes_):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;processes &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; processes_
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;srtf&lt;/span&gt;(self):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        processes &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;processes
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        flag &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;# 记录已经处理完成的作业&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        time &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;# 模拟时间计数器&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        current_process &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;# 记录当前作业的下标，如果为-1表示当前没有作业在执行&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;# 主循环，已经操作完成的作业数等于所有作业时结束循环&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt;(flag &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; len(processes)):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; current_process &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#75715e&#34;&gt;# 表示有作业正在执行&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                processes[current_process]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;left_serve_time &lt;span style=&#34;color:#f92672&#34;&gt;-=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; processes[current_process]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;left_serve_time &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;进程&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; processes[current_process]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;name &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;处理完毕！&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    flag &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    processes[current_process]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;over &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    current_process &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;# 需要重置为-1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#75715e&#34;&gt;# 判断此时刻是否有新的作业进入就绪队列等待处理&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(len(processes)):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; time &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; processes[i]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;arrive_time:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    processes[i]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;ready &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#75715e&#34;&gt;# 寻找剩余时间最少的作业并进行调度&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            min_time_remain &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;# 假设所有作业的剩余时间都不会超过100&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(len(processes)):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; processes[i]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;ready &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; processes[i]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;over &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;False&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (processes[i]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;left_serve_time) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; min_time_remain:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        min_time_remain &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; processes[i]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;left_serve_time
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        current_process &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; i   &lt;span style=&#34;color:#75715e&#34;&gt;# 将剩余时间最短的作业置为当前作业&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            time &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;# 每次循环完time加一&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这样总结下来，我们发现，每秒操作就是那几个：确定当前执行作业；执行作业，判断是否完成；判断此时是否有新作业到达；时钟加一。而循环结束的条件一般都是计数 == 所有进程数。&lt;/p&gt;
&lt;h3 id=&#34;hrrn-最高响应比优先&#34;&gt;HRRN 最高响应比优先&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;这个就是每当一个作业处理完或者发生阻塞时，计算各个就绪作业的响应比，选取最高的作为当前处理作业。也就是说，作业一旦开始执行，就不会因为响应比的改变而停止，只有一个作业完成时才重新计算就绪作业的响应比。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;HRRN&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; __init__(self, processes):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sum_processes &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; processes
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;hrrn&lt;/span&gt;(self):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        pre_processes &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        over_processes &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        running_time &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        flag &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        pre_processes&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sum_processes[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;])
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt;(flag&lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt;len(self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sum_processes)):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#75715e&#34;&gt;# 计算响应比&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; j &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(len(pre_processes)):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                pre_processes[j]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;response_ratio &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (running_time &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; pre_processes[j]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;arrive_time &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; \
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                                        pre_processes[j]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;serve_time) &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; pre_processes[j]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;serve_time
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#75715e&#34;&gt;# 找到响应比最大的进程&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            max_rr &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(len(pre_processes)):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; pre_processes[i]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;response_ratio &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;=&lt;/span&gt; pre_processes[max_rr]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;response_ratio:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    max_rr &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; i
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(pre_processes[max_rr]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;serve_time):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                running_time &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;# 时钟加一&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; k &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(len(self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sum_processes)):  &lt;span style=&#34;color:#75715e&#34;&gt;# 就绪队列入队&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sum_processes[k]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;arrive_time &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; running_time:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        pre_processes&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sum_processes[k])
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            over_processes&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(pre_processes&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pop(max_rr))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            flag &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(len(over_processes)):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            print(over_processes[i]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;name)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;rr-轮转法调度&#34;&gt;RR 轮转法调度&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;在轮转法和接下来的多级反馈队列调度中，都会有时间片。也就是说，时间以时间片为大单位执行，每个时间片内，如果当前进程执行完毕输出即可，反之则放到队列最后，等待下一次执行。注意时间小单位依然是1，因为在每一秒内，我们还要知道有哪些进行到达就绪。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;RR&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; __init__(self, processes, time_block, running_time &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;processes &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; processes
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;time_block &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; time_block
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;running_time &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; running_time
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;rr&lt;/span&gt;(self):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        pre_processes &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []    &lt;span style=&#34;color:#75715e&#34;&gt;# running_time等于进程到达时间时会将其入队&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        over_processes &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []  &lt;span style=&#34;color:#75715e&#34;&gt;# 完成队列&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        flag &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;# 记录完成的进程数&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        running_time &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;running_time
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        time_block &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;time_block
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        pre_processes&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;processes[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]) &lt;span style=&#34;color:#75715e&#34;&gt;# 先将第一个进程入队&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt;(flag &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; len(self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;processes)):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#75715e&#34;&gt;# 是否进程入队的优先级高于进程从队首切换到队尾的优先级？&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#75715e&#34;&gt;# 执行当前队首进程，如果一个时间片内不能执行完，则放入队列尾部&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#75715e&#34;&gt;# 判断时间片是否大于剩余服务时间&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; time_block &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;=&lt;/span&gt; pre_processes[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;left_serve_time:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(pre_processes[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;left_serve_time):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        pre_processes[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;left_serve_time &lt;span style=&#34;color:#f92672&#34;&gt;-=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        running_time &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(len(self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;processes)):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; running_time &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;processes[i]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;arrive_time:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                                pre_processes&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;processes[i])  &lt;span style=&#34;color:#75715e&#34;&gt;# 就绪队列进入队尾&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; pre_processes[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;left_serve_time &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                            &lt;span style=&#34;color:#75715e&#34;&gt;# 计算完成时间&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                            pre_processes[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;finish_time &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; running_time
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                            &lt;span style=&#34;color:#75715e&#34;&gt;# 计算周转时间&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                            pre_processes[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;cycling_time &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pre_processes[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;finish_time \
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                                                                    &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; pre_processes[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;arrive_time
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                            &lt;span style=&#34;color:#75715e&#34;&gt;# 计算带权周转时间&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                            pre_processes[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;w_cycling_time &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; float(pre_processes[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;cycling_time) 													&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;  pre_processes[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;serve_time
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                            &lt;span style=&#34;color:#75715e&#34;&gt;# 打印&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                            print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%s&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; 进程已完成的进程，详细信息如下：&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; pre_processes[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;name)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                            print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;进程名称：&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%s&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  ，完成时间： &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%d&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    ，周转时间：&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%d&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  ，带权周转时间： 									&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%.2f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; ( pre_processes[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;name, pre_processes[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;finish_time,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                                    pre_processes[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;cycling_time,pre_processes[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;w_cycling_time))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    flag &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    over_processes&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(pre_processes&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pop(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;))  &lt;span style=&#34;color:#75715e&#34;&gt;# 进程结束从就绪队列出队进完成队列&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &lt;span style=&#34;color:#66d9ef&#34;&gt;continue&lt;/span&gt;   &lt;span style=&#34;color:#75715e&#34;&gt;# 直接结束此次循环，下面内容不执行&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;: &lt;span style=&#34;color:#75715e&#34;&gt;# 剩余服务时间大于一个时间片&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(time_block):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        pre_processes[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;left_serve_time &lt;span style=&#34;color:#f92672&#34;&gt;-=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        running_time &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(len(self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;processes)):  &lt;span style=&#34;color:#75715e&#34;&gt;# 判断此时有没有就绪队列加入队尾&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; running_time &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;processes[i]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;arrive_time:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                                 pre_processes&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;processes[i])
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &lt;span style=&#34;color:#75715e&#34;&gt;# 一个时间片结束进程从队头切换至队尾&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    pre_processes&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(pre_processes&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pop(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;mfq-多级反馈队列调度算法&#34;&gt;MFQ 多级反馈队列调度算法&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;这里我们假设的是有三级队列，时间片分别为1，2，4 。当然，可以不是这样，只需要在代码里做出一些修改，这样只是为了测试方便。&lt;/p&gt;
&lt;p&gt;在多级反馈队列中，对最后一个队列要使用轮转法进行调度，因此我们重写轮转法使之更符合MFQ的需求。注意的是，有bug：如果此时只有第三级队列有进程，某时刻突然有新进程加入队列，那么将不会处理。简单说就是开始处理最后一个队列的时候，不再受理新进入的进程，也就是在处理完一级二级队列的过程中，必须将保证所有进程都已就绪。后序如果有时间会进行改进。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;MFQ&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; __init__(self, processes, class_time_block):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;processes &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; processes &lt;span style=&#34;color:#75715e&#34;&gt;# 这是就绪以及未就绪的所有队列&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;class_time_block &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; class_time_block  &lt;span style=&#34;color:#75715e&#34;&gt;# 时间递增量级&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;mfq&lt;/span&gt;(self):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        sum_processes &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;processes
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;# 我们这里使用三队列，将到达的队列放入&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        f_processes &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        s_processes &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        t_processes &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;# 规定每个队列的时间片，这里我们直接计算&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        f_time_block &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        s_time_block &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        t_time_block &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        flag &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;# 完成进程计数&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        running_time &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;# 时钟模拟&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        processes_number &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; len(sum_processes)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        current_process &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;# 当前进行进程，如果没有置为-1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        f_processes&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(sum_processes[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;])
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt;(flag &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; processes_number):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#75715e&#34;&gt;# 判断在哪一个队列进行操作,选择当前要处理的进程&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; f_processes:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    current_process &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; f_processes[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    current_process&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pre_queue_tb &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    current_process&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pre_queue &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#66d9ef&#34;&gt;elif&lt;/span&gt; s_processes:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    current_process &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; s_processes[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    current_process&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pre_queue &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    current_process&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pre_queue_tb &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#66d9ef&#34;&gt;elif&lt;/span&gt; t_processes:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &lt;span style=&#34;color:#75715e&#34;&gt;# 轮转法，重写&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    pre_processes &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; t_processes
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    sum &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; len(t_processes)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    over_processes &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []  &lt;span style=&#34;color:#75715e&#34;&gt;# 完成队列&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    t_flag &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;# 记录完成的进程数&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &lt;span style=&#34;color:#75715e&#34;&gt;# running_time = running_time&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    time_block &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (t_flag &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; sum):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        &lt;span style=&#34;color:#75715e&#34;&gt;# 判断时间片是否大于剩余服务时间&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; time_block &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;=&lt;/span&gt; pre_processes[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;left_serve_time:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                            &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(pre_processes[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;left_serve_time):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                                pre_processes[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;left_serve_time &lt;span style=&#34;color:#f92672&#34;&gt;-=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                                running_time &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                                &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; pre_processes[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;left_serve_time &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                                    &lt;span style=&#34;color:#75715e&#34;&gt;# 计算完成时间&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                                    pre_processes[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;finish_time &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; running_time
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                                    &lt;span style=&#34;color:#75715e&#34;&gt;# 计算周转时间&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                                    pre_processes[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;cycling_time &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pre_processes[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;finish_time \
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                                                                    &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; pre_processes[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;arrive_time
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                                    &lt;span style=&#34;color:#75715e&#34;&gt;# 计算带权周转时间&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                                    pre_processes[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;w_cycling_time &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; 	
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                                    float(pre_processes[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;cycling_time) &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;     
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                                    pre_processes[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;serve_time
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                                    &lt;span style=&#34;color:#75715e&#34;&gt;# 打印&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                                    print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%s&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; 进程已完成的进程，详细信息如下：&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; 			 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                                          pre_processes[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;name)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                                    print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;进程名称：&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%s&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  ，完成时间： &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%d&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    ，周转时间：&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%d&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  ，带权周转								时间： &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%.2f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt; ( pre_processes[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;name, pre_processes[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;finish_time,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                                   pre_processes[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;cycling_time, pre_processes[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;w_cycling_time))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                            t_flag &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                            over_processes&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(pre_processes&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pop(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;))  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                            &lt;span style=&#34;color:#75715e&#34;&gt;# 进程结束从就绪队列出队进完成队列&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                            &lt;span style=&#34;color:#66d9ef&#34;&gt;continue&lt;/span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;# 直接结束此次循环，下面内容不执行&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:  &lt;span style=&#34;color:#75715e&#34;&gt;# 剩余服务时间大于一个时间片&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                            &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(time_block):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                                pre_processes[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;left_serve_time &lt;span style=&#34;color:#f92672&#34;&gt;-=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                                running_time &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                            &lt;span style=&#34;color:#75715e&#34;&gt;# 一个时间片结束进程从队头切换至队尾&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                            pre_processes&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(pre_processes&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pop(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#75715e&#34;&gt;# 在一个时间片内操作&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(current_process&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pre_queue_tb):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    current_process&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;left_serve_time &lt;span style=&#34;color:#f92672&#34;&gt;-=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    running_time &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    out_ &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &lt;span style=&#34;color:#75715e&#34;&gt;# 判断此时是否完成&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; current_process&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;left_serve_time &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        &lt;span style=&#34;color:#75715e&#34;&gt;# 如果完成，弹出&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        &lt;span style=&#34;color:#75715e&#34;&gt;# 计算完成时间&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        current_process&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;finish_time &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; running_time
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        &lt;span style=&#34;color:#75715e&#34;&gt;# 计算周转时间&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        current_process&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;cycling_time &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; current_process&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;finish_time \
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                                                        &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; current_process&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;arrive_time
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        &lt;span style=&#34;color:#75715e&#34;&gt;# 计算带权周转时间&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        current_process&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;w_cycling_time &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; float(current_process&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;cycling_time) &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; \
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                                                          current_process&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;serve_time
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        &lt;span style=&#34;color:#75715e&#34;&gt;# 打印&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%s&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; 进程已完成的进程，详细信息如下：&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; current_process&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;name)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;进程名称：&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%s&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  ，完成时间： &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%d&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    ，周转时间：&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%d&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  ，带权周转时间： &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%.2f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt; 							&lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; (current_process&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;name, current_process&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;finish_time,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                            current_process&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;cycling_time, current_process&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;w_cycling_time))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        flag &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; current_process&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pre_queue &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                            f_processes&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pop(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        &lt;span style=&#34;color:#66d9ef&#34;&gt;elif&lt;/span&gt; current_process&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pre_queue &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                            s_processes&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pop(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                            t_processes&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pop(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        current_process &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        out_ &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &lt;span style=&#34;color:#66d9ef&#34;&gt;elif&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; current_process&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pre_queue_tb&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    		&lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; current_process&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;left_serve_time &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        &lt;span style=&#34;color:#75715e&#34;&gt;# 一个时间片内未完成，进入下一队列&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; current_process&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pre_queue &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                            current_process&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pre_queue &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                            current_process&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pre_queue_tb &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                            s_processes&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(f_processes&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pop(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        &lt;span style=&#34;color:#66d9ef&#34;&gt;elif&lt;/span&gt; current_process&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pre_queue &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                            current_process&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pre_queue &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                            current_process&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pre_queue_tb &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                            t_processes&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(s_processes&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pop(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &lt;span style=&#34;color:#75715e&#34;&gt;# 判断此时有没有新进程入队，如果有，入队退出循环&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; j &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(len(sum_processes)):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; running_time &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; sum_processes[j]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;arrive_time:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                            &lt;span style=&#34;color:#75715e&#34;&gt;# 如果有新就绪队列&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                            out &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                            &lt;span style=&#34;color:#75715e&#34;&gt;# 判断当前是否有正在进行的进程&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; current_process &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                                &lt;span style=&#34;color:#75715e&#34;&gt;# 如果1队不空，加入一队&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                                &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; f_processes:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                                    sum_processes[j]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pre_queue &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                                    sum_processes[j]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pre_queue_tb &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                                    f_processes&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(sum_processes[j])
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                                    &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                                &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;: &lt;span style=&#34;color:#75715e&#34;&gt;# 如果一队空&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                                    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; current_process&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pre_queue &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                                        s_processes&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(s_processes&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pop(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                                    &lt;span style=&#34;color:#66d9ef&#34;&gt;elif&lt;/span&gt; current_process&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pre_queue &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                                        t_processes&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(t_processes&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pop(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                                    current_process &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; sum_processes[j]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                                    current_process&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pre_queue &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                                    current_process&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pre_queue_tb &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                                    f_processes&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(current_process)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                                    &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                                    &lt;span style=&#34;color:#75715e&#34;&gt;# 将此时进入进程置为当前处理的进程&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                            &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                                &lt;span style=&#34;color:#75715e&#34;&gt;# 如果没有，直接将新入队进程置为当前进程&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                                sum_processes[j]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pre_queue &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                                sum_processes[j]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pre_queue_tb &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                                current_process &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; sum_processes[j]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                                f_processes&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(current_process)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                                &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                            out &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; out &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; out_ &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;测试样例&#34;&gt;测试样例&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; __name__ &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    p1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Process(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;A&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;# or p1 = Process(&amp;#39;A&amp;#39;, 0, 3, 2) 2为静态优先级&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    p2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Process(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;B&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    p3 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Process(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;C&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    p4 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Process(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;D&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    p5 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Process(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;E&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    processes &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [p1, p2, p3, p4, p5]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    working &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; xxxx(processes, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    working&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;xxx()
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;小结&#34;&gt;小结&lt;/h2&gt;
&lt;p&gt;寒假快结束了，也没有学多少东西，导师的任务也只做了半吊子，GUI还是没做出来。写的算法里肯定还有错误，所有算法在测试样例中跑都是正确的。作业/进程结构中定义的一些譬如周转时间，带权周转时间如果需要使用，在一个作业/进程结束后计算就好，很多算法里没有加。&lt;/p&gt;
&lt;p&gt;当初写的时候，有上网查过想找参考，然而大部分是由C/C++写的。讲实话写了一段时间的python后一点都不想碰C/C++；能搜到的寥寥几篇python写的算法运行起来错误百出，我就想自己写吧还是，憋一点是一点。代码里的循环循环使得质量不佳，说白了写的跟shi一样。虽然我写的代码是s山，但是好歹是自己写的。在写RR和MFQ的时候，接近崩溃，调试一下午才勉勉强强弄完，学习之路还很长，我也希望有天我写的代码可以成为别人的祖传shi山。&lt;/p&gt;
&lt;p&gt;如果导师放过我，下面计划就是学习网络数据采集和数据分析，或许也会做一些前端的内容；反之就学习PyQt做界面，都很好。然后就是使劲学Java，学到暑假可以拿实习的程度。&lt;/p&gt;
&lt;p&gt;这篇文章如果可以给你提供帮助，我将很感谢你，如果有问题可以联系我，过段时间会添加评论系统（如果有好的插件的话）。今天是元宵节，祝大家节日快乐~&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/lizonglin313/-python-&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Github源码戳这里&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</description>
        </item>
        <item>
        <title>处理机调度与死锁（二）</title>
        <link>https://lizonglingo.github.io/p/%E5%A4%84%E7%90%86%E6%9C%BA%E8%B0%83%E5%BA%A6%E4%B8%8E%E6%AD%BB%E9%94%81%E4%BA%8C/</link>
        <pubDate>Sat, 26 Jan 2019 10:24:20 +0800</pubDate>
        
        <guid>https://lizonglingo.github.io/p/%E5%A4%84%E7%90%86%E6%9C%BA%E8%B0%83%E5%BA%A6%E4%B8%8E%E6%AD%BB%E9%94%81%E4%BA%8C/</guid>
        <description>&lt;blockquote&gt;
&lt;p&gt;接处理机调度与死锁（一），本篇主要讲述死锁部分内容。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;四死锁概述&#34;&gt;四.死锁概述&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;本节排版有些问题，可以先看本章第三部分对死锁概念的解释及定义，之后再来看第二部分计算机系统中的死锁可能会更好理解。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;1资源问题&#34;&gt;1.资源问题&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;引起死锁的资源类型：临界资源（需要互斥访问，不可被抢占的资源）。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;1可重用性资源和消耗性资源&#34;&gt;（1）可重用性资源和消耗性资源&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;可重用性资源&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;1）独占使用，不允许共享。&lt;/p&gt;
&lt;p&gt;2）使用方法：请求资源  ——&amp;gt;  使用资源  ——&amp;gt;   释放资源&lt;/p&gt;
&lt;p&gt;3）在系统中数量相对固定，进程在运行期间不能创建和删除。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;可消耗性资源（临时性资源）&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;1）在系统中数量可以不断变化&lt;/p&gt;
&lt;p&gt;2）进程在运行过程中可以（生产者）创造和（消费者）消耗。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;2可抢占性资源和不可抢占性资源&#34;&gt;（2）可抢占性资源和不可抢占性资源&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;可抢占性资源：&amp;lt; 处理机 &amp;gt;  &amp;lt; 内存 &amp;gt;&lt;/li&gt;
&lt;li&gt;不可抢占性资源：&amp;lt; 磁带机 &amp;gt;  &amp;lt; 刻录机 &amp;gt;  &amp;lt; 打印机 &amp;gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;2计算机系统中的死锁&#34;&gt;2.计算机系统中的死锁&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;死锁的起因：源于多个进程对资源的竞争，包括不可抢占性资源和可消耗性资源。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;1竞争不可抢断性资源引起死锁&#34;&gt;（1）竞争不可抢断性资源引起死锁&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;共享文件时的死锁情况：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.loli.net/2019/01/26/5c4bc86030670.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;2竞争可消耗性资源引起死锁&#34;&gt;（2）竞争可消耗性资源引起死锁&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;进程之间通信时的死锁：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.loli.net/2019/01/26/5c4bc907cba2b.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;3进程推进顺序不当引起死锁&#34;&gt;（3）进程推进顺序不当引起死锁&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;进程推进顺序对死锁的影响：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.loli.net/2019/01/26/5c4bca31cec7f.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;3死锁的定义必要条件和处理方法&#34;&gt;3.死锁的定义、必要条件和处理方法&lt;/h3&gt;
&lt;h4 id=&#34;1死锁的定义&#34;&gt;（1）死锁的定义&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;死锁：如果一组进程中的每一个进程都在等待仅由该进程中的其他进程才能引发的事件，那么该组进程就是死锁的（Deadlock）。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;饥饿与死锁：&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;饥饿：线程无限等待&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;例如：低优先级的线程等待着不断被高优先级线程所使用的资源。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;死锁：等待资源形成环路&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;线程A拥有资源1并且等待资源2&lt;/p&gt;
&lt;p&gt;线程B拥有资源2并且等待资源1&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;死锁 ——&amp;gt; 饥饿（反之不成立）&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;饥饿可以结束（但不是必须的）&lt;/p&gt;
&lt;p&gt;死锁如果没有外力介入无法结束&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;2产生死锁的必要条件&#34;&gt;（2）产生死锁的必要条件&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;产生死锁必须同时具备以下四个必要条件：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;互斥条件：要求在一段时间内某资源仅被一进程占用。&lt;/li&gt;
&lt;li&gt;请求和保持条件：当前已拥有资源的进程，仍能申请新的资源；而且，当该进程因新的资源被其他进程占用而阻塞时，对已获得的资源保持不放。&lt;/li&gt;
&lt;li&gt;不可抢占条件：进程已获得的资源，只能在使用完时自行释放。&lt;/li&gt;
&lt;li&gt;循环等待条件：在发生死锁时，必然存在一个进程 —— 资源的环形链。即进程集合{ $P_0 , P_1 , &amp;hellip;. , P_n$ } 对资源的请求成环状：$ P_0  -&amp;gt;  P_1  -&amp;gt;  P_2  -&amp;gt;  &amp;hellip; P_n  -&amp;gt;  P_0$&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img src=&#34;https://i.loli.net/2019/01/26/5c4bd0cb0eef5.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.loli.net/2019/01/26/5c4bd0efdbbca.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;3处理死锁的方法&#34;&gt;（3）处理死锁的方法&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;预防死锁&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;1）通过设置某些条件，以破坏产生死锁的四个必要条件之一的一个或几个条件，来防止发生死锁。&lt;/p&gt;
&lt;p&gt;2）易实现，但可能导致资源利用率和系统吞吐量低。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;避免死锁&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;1）在资源的动态分配过程中，用某种方法去防止系统进入不安全状态，从而避免发生死锁。&lt;/p&gt;
&lt;p&gt;2）可获得较高的资源利用率和系统吞吐量，但难度较大。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;检测死锁&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;1）通过系统设置的检测机构，及时地检测出死锁的发生，并精确地确定与死锁有关的进程和资源；然后采取适当措施。&lt;/p&gt;
&lt;p&gt;2）从系统中将已发生的死锁清除掉，需要采用一些用于强制性抢夺资源或者终止任务的技术。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;解除死锁&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;常用方法：撤销或挂起一些进程，回收资源分配给其他处于阻塞的进程。&lt;/p&gt;
&lt;p&gt;特点：资源利用率好，系统吞吐量大。实现难度最大。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;六预防死锁&#34;&gt;六.预防死锁&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;预防死锁的方法&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;使四个必要条件中的第2、3、4条件中的一个或者几个不能成立，以防止发生死锁。&lt;/p&gt;
&lt;p&gt;1）方法一：破坏“请求和保持”条件&lt;/p&gt;
&lt;p&gt;2）方法二：破坏“不可抢占”条件&lt;/p&gt;
&lt;p&gt;3）方法三：破坏“循环等待”条件&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;1破坏请求和保持条件&#34;&gt;1.破坏“请求和保持”条件&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;破坏“请求和保持”条件：系统确保当一个进程在请求资源时，它不能持有不可抢占的资源。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;1第一种协议预先静态分配法&#34;&gt;（1）第一种协议（预先静态分配法）&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;系统要求所有进程在开始运行之前，必须一次性地申请在整个运行过程中所需要的全部资源。&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;破坏“请求”条件：进程在整个运行期间，不会再提出资源要求&lt;/p&gt;
&lt;p&gt;破坏“保持”条件：等待期间进程未占有任何资源&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;优点：简单、易于实现、安全&lt;/li&gt;
&lt;li&gt;缺点：资源浪费严重，进程经常发生饥饿现象&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;2第二种协议阶段性资源分配法&#34;&gt;（2）第二种协议（阶段性资源分配法）&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;允许一个进程只获得运行初期所需的资源后便开始运行，进程运行过程中再逐步释放已经分配给自己、且已用毕的全部资源，然后再请求新的所需资源。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;2破坏不可抢占资源条件&#34;&gt;2.破坏“不可抢占资源”条件&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;当一个已经保持了某些不可被抢占资源的进程，提出新的资源请求而不能得到满足时，它必须释放已经保持的所有资源，待以后需要时再重新申请。&lt;/li&gt;
&lt;li&gt;实现难度较大，且要付出很大代价。&lt;/li&gt;
&lt;li&gt;反复申请和释放资源，使进程的执行无限地推迟。延长进程的周转时间，增加系统开销，降低系统吞吐量。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;3破坏循环等待条件&#34;&gt;3.破坏“循环等待”条件&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;系统将所有资源类型按线性排序，并赋予不同的序号，所有进程对资源的请求必须严格按资源序号递增的次序提出。这样，在资源分配图中，不会出现环路，因此摒弃了“环路等待”条件。&lt;/li&gt;
&lt;li&gt;优点：与前两种策略相比，资源利用率和系统吞吐量都有明显提高。&lt;/li&gt;
&lt;li&gt;缺点&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;1）限制新设备类型的增加&lt;/p&gt;
&lt;p&gt;2）作业（进程）使用各类资源的顺序，与系统规定顺序不同而造成资源浪费&lt;/p&gt;
&lt;p&gt;3）限制用户的自主编程&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;七避免死锁&#34;&gt;七.避免死锁&lt;/h2&gt;
&lt;h3 id=&#34;1系统安全状态&#34;&gt;1.系统安全状态&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;避免死锁的方法：将系统的状态分为安全状态和不安全状态，只要系统的状态处于安全状态，便可避免发生死锁。&lt;/li&gt;
&lt;li&gt;资源分配方法：允许进程动态地申请资源，系统在进行分配之前，先计算资源分配的安全性。若此次分配不会导致系统进入不安全状态，便将资源分配给进程；否则，进程等待。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;1安全状态&#34;&gt;（1）安全状态&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;安全状态：指系统能按照某种进程推进顺序如 &amp;lt; $P_1 , P_2 , P_3 , &amp;hellip; , P_n$ &amp;gt; （称 &amp;lt; $P_1 , P_2 , P_3 , &amp;hellip; , P_n$ &amp;gt; 为安全序列），来为每个进程分配其所需资源，直至最大需求，使每个进程都顺利完成。&lt;/li&gt;
&lt;li&gt;不安全状态：不存在安全序列的状态。&lt;/li&gt;
&lt;li&gt;避免死锁的实质：如何使系统不进入不安全状态。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;结论：并非所有不安全状态都是死锁状态，但只要系统处于安全状态便可避免死锁状态。&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;2安全状态举例&#34;&gt;（2）安全状态举例&lt;/h4&gt;
&lt;p&gt;&lt;img src=&#34;https://i.loli.net/2019/01/26/5c4c013b6565a.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;不按照安全序列分配资源，则系统可能会由安全状态进入不安全状态。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;2利用银行家算法避免死锁&#34;&gt;2.利用银行家算法避免死锁&lt;/h3&gt;
&lt;h4 id=&#34;1银行家算法中的数据结构&#34;&gt;（1）银行家算法中的数据结构&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;可利用资源向量 Available ：是一个含有 m 个元素的数组，其中每一个元素代表一类可利用的资源数目，其初始值使系统中所配置的该类全部可用资源数目。其值随资源的分配和回收而动态地改变。&lt;/li&gt;
&lt;li&gt;最大需求矩阵 Max ：是一个 n×m 的矩阵，定义了系统中 n 个进程中的每一个进程对 m 类资源的最大需求。&lt;/li&gt;
&lt;li&gt;分配矩阵 Allocation ：是一个 n×m 的矩阵，定义了系统中每一类资源当前__已分配__给每一进程的资源数。&lt;/li&gt;
&lt;li&gt;需求矩阵 Need ：是一个 n×m 的矩阵，表示每一个进程尚需的该类资源数。&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;银行家算法中的数据结构&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; n; &lt;span style=&#34;color:#75715e&#34;&gt;//系统中进程的总数 
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; m;  &lt;span style=&#34;color:#75715e&#34;&gt;//资源类总数
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; Available[m];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; Max[n,m];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; Allocation[n,m];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; Need[n,m];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; Request[n,m];
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;上述三个矩阵的关系&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;Need[ i , j ] = Max[ i , j ] - Allocation[ i , j ]&lt;/p&gt;
&lt;p&gt;其中：&lt;/p&gt;
&lt;p&gt;Need[ i , j ] = k表示进程 i 还需要 $R_j$ 类资源 k 个。&lt;/p&gt;
&lt;p&gt;Max[ i , j ] = k表示进程 i 还需要 $R_j$ 类资源的最大数目为 k。&lt;/p&gt;
&lt;p&gt;Allocation[ i , j ] = k表示进程 i 当前已分得 $R_j$ 类资源的数目为。&lt;/p&gt;
&lt;p&gt;Available[ j ] = k表示系统中现有 $R_j$ 类资源 k 个。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;2银行家算法&#34;&gt;（2）银行家算法&lt;/h4&gt;
&lt;p&gt;设$Request_i$是进程$P_i$的请求向量。&lt;/p&gt;
&lt;p&gt;例：$Request_i$[ j ] = k&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.loli.net/2019/01/26/5c4c0a23b2571.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;h4 id=&#34;3安全性算法&#34;&gt;（3）安全性算法&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;为进行安全性检查，定义数据结构：&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; Work[m];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; Finish[n];
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;安全性检查步骤&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;1）Work = Available     Finish[ i ] = false&lt;/p&gt;
&lt;p&gt;2）寻找满足条件的 i ：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Finish[ i ] = false &amp;amp;&amp;amp; Need[ i , j ] &amp;lt;= Work&lt;/p&gt;
&lt;p&gt;if not find&lt;/p&gt;
&lt;p&gt;转4）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;3）Work[ i ] = Work[ i ] + Allocation[ i , j ]  &amp;amp;&amp;amp;  Finish[ i ] = true   转2）&lt;/p&gt;
&lt;p&gt;4）若对所有 i ，Finish[ i ] = true都满足，则系统处于安全状态，否则处于不安全状态&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;4银行家算法举例&#34;&gt;（4）银行家算法举例&lt;/h4&gt;
&lt;p&gt;假定系统中有五个进程｛$ P_0 , P_1 , P_2 , P_3 , P_4$｝和三类资源｛A, B, C｝，各种资源的数量分别为10、5、7。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;$T_0$时刻资源分配表：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.loli.net/2019/01/26/5c4c0e527595a.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.loli.net/2019/01/26/5c4c0effa5425.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;工作向量Work，它表示系统可提供给进程所需运行时间的各类资源的数目&lt;/p&gt;
&lt;p&gt;$T_0$时刻的安全序列：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.loli.net/2019/01/26/5c4c0f6507df0.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;当$P_1$发出请求向量Request（1，0，2）&lt;/p&gt;
&lt;p&gt;系统作如如下动作：&lt;/p&gt;
&lt;p&gt;1）合理性检查：$Request_i(1,0,2) &amp;lt;= Need_i(1,2,2)$&lt;/p&gt;
&lt;p&gt;2）查库存：$Request_i(1,0,2) &amp;lt;= Available(1,2,2)$&lt;/p&gt;
&lt;p&gt;3）试分配&lt;/p&gt;
&lt;p&gt;4）安全性检查&lt;/p&gt;
&lt;p&gt;5）得出结论：因为可以找到一个安全序列{$P_1,P_2, P_4,P_0, P_2$}，系统是安全的，所以可以满足P1的资源申请&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.loli.net/2019/01/26/5c4c10e44d1b4.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;若P4发出请求向量Request（3，3，0）&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.loli.net/2019/01/26/5c4c12467c7e0.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;这种情况，就不能满足要求。$P_4$就需要继续等待。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;若P0发出请求向量Request（0，2，0）&lt;/p&gt;
&lt;p&gt;系统进行如下操作：&lt;/p&gt;
&lt;p&gt;1）合理性检查：$Request_0$（0，2，0） &amp;lt;= $Need_0$（7，4，3）&lt;/p&gt;
&lt;p&gt;2）查库存：$Request_0$（0，2，0） &amp;lt;= $Available$（2，3，0）&lt;/p&gt;
&lt;p&gt;3）试分配&lt;/p&gt;
&lt;p&gt;4）安全性检查&lt;/p&gt;
&lt;p&gt;5）结论：可用资源Available(2,1,0)已不能满足任何进程的需要，系统进入不安全状态，拒绝$P_0$的资源申请。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.loli.net/2019/01/26/5c4c1326bfda5.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;八死锁的检测与解除&#34;&gt;八.死锁的检测与解除&lt;/h2&gt;
&lt;h3 id=&#34;1死锁的检测&#34;&gt;1.死锁的检测&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;当系统为进程分配资源时，若未采取任何限制措施，则系统必须提供检测和解除死锁的手段。为此系统必须有：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;1）保存有关资源的请求和分配信息&lt;/p&gt;
&lt;p&gt;2）提供一种算法，以利用这些信息来检测系统是否已进入死锁状态&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;检测时机：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;1）进程等待时检测死锁（其缺点是系统的开销大）&lt;/p&gt;
&lt;p&gt;2）定时检测&lt;/p&gt;
&lt;p&gt;3）系统资源利用率下降时检测死锁&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;1资源分配图&#34;&gt;（1）资源分配图&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img src=&#34;https://i.loli.net/2019/01/26/5c4c151318de4.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;2死锁定理&#34;&gt;（2）死锁定理&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;充分条件：当且仅当系统某状态S所对应的资源分配图是不可完全简化的，则S是死锁状态，而不可化简的进程是被死锁的进程。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;完全简化：通过一系列简化后，所有的进程都成为孤立节点。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;不可能完全简化：通过任何过程都不能使图完全简化。。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;资源分配图的简化&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img src=&#34;https://i.loli.net/2019/01/26/5c4c1825c9767.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;3死锁检测中的数据结构&#34;&gt;（3）死锁检测中的数据结构&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;可利用资源向量Available，它表示了m 类资源中每一类资源的可用数目。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;把不占用资源的进程（向量Allocation = 0）记入L表中， 即$L_i$∪L。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;从进程集合中找到一个$Request_i$ ≤ Work的进程，做如下处理：&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;将其资源分配图简化，释放出资源，增加工作向量Work = Work + $Allocation_i$。 将它记入L表中。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;若不能把所有进程都记入L表中，便表明系统状态S的资源分配图是不可完全简化的。因此，该系统状态将发生死锁。&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Work  &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;  Available;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;L  &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {Li &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; Allocationi&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;∩&lt;/span&gt; Requesti&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;} &lt;span style=&#34;color:#75715e&#34;&gt;//孤立进程点
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (all  Li &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;不属于&lt;/span&gt; L) 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#a6e22e&#34;&gt;For&lt;/span&gt; (all Requesti &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; Work) 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   {  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   	Work  &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Work &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; Allocationi;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   	Li&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;∪&lt;/span&gt;L
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;deadlock  &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;not&lt;/span&gt; (L&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;{P1, P2, &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;…&lt;/span&gt;, Pn})
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;2死锁的解除&#34;&gt;2.死锁的解除&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;当发现有进程死锁时，便应立即把它们从死锁状态解脱出来，常采用的两种方法是：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;1）剥夺资源：从其它进程剥夺足够数量的资源给死锁进程。&lt;/p&gt;
&lt;p&gt;2）撤消进程：&lt;/p&gt;
&lt;p&gt;最简单的方法是撤消全部死锁的进程，使全部死锁进程都夭折掉。&lt;/p&gt;
&lt;p&gt;稍微温和一点的方法是按照某种顺序逐个地撤消进程，直至有足够的资源可用，死锁状态消除为止。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;对撤消进程方法，选择原则可采用下面的一种：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;1）目前为止消耗的处理机时间最少；&lt;/p&gt;
&lt;p&gt;2）目前为止产生的输出最少；&lt;/p&gt;
&lt;p&gt;3）预计剩下的时间最长；&lt;/p&gt;
&lt;p&gt;4）目前为止分配的资源总量最少；&lt;/p&gt;
&lt;p&gt;5）优先级最低。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;为把系统从死锁状态中解脱出来，所花费的代价可表示为：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;$ R(S)&lt;em&gt;{min} = min{C&lt;/em&gt;{ui}}+min{C_{uj}}+min{C_{uk}}+…$&lt;/p&gt;
&lt;p&gt;付出代价最小的死锁解除方法：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.loli.net/2019/01/26/5c4c1bf430a87.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;更新于   2019/01/26   &amp;mdash;   16:39&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>处理机调度与死锁(一)</title>
        <link>https://lizonglingo.github.io/p/%E5%A4%84%E7%90%86%E6%9C%BA%E8%B0%83%E5%BA%A6%E4%B8%8E%E6%AD%BB%E9%94%81%E4%B8%80/</link>
        <pubDate>Tue, 22 Jan 2019 20:03:57 +0800</pubDate>
        
        <guid>https://lizonglingo.github.io/p/%E5%A4%84%E7%90%86%E6%9C%BA%E8%B0%83%E5%BA%A6%E4%B8%8E%E6%AD%BB%E9%94%81%E4%B8%80/</guid>
        <description>&lt;blockquote&gt;
&lt;p&gt;今天考完科目三之后接到导师的任务，关于处理机和死锁的算法问题，要求图形界面及动画演示(基于Python)。真的哭辽，完全没有头绪···在这里记录学习和解决的过程。&lt;/p&gt;
&lt;p&gt;目录：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;处理机调度的层次和调度算法的目标&lt;/li&gt;
&lt;li&gt;作业与作业调度&lt;/li&gt;
&lt;li&gt;进程调度&lt;/li&gt;
&lt;li&gt;实时调度&lt;/li&gt;
&lt;li&gt;死锁概述&lt;/li&gt;
&lt;li&gt;预防死锁&lt;/li&gt;
&lt;li&gt;避免死锁&lt;/li&gt;
&lt;li&gt;死锁的检测与接触&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;一处理机调度的层次和调度算法的目标&#34;&gt;一.处理机调度的层次和调度算法的目标&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;处理机是计算机系统中的重要资源。处理机调度算法对整个计算机系统的综合性能指标有重要影响。&lt;/p&gt;
&lt;p&gt;从处理机调度的分类：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;高级调度（作业调度）：作业调度的周期较长，几分钟一次。&lt;/li&gt;
&lt;li&gt;中级调度（内外存交换）：介于高级与低级之间。&lt;/li&gt;
&lt;li&gt;低级调度（进程调度）：运行频率最高，10~100ms一次。&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;1处理机调度层次&#34;&gt;1.处理机调度层次&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;高级调度&lt;/li&gt;
&lt;li&gt;低级调度&lt;/li&gt;
&lt;li&gt;中级调度&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;（1）高级调度&lt;/p&gt;
&lt;p&gt;高级调度又称为“作业调度”“长程调度”“接纳调度”。&lt;/p&gt;
&lt;p&gt;主要功能：根据某种算法，把外存上处于后备队列中的那些作业调入内存。&lt;/p&gt;
&lt;p&gt;主要任务：&amp;lt; 选择作业 &amp;gt; &amp;lt; 为作业创建进程 &amp;gt; &amp;lt; 分配资源 &amp;gt; &amp;lt; 插入就绪队列 &amp;gt;&lt;/p&gt;
&lt;p&gt;应用范围：&amp;lt; 批处理系统中配有作业调度 &amp;gt; &amp;lt; 分配和实时系统中通常没有作业调度 &amp;gt;&lt;/p&gt;
&lt;p&gt;（2）低级调度&lt;/p&gt;
&lt;p&gt;低级调度又称为“进程调度”或“短程调度”。&lt;/p&gt;
&lt;p&gt;主要功能：根据某种算法，决定就绪队列中哪个进程先获得处理机，然后再由分派程序执行将处理机分配给进程的操作。&lt;/p&gt;
&lt;p&gt;主要任务：&amp;lt; 保存处理机的现场信息 &amp;gt; &amp;lt; 按某种算法选取进程 &amp;gt; &amp;lt; 分配处理器 &amp;gt;&lt;/p&gt;
&lt;p&gt;（3）中级调度&lt;/p&gt;
&lt;p&gt;中级调度又称“内存调度”或“中程调度”。&lt;/p&gt;
&lt;p&gt;主要目的：缓解内存紧张情况，提高内存利用率和系统吞吐量。&lt;/p&gt;
&lt;p&gt;主要功能：按一定算法在内存和外存之间进行进程对换。&lt;/p&gt;
&lt;p&gt;主要任务：是将内存中处于阻塞状态的某些进程换至外存，腾出内存空间以便将外存上已具备执行条件的进程换入内存。&lt;/p&gt;
&lt;p&gt;应用范围：分时系统和具有虚拟存储器的系统中。&lt;/p&gt;
&lt;h3 id=&#34;2处理机调度算法的目标&#34;&gt;2.处理机调度算法的目标&lt;/h3&gt;
&lt;h4 id=&#34;1处理机调度算法的共同目标&#34;&gt;（1）处理机调度算法的共同目标&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;资源利用率&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;$ CPU资源利用率 = \frac{CPU有效工作时间} {CPU有效工作时间 + CPU空闲等待时间} $&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;公平性&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;lt; 不出现进程&lt;a class=&#34;link&#34; href=&#34;https://bkso.baidu.com/item/%E8%BF%9B%E7%A8%8B%E9%A5%A5%E9%A5%BF&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;饥饿现象&lt;/a&gt; &amp;gt; &amp;lt; 公平性是相对的 &amp;gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;平衡性&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;合理安排不同类型的作业，CPU繁忙型、I/O繁忙型。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;策略强制执行&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;根据需要准确执行所定制的策略。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;2批处理系统的目标&#34;&gt;（2）批处理系统的目标&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;平均周转时间短&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;周转时间（$T_i$）：指从作业（进程）被提交给系统开始，到作业完成为止的这段时间间隔。&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://imgchr.com/i/kEK1II&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;img src=&#34;https://s2.ax1x.com/2019/01/23/kEK1II.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;kEK1II.png&#34;
	
	
&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;$ T=\frac{1}{n}\sum_{i=1}^n T_i $&lt;/p&gt;
&lt;p&gt;带权周转时间（W）：用于反应调度性能的指标，$ W=\frac{T}{T_s} $ （$T_s$为实际处理时间)&lt;/p&gt;
&lt;p&gt;平均带权周转时间：$ W=\frac{1}{n}\sum_{i=1}^n\frac{T_i}{T_s} $&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;系统吞吐量高&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;吞吐量：单位时间内系统所完成的作业数。&lt;/p&gt;
&lt;p&gt;策略：选择短服务业运行。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;处理机利用率高&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;策略：选择计算量大的作业运行。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;3分时系统的目标&#34;&gt;（3）分时系统的目标&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;响应时间快&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;响应时间：从用户通过键盘提交一个请求开始，到首次产生响应为止（显示出结果）的一段时间间隔。&lt;/p&gt;
&lt;p&gt;包括这三部分：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;把请求信息从键盘传送到处理机的时间。&lt;/li&gt;
&lt;li&gt;处理机对请求信息进行处理的时间。&lt;/li&gt;
&lt;li&gt;将响应信息回送到终端显示器的时间。&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;均衡性&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;均衡性：指系统响应时间的快慢应与用户所请求服务的复杂性相适应。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;4实时系统的目标&#34;&gt;（4）实时系统的目标&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;截至时间的保证&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;截至时间：某任务必须开始或完成的最迟时间。&lt;/p&gt;
&lt;p&gt;（这是实时系统调度算法的一个主要目标；HRT任务与SRT任务对截止时间的要求有所差异。）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;可预测性&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;如多媒体系统中的视频播放就提供了请求的可预测性。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;二作业与作业调度&#34;&gt;二.作业与作业调度&lt;/h2&gt;
&lt;h3 id=&#34;1批处理系统中的作业&#34;&gt;1.批处理系统中的作业&lt;/h3&gt;
&lt;h4 id=&#34;1作业和作业步&#34;&gt;（1）作业和作业步&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;作业：由程序、数据及作业说明书三部分组成。&lt;/li&gt;
&lt;li&gt;作业步（Job Step）：作业运行期间，每个作业都必须经过若干个相对独立，又相互关联的顺序加工步骤才能得到结果，其中每一个加工步骤又称为一个作业步：&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;lt; “编译”作业步 &amp;gt; &amp;lt; “链接装配”作业步 &amp;gt; &amp;lt; “运行”作业步 &amp;gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;2作业控制块&#34;&gt;（2）作业控制块&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;作业控制块&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;是作业在系统中存在的标志，保存了系统对作业进行管理和调度的全部信息。通常包括：作业标识、用户名称、用户帐户、作业类型、作业状态、调度信息、资源需求、进入系统时间、开始处理时间、作业完成时间、作业退出时间、资源使用情况等。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;作业的生命周期&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;作业进入系统时，由“作业注册”程序为作业建立JCB，然后根据作业类型将其放到相应的作业后备队列等待调度；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;调度程序按一定的调度算法将调度到的作业装入内存；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;作业运行期间，系统按照JCB中的信息对作业进行控制；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;作业执行结束，系统负责回收它的资源，撤消它的JCB。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;3作业运行的三个阶段和三种状态&#34;&gt;（3）作业运行的三个阶段和三种状态&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;作业运行的三个阶段&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;收容阶段&lt;/p&gt;
&lt;p&gt;运行阶段&lt;/p&gt;
&lt;p&gt;完成阶段&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;作业的三种状态&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;后备状态&lt;/p&gt;
&lt;p&gt;运行状态&lt;/p&gt;
&lt;p&gt;完成状态&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;2作业调度的主要任务&#34;&gt;2.作业调度的主要任务&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;执行调度时的要解决的问题&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;接纳多少个作业。&lt;/p&gt;
&lt;p&gt;接纳哪些作业（由调度算法决定，如FCFS、SJF、优先级调度算法等）。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;作业调度的应用范围&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;批处理系统中配有作业调度。&lt;/p&gt;
&lt;p&gt;分时和实时系统中通常没有作业调度，但有接纳控制措施。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;3先来先服务调度算法fcfs和短作业优先调度算法sjf&#34;&gt;3.先来先服务调度算法（FCFS）和短作业优先调度算法（SJF）&lt;/h3&gt;
&lt;h4 id=&#34;1fcfs&#34;&gt;（1）FCFS&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;作业调度&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;按照作业提交的先后次序，从后备队列中选择几个最先进入该队列的作业，将它们调入内存，为它们分配资源和创建进程，然后放入就绪队列。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;进程调度&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;从就绪队列中选择一个最先进入该队列的进程，为它分配CPU，使之运行；该进程一直运行到完成或发生阻塞。&lt;/p&gt;
&lt;p&gt;在进程被唤醒后（如I/O完成），并不立即恢复执行，通常等到当前进程出让CPU。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;特点：&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;简单、易于实现、服务质量不佳。&lt;/p&gt;
&lt;p&gt;取决于作业（进程）提交顺序。&lt;/p&gt;
&lt;p&gt;较有利于长作业（进程）或CPU繁忙型的作业。&lt;/p&gt;
&lt;p&gt;不利于短作业（进程）或I/O繁忙型作业。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;用途：&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;既可用于作业调度，也可用于进程调度。&lt;/p&gt;
&lt;p&gt;很少作为进程调度的主要算法，但常作为辅助调度算法。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;进程名&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;到达时间&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;服务时间&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;开始执行时间&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;完成时间&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;周转时间&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;带权周转时间&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;A&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;0&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;1&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;0&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;1&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;1&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;B&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;1&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;100&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;1&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;101&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;100&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;C&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;2&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;1&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;101&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;102&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;100&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;100&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;D&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;3&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;100&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;102&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;202&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;199&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;1.99&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;blockquote&gt;
&lt;p&gt;周转时间：周转时间 = 完成时间 - 到达时间&lt;/p&gt;
&lt;p&gt;平均周转时间：$ T=\frac{1}{n}\sum_{i=1}^n T_i $&lt;/p&gt;
&lt;p&gt;带权周转时间：$带权周转时间 = \frac{周转时间}{服务时间}$&lt;/p&gt;
&lt;p&gt;平均带权周转时间：求和取平均&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;2sjf&#34;&gt;（2）SJF&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;作业调度&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;从外存的作业后备队列中选择若干个估计运行时间最短的作业，优先将它们调入内存运行。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;进程调度&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;对预计执行时间短的进程优先分配处理机。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;特点&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;能显著改善作业的平均周转时间。&lt;/p&gt;
&lt;p&gt;在降低作业的平均等待时间同时，提高系统吞吐量。&lt;/p&gt;
&lt;p&gt;必须预知作业的运行时间。&lt;/p&gt;
&lt;p&gt;对长作业非常不利（饥饿）。&lt;/p&gt;
&lt;p&gt;人机无法实现交互。&lt;/p&gt;
&lt;p&gt;未考虑作业的紧迫程度。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;用途&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;可分别用于作业调度和进程调度。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;4优先级调度算法psa和高响应比优先调度算法hrrn&#34;&gt;4.优先级调度算法（PSA）和高响应比优先调度算法（HRRN）&lt;/h3&gt;
&lt;h4 id=&#34;1psapriority-scheduling-algorithm&#34;&gt;（1）PSA（Priority-Scheduling Algorithm）&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;基本思想：基于作业的紧迫程度，由外部赋予作业相应的优先级，调度时按优先级的高低进行调度。&lt;/li&gt;
&lt;li&gt;应用范围：用于批处理系统中的作业调度算法、多种操作系统及实时系统中的进程调度算法。&lt;/li&gt;
&lt;li&gt;作业调度：从后备队列中选择若干个优先权最高的作业调入内存。&lt;/li&gt;
&lt;li&gt;进程调度：是把处理机分配给就绪队列中具有最高优先权的进程。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;2hrrnhighest-response-ratio-next&#34;&gt;（2）HRRN（Highest Response Ratio Next）&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;$优先权 = \frac{等待时间+要求服务时间}{要求服务时间} = \frac{响应时间}{要求服务时间} = R_p$&lt;/p&gt;
&lt;p&gt;是一种__动态优先权调度算法__。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;调度规则：在当前作业完成或被阻塞时，选择$R_p$值最大的作业。&lt;/li&gt;
&lt;li&gt;特点&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;照顾了短作业。&lt;/p&gt;
&lt;p&gt;先来先服务，等待时间越短，$R_p$越小。&lt;/p&gt;
&lt;p&gt;不会使长作业长时间得不到服务，因为随着等待时间的增的，$R_p$也在增大，从而获得处理机。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;缺点：增加系统开销。因为每次调度时，都要进行响应比$R_p$的计算。&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;更新于 2019/01/23  &amp;mdash;  21:51&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;三进程调度&#34;&gt;三.进程调度&lt;/h2&gt;
&lt;h3 id=&#34;1进程调度的任务机制和方式&#34;&gt;1.进程调度的任务、机制和方式&lt;/h3&gt;
&lt;h4 id=&#34;1进程调度的任务&#34;&gt;（1）进程调度的任务&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;保存处理机的现场信息（当前进程的）&lt;/li&gt;
&lt;li&gt;按某种算法选取进程&lt;/li&gt;
&lt;li&gt;把处理机分配给进程（装入现场信息）&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;2进程调度中的三个基本机制&#34;&gt;（2）进程调度中的三个基本机制&lt;/h4&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://imgchr.com/i/kZFtEV&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;img src=&#34;https://s2.ax1x.com/2019/01/24/kZFtEV.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;kZFtEV.png&#34;
	
	
&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;排队器：将系统中所有就绪进程按一定的方式排成一个或多个队列。&lt;/li&gt;
&lt;li&gt;分派器：把由进程调度程序所选定的程序，从就绪队列中取出，进行从分派队列进程到新选出进程间的上下文切换，将处理机分配给它。&lt;/li&gt;
&lt;li&gt;上下文切换机制&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;对处理机进行切换时，会发生两对上下文切换操作：&lt;/p&gt;
&lt;p&gt;第一对上下文切换时，OS将保存当前进程的上下文，装入分派程序的上下文；第二对上下文切换时，移出分派程序，把新选进程的CPU现场信息装入到处理机的各个相应寄存器中。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;3进程调度方式&#34;&gt;（3）进程调度方式&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;非抢占方式（Nonpreemptive Mode）&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;引起调度的原因：&lt;/p&gt;
&lt;p&gt;1）正在执行的进程执行完毕，或因发生某事件而不能再继续执行。&lt;/p&gt;
&lt;p&gt;2）执行中的进程因提出I/O请求而暂停执行。&lt;/p&gt;
&lt;p&gt;3）在进程通信或同步过程中执行了某种&lt;a class=&#34;link&#34; href=&#34;https://baike.baidu.com/item/%E5%8E%9F%E8%AF%AD&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;原语&lt;/a&gt;操作。&lt;/p&gt;
&lt;p&gt;优点：实现简单，系统开销小，适用于大多数的批处理系统。&lt;/p&gt;
&lt;p&gt;缺点：难以满足紧急任务的要求，不宜用于分时系统和大多数实时系统。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;抢占方式（Preemptive Mode）&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;抢占调度的原则：&lt;/p&gt;
&lt;p&gt;1）优先权调度原则&lt;/p&gt;
&lt;p&gt;2）短进程优先原则&lt;/p&gt;
&lt;p&gt;3）时间片原则&lt;/p&gt;
&lt;p&gt;优点：可以防止一个长进程长时间占用处理机，能为大多数进程提供更公平的服务。&lt;/p&gt;
&lt;p&gt;缺点：系统开销大。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;2转轮调度算法rr&#34;&gt;2.转轮调度算法（RR）&lt;/h3&gt;
&lt;h4 id=&#34;1rr调度算法的基本原理&#34;&gt;（1）RR调度算法的基本原理&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;1）将系统中所有就绪进程按照FCFS原则，排成一个队列。&lt;/p&gt;
&lt;p&gt;2）每次调度时将CPU分派给队首进程，让其执行一个时间片。时间片长度从几个ms到几百ms。&lt;/p&gt;
&lt;p&gt;3）在一个时间片结束时，发生时钟中断。&lt;/p&gt;
&lt;p&gt;4）调度程序据此时暂停当前进程的执行，将其送到就绪队列的末尾，并通过上下文切换执行当前的队列队首进程&lt;/p&gt;
&lt;p&gt;5）进程可以未使用完一个时间片，就让出CPU。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;2进程切换时机&#34;&gt;（2）进程切换时机&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;一个时间片尚未用完&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;原因：&lt;/p&gt;
&lt;p&gt;1）进程运行结束&lt;/p&gt;
&lt;p&gt;2）进程阻塞&lt;/p&gt;
&lt;p&gt;操作：&lt;/p&gt;
&lt;p&gt;1）立即激活调度程序&lt;/p&gt;
&lt;p&gt;2）调度就绪队列队首的进程运行&lt;/p&gt;
&lt;p&gt;3）启动一个新的时间片&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;一个时间片用完时&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;原因：进程尚未运行结束&lt;/p&gt;
&lt;p&gt;操作：&lt;/p&gt;
&lt;p&gt;1）计时器中断处理程序激活&lt;/p&gt;
&lt;p&gt;2）调度程序将进程送至就绪队列末尾&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;3时间片大小的确定&#34;&gt;（3）时间片大小的确定&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;太大：响应时间受影响&lt;/li&gt;
&lt;li&gt;无穷大：退化为FCFS算法&lt;/li&gt;
&lt;li&gt;太小：增加系统开销&lt;/li&gt;
&lt;li&gt;选取：时间片大小一般选取略大于一次典型的交互所需要的时间&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;3高优先级调度算法&#34;&gt;3.高优先级调度算法&lt;/h3&gt;
&lt;h4 id=&#34;1优先级调度算法的类型&#34;&gt;（1）优先级调度算法的类型&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;非抢占式优先权算法：&lt;/p&gt;
&lt;p&gt;处理机分配给就绪队列优先权最高的进程后，该进程就一直执行下去，直至完成；或因发生某事件使该进程放弃处理机时，才进行CPU的重新分配。&lt;/p&gt;
&lt;p&gt;应用范围：批处理系统、实时性要求不严的实时系统。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;抢占式优先权调度算法：&lt;/p&gt;
&lt;p&gt;处理机分配给就绪队列优先权最高的进程后，只要出现另一个优先权更高的进程时，便停止原来执行进程，把处理机分配给新出现的优先权最高的进程。&lt;/p&gt;
&lt;p&gt;应用范围：实时性要求比较严格的实时系统。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;2优先级的类型&#34;&gt;（2）优先级的类型&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;静态优先级&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;进程优先级在创建进程时确定，整个运行期间保持不变。&lt;/p&gt;
&lt;p&gt;确定优先权的依据：&lt;/p&gt;
&lt;p&gt;1）进程类型：系统进程的优先级高于一般用户进程。&lt;/p&gt;
&lt;p&gt;2）进程对资源的需求：资源要求少的进程赋予较高的优先级。&lt;/p&gt;
&lt;p&gt;3）用户要求：根据进程的紧迫程序及用户的付费确定优先级。&lt;/p&gt;
&lt;p&gt;特点：&lt;/p&gt;
&lt;p&gt;1）简单易行，系统开销小，不够精确&lt;/p&gt;
&lt;p&gt;2）可能会出现低优先权作业长期不被调度&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;动态优先级&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;进程创建时赋予的优先权可以随进程的推进或等待时间的增加而改变，以便获得更好的调度性能。&lt;/p&gt;
&lt;p&gt;如：优先权随执行时间而下降，随等待时间而升高。&lt;/p&gt;
&lt;p&gt;优点：长短兼顾，可以防止某类作业长时间垄断CPU。&lt;/p&gt;
&lt;p&gt;缺点：增加了系统开销。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;4多队列调度算法&#34;&gt;4.多队列调度算法&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;描述&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;1）将不同类型或性质的就绪进程固定分配在不同的就绪队列；&lt;/p&gt;
&lt;p&gt;2）不同的就绪队列采用不同的的调度算法；&lt;/p&gt;
&lt;p&gt;3）一个就绪队列中的进程可以设置不同优先级；&lt;/p&gt;
&lt;p&gt;4）不同的就绪队列本身也可以设置不同的优先级。&lt;/p&gt;
&lt;p&gt;比如：多处理机系统。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;5多级反馈队列调度算法mfq&#34;&gt;5.多级反馈队列调度算法（MFQ）&lt;/h3&gt;
&lt;h4 id=&#34;1调度机制&#34;&gt;（1）调度机制&lt;/h4&gt;
&lt;p&gt;&lt;img src=&#34;https://i.loli.net/2019/01/24/5c49619559c29.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;设置多个就绪队列，并为各个队列赋予不同的优先权，第一个队列的优先级最高，优先级依次降低。&lt;/li&gt;
&lt;li&gt;赋予各个队列中进程执行时间片的大小也各不相同。优先权愈高，时间片愈小。&lt;/li&gt;
&lt;li&gt;新进程进入内存后，放在第一队列未尾，先来先服务；一个时间片内运行不完，则转下一队列。&lt;/li&gt;
&lt;li&gt;按队列顺序运行，最后一个队列按时间片轮转，其余按FCFS运行。&lt;/li&gt;
&lt;li&gt;仅当第一队列空闲时，调度程序才调度第二队列中的进程运行；仅当第1~（i - 1）
队列均空时，才会调度第i队列中的进程运行。&lt;/li&gt;
&lt;li&gt;如果处理机正在第i队列中为某进程服务时，又有新进程进入优先权较高的队列(第1~（i - 1）中的任何一个队列)，则此时须立即把正在运行的进程放回到第 i队列的末尾，把处理机分配给新到的高优先级进程。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;2调度算法性能&#34;&gt;（2）调度算法性能&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;多级反馈队列调度算法：属于抢占式调度方式。&lt;/li&gt;
&lt;li&gt;调度算法的性能：具有较好的性能，能照顾到各种用户的利益&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;终端型作业用户&lt;/p&gt;
&lt;p&gt;短批处理作业用户&lt;/p&gt;
&lt;p&gt;长批处理作业用户&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;6基于公平原则的调度算法&#34;&gt;6.基于公平原则的调度算法&lt;/h3&gt;
&lt;h4 id=&#34;1保证调度算法&#34;&gt;（1）保证调度算法&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;保证调度算法向用户保证的是明确的性能，可以做到调度的公平性。&lt;/li&gt;
&lt;li&gt;保证处理机分配的公平性：如果系统中有n个相同类型的进程同时运行，须保证每个进程都获得相同的处理机时间 $\frac{1}{n}$。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;保证的是每个进程获得相同的处理机时间&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;实施公平调度算时，系统必须具备的功能：&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;1）跟踪计算每个进程自创建以来已经执行的处理时间；&lt;/p&gt;
&lt;p&gt;2）计算每个进程应获得的处理机时间：$T_target = \frac{T_current - T_create}{n}$.&lt;/p&gt;
&lt;p&gt;3）进程获得处理机时间的比率：$\frac{T_real}{T_target}$。&lt;/p&gt;
&lt;p&gt;4）比较各进程获得处理机的时间比率。&lt;/p&gt;
&lt;p&gt;5）调度程序选择比率最小的进程，将处理机分配给它，并让该进程一直运行到超过最接近它的进程比率为止。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;2公平分享调度算法&#34;&gt;（2）公平分享调度算法&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;调度的公平性是针对用户，所有用户能获得相同的处理机时间，或所要求的时间比例。&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;例：系统中有2个用户，用户1有4个进程A、B、C、D，用户2只有1个进程E。&lt;/p&gt;
&lt;p&gt;保证两个用户获得相同的处理机时间，则强制调度序列为：A E B E C E D E A E B E C E D E&amp;hellip;&amp;hellip;&lt;/p&gt;
&lt;p&gt;希望用户1获得的处理机时间是用户2的2倍，则强制调度序列为：A B E C D E A B E C D E A B E C D E ……&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;四实时调度&#34;&gt;四.实时调度&lt;/h2&gt;
&lt;h3 id=&#34;1实现实时调度的基本条件&#34;&gt;1.实现实时调度的基本条件&lt;/h3&gt;
&lt;h4 id=&#34;1提供必要信息&#34;&gt;（1）提供必要信息&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;就绪时间&lt;/li&gt;
&lt;li&gt;开始或者完成截止时间&lt;/li&gt;
&lt;li&gt;处理时间&lt;/li&gt;
&lt;li&gt;资源需求&lt;/li&gt;
&lt;li&gt;绝对或相对优先级（硬实时或软实时）&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;2系统处理能力强&#34;&gt;（2）系统处理能力强&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;单处理机情况下，要求满足下面限制条件：$ \sum_{i = 1}^m \frac{C_i}{P_i} &amp;lt;= 1$（其中$C_i$表示处理时间$P_i$表示周期时间)。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;3采用抢占式调度机制&#34;&gt;（3）采用抢占式调度机制&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;以满足HRT任务对截止时间的要求。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;4具有快速切换机制&#34;&gt;（4）具有快速切换机制&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;对外部中断的快速响应能力&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;1）系统具有快速硬件终端机构。&lt;/p&gt;
&lt;p&gt;2）在中断处理时（硬件），禁止中断的时间间隔尽量短。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;相应地采用较小的调度单位（如线程），以减少任务切换的时间开销。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;2实时调度算法分类&#34;&gt;2.实时调度算法分类&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;按实时任务性质分类&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;硬实时调度算法&lt;/p&gt;
&lt;p&gt;软实时调度算法&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;按调度方式分类&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;非抢占调度算法&lt;/p&gt;
&lt;p&gt;抢占调度算法&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;1非抢占式调度算法&#34;&gt;（1）非抢占式调度算法&lt;/h4&gt;
&lt;p&gt;&lt;img src=&#34;https://i.loli.net/2019/01/24/5c4957b313a52.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;特点：算法比较简单，易于实现&lt;/li&gt;
&lt;li&gt;分类&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;非抢占式轮转调度算法：秒级的响应时间，适用于一般实时信息处理系统或要求不太严格的实时控制系统&lt;/p&gt;
&lt;p&gt;非抢占式优先级调度算法：秒级至数百毫秒级的响应时间，适用于有一定要求的实时控制系统。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;2抢占式调度算法&#34;&gt;（2）抢占式调度算法&lt;/h4&gt;
&lt;p&gt;&lt;img src=&#34;https://i.loli.net/2019/01/24/5c4958488a615.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;应用：要求较严格（响应时间为数十毫秒以下）的实时系统。&lt;/li&gt;
&lt;li&gt;分类&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;基于时钟中断的抢占式优先级调度算法：几十毫秒级至几毫秒级的响应时间，用于大多数的实时控制系统。&lt;/p&gt;
&lt;p&gt;立即抢占（Immediate Preemption）的优先级调度算法：一旦出现外部中断，只要当前任务未处于临界资源，便立即剥夺当前任务的执行。调度延迟可低到几毫秒至100微妙。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;3最早截止时间优先edf算法&#34;&gt;3.最早截止时间优先（EDF）算法&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;该算法是根据任务的开始截止时间来确定任务的优先级，任务的开始截止时间愈早，其优先级愈高。&lt;/li&gt;
&lt;li&gt;要求系统中保持一个实时任务就绪队列，该队列按各任务的截止时间的早晚排序。&lt;/li&gt;
&lt;li&gt;可采用非抢占调度方式，也可采用抢占调度方式。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;1非抢占式调度方式用于非周期实时任务&#34;&gt;（1）非抢占式调度方式用于非周期实时任务&lt;/h4&gt;
&lt;p&gt;&lt;img src=&#34;https://i.loli.net/2019/01/24/5c495937a7cd2.jpg&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;例：对下面5个非周期性实时任务，按最早开始截止时间优先调度算法应如何进行CPU调度？&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;进程&lt;/th&gt;
&lt;th&gt;到达时间&lt;/th&gt;
&lt;th&gt;执行时间&lt;/th&gt;
&lt;th&gt;开始截止时间&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;A&lt;/td&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;20&lt;/td&gt;
&lt;td&gt;110&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;B&lt;/td&gt;
&lt;td&gt;20&lt;/td&gt;
&lt;td&gt;20&lt;/td&gt;
&lt;td&gt;20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;C&lt;/td&gt;
&lt;td&gt;40&lt;/td&gt;
&lt;td&gt;20&lt;/td&gt;
&lt;td&gt;50&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;D&lt;/td&gt;
&lt;td&gt;50&lt;/td&gt;
&lt;td&gt;20&lt;/td&gt;
&lt;td&gt;90&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;E&lt;/td&gt;
&lt;td&gt;60&lt;/td&gt;
&lt;td&gt;20&lt;/td&gt;
&lt;td&gt;70&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&#34;https://i.loli.net/2019/01/24/5c495a6a9726a.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;h4 id=&#34;2抢占式调度方式用于周期实时任务&#34;&gt;（2）抢占式调度方式用于周期实时任务&lt;/h4&gt;
&lt;p&gt;&lt;img src=&#34;https://i.loli.net/2019/01/24/5c495adad41ed.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;4最低松弛度优先llf算法&#34;&gt;4.最低松弛度优先（LLF）算法&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;该算法根据实时任务的松弛度来确定任务的优先级，任务的松弛度愈低，其优先级愈高。&lt;/li&gt;
&lt;li&gt;松弛度 = 必须完成时间 - 其本身的运行时间 - 当前时间&lt;/li&gt;
&lt;li&gt;要求系统中有一个按松弛度排序的实时任务就绪队列。&lt;/li&gt;
&lt;li&gt;主要用于可抢占调度方式中，当一任务的最低松弛度减为0时，它便立即抢占CPU，以保证按截止时间的要求完成任务。&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;例：若A进程需在200ms时完成，其本身运行需要100ms，当前时刻是10ms，则A的松弛度是多少？&lt;/p&gt;
&lt;p&gt;A的松弛度 = 200－100－10 ＝ 90ms&lt;/p&gt;
&lt;p&gt;例：假如在一个实时系统中，有两个周期性实时任务A和B，任务A要求每 20 ms执行一次，执行时间为 10 ms；任务B只要求每50 ms执行一次，执行时间为 25 ms。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.loli.net/2019/01/24/5c495be2f0adb.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.loli.net/2019/01/24/5c495c0922952.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;5优先级倒置&#34;&gt;5.优先级倒置&lt;/h3&gt;
&lt;h4 id=&#34;1优先级倒置的形成&#34;&gt;（1）优先级倒置的形成&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;形成：OS广泛采用优先级调度算法和抢占调度方式，而系统中存在着影响进程运行的资源，可能产生“优先级倒置”的现象，即一个低优先级的任务持有一个被高优先级任务所需要的共享资源，高优先任务由于因资源缺乏而处于阻塞状态，一直等到低优先级任务释放资源为止。&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;优先级倒置的例子：有三个独立的并发进程P1、P2、P3，它们的优先级为： P1&amp;gt;P2&amp;gt;P3，P1与P3均会使用到一个临界资源。&lt;/p&gt;
&lt;p&gt;P1:  …P(mutex); CS-1; V(mutex); …&lt;/p&gt;
&lt;p&gt;P2: … program2; …&lt;/p&gt;
&lt;p&gt;P3: … P(mutex); CS-3; V(mutex); …&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.loli.net/2019/01/24/5c495dc0a0989.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;2优先级倒置的解决方法&#34;&gt;（2）优先级倒置的解决方法&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;设置优先级上限：给临界区一个高优先级，进入临界区的进程都将获得这个高优先级，如果其他试图进入临界区的进程的优先级都低于这个高优先级，那么优先级反转就不会发生。&lt;/li&gt;
&lt;li&gt;优先级继承：当一个高优先级进程等待一个低优先级进程持有的资源时，低优先级进程将暂时获得高优先级进程的优先级别，在释放共享资源后，低优先级进程回到原来的优先级别。&lt;/li&gt;
&lt;li&gt;使用中断禁止：通过禁止中断来保护临界区，采用此种策略的系统只有两种优先级：可抢占优先级和中断禁止优先级。前者为一般进程运行时的优先级，后者为运行于临界区的优先级。&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;更新于  2019/01/24   &amp;mdash;   14:46&lt;/p&gt;
&lt;p&gt;至此前四部分完成，接下来第二篇会写死锁。&lt;/p&gt;
&lt;/blockquote&gt;
</description>
        </item>
        
    </channel>
</rss>
